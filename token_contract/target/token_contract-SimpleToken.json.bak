{"noir_version":"1.0.0-beta.7+0000000000000000000000000000000000000000","name":"SimpleToken","functions":[{"name":"_finalize_mint_to_private_unsafe","hash":"8477094620865545972","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"minter_and_completer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"partial_note","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"2186653215069968126":{"error_kind":"string","string":"Function _finalize_mint_to_private_unsafe can only be called internally"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6783944322265357017":{"error_kind":"string","string":"Invalid partial note or completer"},"10253686202003112746":{"error_kind":"string","string":"Cannot complete a PartialUintNote with a value of 0"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_finalize_mint_to_private_unsafe"],"brillig_names":["_finalize_mint_to_private_unsafe"]},{"name":"_finalize_transfer_to_private_unsafe","hash":"17325210311376115313","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"from_and_completer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"partial_note","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6783944322265357017":{"error_kind":"string","string":"Invalid partial note or completer"},"10253686202003112746":{"error_kind":"string","string":"Cannot complete a PartialUintNote with a value of 0"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17028138060491915576":{"error_kind":"string","string":"Function _finalize_transfer_to_private_unsafe can only be called internally"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["_finalize_transfer_to_private_unsafe"],"brillig_names":["_finalize_transfer_to_private_unsafe"]},{"name":"_increase_public_balance","hash":"3605239269490711969","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"10502589790419500451":{"error_kind":"string","string":"Function _increase_public_balance can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZndTiM5EIXfJddc+K/KZV5lNBoxTGaFFAHKwEqrEe++Vek67oRdW9DR3HC+QOfgsk+Xnc7v3Y/999e/vj08/nz6tbv98nv3/fhwODz89e3wdH/38vD0qL/9vQv2I+XdbbnZpbK7rSq0u41BlVWjanUVVbusqep1Wd8bRTW6Jld1S0m1uJIru1ZXcW2LluAaXZOr+ZFqcSVXdq2u4toWpeAaXc1Px0fZtbiSq/rlrKp+2a4X17Yoq1/Wujm6Jtfsqn5F543JlV3Vr6gvi2tbtAbX6Jpcs2txJVfzY9XqKq5tUVE/0v8n6kd6fdPrSder6fWk42/iqteTjjeGAIiABMiAAiAAAypAAHCO5iwGEZAAGVAABGBABQigOSQ4JzgnOFuKiQ0KgAAMqAABNAeL8wIRkABwznC2TFMzYEB1sBgvoNdwMGBABQigOVhYF4iABMiAAoCzRZWTgRlmg+ZgaV0gAsywGGRAARCAARUggOZguV0gAuBc4VzhXOFc4VzhbPllMmgOlly26RV7uwVJCMAAe7sttwigObQAiIAEyIACIAAD3DBZnrkZqHO1Tmh5XiACEiADrHtam7T01mQggOZg6V0gAhIgA8wnGxCAARUggOZg6V3AnK1LW3oXyIACIAADKkAcLMaVDCIgATKgAAjAgAoQQHMgOBOcLeqVDTKgAAjAgArA9BKmlzG9jOm1GFfb0yy01RbXQrtAAmRA8XU/hfYEDKgAZOMUWgNruwtEQAJkAJwFzgJngbPAWeBsMT4N3mJcT78hAPuYrbkvIIC2QLb2LsEgAhJABybRoAAIwHh7BQgAzjEAIiABMqAACADn030hb283OxxFvr0c93s7iZydTfTE8nx33D++7G4fXw+Hm93fd4fX00W/nu8eT/pyd9S/akH7xx+qavjz4bA3ertZ3x3Gb9U+bq3o9HZt5a11C93ULkzixCTYKWXxCCWdWdCFRRpbFGnVLUoL3C1qvHDIYwcpGfMgpQwdpmW0hjJ0vx2WQVeXwX+2DDsM+GrIeDVkYkHWlRYLznE0iDZ2aBQwiEYUryxDjzjDMmbh1r2gB1N3gTAO9ySaFCpWRFGGpUyz2WMhFNPIYl5K5rUU4nEp18czXp/Pj68KybCUMG05pfetoNtCN6HL3hfbNGJhbVyUZGSSph10baAllrWYellMmmVd+tq2dRC5xI87EBxSSGOHSUarBsItaqO8eoR86VHGHpkwnSWu0dAD3cdnUyOKqaCzeP1nNicR5RqwIjXxmUd8Nxt1MhscYXF2y+vZe2u4ch2Ga2ain6F6E6xhOJA8mdIq/XarkvNwa43T2ejTwRSGFmleybq7ljZsgvNSwlpKGbbiPImofghM69a2bvKZN/eNkkdLmycpTf2woYfIdRjtM6PoIbXNchiwLNd3r9yu7V5Thw91rxKv714lXdu9prP5we5VyvXdq9Af7l7n4WrDcJU6m47QPUqqw4GUyZRK7h5yfqO8u+XLNF25rKtSh7f8dBip3yeiH11Hw6BJRCVwPwTqc72hxbSJEq+HYg5tw/FLn9dgS0nxrJe/z/nconQLLtssGpZVnwm1oQVNOigl3GyUwzaHfhzmSJvKSHkt4+yT72csWHCgTtzyJosae/+sk6ng+Gc99OFp6HvrWeP5lEe1h3iLR21pm0cLvQ23tG1VUi9FHzpuu0t074HFeef61Cj6fqJumwq5eDbDm0Ku31iE9eQm2yy4j0IfaW+yyP1mVdw2Ckrh/zaCT1nwusNL21bIms6cthWS1w+/mTYVUks/SRfeYtD6J5NGm4poAevZ0rYR9Ey1SleW8N7gq768u384XnxX/GZWx4e774e9v/z5+nh/9teXf57xF3zX/Hx8ut//eD3uzWn9wll/fMn6UToX+mrfG+pLyTci9kIfKX9JeghMgb++2VD+BQ==","names":["_increase_public_balance"],"brillig_names":["_increase_public_balance"]},{"name":"_recurse_subtract_balance","hash":"7735282391182601654","is_unconstrained":false,"custom_attributes":["internal","private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14111519877593195750":{"error_kind":"string","string":"Function _recurse_subtract_balance can only be called internally"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["_recurse_subtract_balance"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","get_public_keys_and_partial_address","decompose_hint","lte_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","store_in_execution_cache_oracle_wrapper","call_private_function_internal","load","store_in_execution_cache_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"_reduce_total_supply","hash":"10178707412769224237","is_unconstrained":true,"custom_attributes":["public","internal"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4856349594034274052":{"error_kind":"string","string":"Function _reduce_total_supply can only be called internally"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/81VS0vDQBBO2kSN9YUPEK+CFwW3zbO3CHpVsAfP2+yuBKqVtIrH/nS7MEvXcfsiSfGDMJPN7DfzzSQb25rBBuuge8sQk4Il5dCukIsYC10EFROC9cA2tOfNCsV6KG+V/AkJQs+gr8L6fQ846+yP4qyBn2wDz/1kxo+1WJpVcXiPO732wdffMxWzA8+VfwC+h/bUMf8a50NODPWrXC3QegX3e9PrCHz69fb0kQ0Zv2Os4KOR3jNc7yKsw9lcg/Mccz5+Dga5yHnx8J2Pxn+4TQek8htorTGnLn1dh2mGEilYUg5tF2k4Aytnd6P15BD3pMffGS/+0+gsJMW15n/SWPYFWCn7FnzceokULCmHjtR/ivX3xsOCvvJnTtmqPVi1/01rdlSZOF0txkHrmEPfh2PtBev6Phv5Ks8W4sG1uij+EqycWwfVaRvqlJC9V6857v1LkY+5hbDsGzZ96zrkWaj+xc7kt6gU1kkJxAkhqoYm8KuBYjjacz3+Gu53NV3KOiXqFDFtC58KGlLGgoweI369b60a8vd5m/tCCJ/TQERi4/kDPwr9xO9m3SSKBQk2nb+TJFG30ydBzDLBAn9Z/h+HhBL7AQwAAA==","debug_symbols":"tZbdjqJAEIXfhWsuuqq6+sdXmRiDihMSgobRTTbGd99ihG65qM7umrnxgMBHHeqkq+/Vsd3fPnfdcDp/VZuPe7Ufu77vPnf9+dBcu/Mg/94rM/0AVxtbV+CqjRfx1QaMaBAF0fhUNLOCqNyOKCr3I4kGUTsrzyo4JFE/q/CQReNTycwqPBQO4aw0q51VeCTvJeGRfTzqanGwu45tOxl4sSRGL83YDtdqM9z6vq5+Nf3t+6avSzN867UZ5ao4bIejqABPXd9OR486P230R4HY2flxIBdjQoAJKwgUIAZxYRiLLwheIVBH2BD9jLDRuITwsCKQTgiWlu8QrFUJRRsxLjYAomqD37bhftYGh9SNoHcjFBDseUE4Aq2IqBMim6WIyAxv2gDUbZTCjQQpmEhk9HAXosnGLx2Rw6BaKWYzxSIwoIYoWyGXrbDTrbwfT3g/n3/fFQ6qlRLEeMgp95YShNdrHxRCCmBTzMG/pCP49bpVKMSHZMYHIu17YCHp3k2z6IlwbFQElp3ktctGNWJlKyZbsWrQ0RbqcHkSOMpLKDnzv52NWmfRFcca5qlmcx3xH8pwPpcR1YBhaR21ZuksWPR6wAohDZQYgUBdSankhSnNeLZe7UqxDEz7hIBBH9CFkAaTvmgAUPNFVMo5uzwVnIkryFbOmkM3rvaFj4k2ds2+b+fT0204vFy9/r4sV5Z95WU8H9rjbWwn0svmUn4/KNSWtrKXlL3eB5uacfuYXv0H","names":["_reduce_total_supply"],"brillig_names":["_reduce_total_supply"]},{"name":"burn_private","hash":"13026355243987448303","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"authwit_nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"4368111498112096070":{"error_kind":"string","string":"invalid authwit nonce"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"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","debug_symbols":"","names":["burn_private"],"brillig_names":["discover_new_messages","emit_offchain_effect_oracle_wrapper","store_in_execution_cache_oracle_wrapper","call_private_function_internal","load","notify_created_nullifier_oracle_wrapper","get_notes_internal","get_collapse_hints","get_public_keys_and_partial_address","decompose_hint","lte_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"burn_public","hash":"14258856058317934827","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"authwit_nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"939615093317106671":{"error_kind":"string","string":"Invalid response from registry"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4368111498112096070":{"error_kind":"string","string":"invalid authwit nonce"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZvbbhW7EkX/Jc95sMvlS/ErWwgFCFuRooCy4UhHiH8/VW7X7E449k56kRdqLLJ6+lbTt05+Xn2+/fjj7w93D1++/nP17q+fVx8f7+7v7/7+cP/10833u68P+r8/r4L9Q3L1jq+vkn6oGuLVuxg0ksaoMY3IGu1rWWPR2K7ekX1Pn6Z0fcVhxDgijZhG5BH1eVIdLiNWjarHbUTVS6qbw4hxRBoxjcgjql4ijWXEOqLqJdXPssUSRowj0ohpRB4xj2h6WWMdsY0oW6xhxDgijZhGNL2mMY9YRqwjthFliy2MGEekEa3/dFwaj5hHLCPWEduIskUJI8YRacShJ6rHOq6SRywj1hHbiLLFGIJDdFBJJoPkwA7ZoThUh+YgA6IpZ4PoQA7JgR2yQ3GoDs3BlLXvIgWH6EAOyYEdskNxqA7NwZWTKydXTq6cXDm5cnLl5MrJlc1GORjIADPSBtGBHFQ5W4+ZmTIbqHIuBsWhOjQHGWCW2iA6kENyYAdXzq6cXTm7cnbl4srmpmxDYHbaIDuYjjXZHLVBc5ABZqoNrGJikBzYQQWL9YY5agMVLJaQ5qkNZIC5qViPmZ02SA6mYxUzJ21QHZqDDDA3bRAdyCE5sIMpWyvMUxtUh+YgG5DZaoPoQA7JQZVrNMgOxaE6qHItBqpc7Smz1QbRQZVbMEgO7JAdVLklg+rQHFS5WRFmqw2iAzkkB3bIDsWhOpiyGMgAs9UG0UGVxUo3W4k91VeiYG3ua9FGxah/rYIaSIx0aMjMNSiCCGRrXbBSzWA6CylZ+qsnjSqogcTJLDAoggiUQAzKIJRRUEZBGQVlVJRRUUZFGRVl1K5n/VL7s9aO1p+w3mj9CTZKIAZlUAFVUANBWQIoggiUQAzKoDIomQ90ujcylb7VCH0PYpuNkEAMyqACqqAGEqcYQBGEMmIvo2+BGJRBBVRBDSROFEARRCCUQSiDUAb1MrJRBTWQOKUAiiACJRCDMghlJJTRnRKbkTh1p2yUQP17YiROOYAiiEAJxKAMKqAKMuW+seyO2iiCCJRADMqgAqqg5tR9RLap7Z4hy7/KoAzqKpaTtYIaSJxaAEUQgRKIQRnkygwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwHMBzAcADDAQwH5J4ldijMPUsoGzEogwqognqtih0Qew2qEYESiEEZVEAV1PWakTj1jNgoggiUQAzqZYhRAVVQA4lTz6aNIohAprwdezOogCqogcSpZ9NGEUSgBEIZBWX0bErRqIIaSJx6Xm0UQRiFilGoGIWKUaie97ln03aIjyACJVCvqWVOz6aNCqiCGkic+q5lowgiUAKhDEEZgjIEZQjKEC+j9Bl9u3yIoP5Tu0jo824qRgnEoAwqwxWlz7sbNZA49Xl3owgiUAIxKINQBqEMQhmEMhLK6N7q7ejeStWogKrXvvtoI3HqPtqo90szIlAC9d4QowwqIJTBKINRRkYZ3UcbocczejyjxzN6fHNUJ5Sx+aj8+nV95VdoH74/3t7aDdrhTk1v2r7dPN4+fL969/Dj/v766j839z/6l/75dvPQ4/ebR/2p5vntw2eNKvjl7v7W6Nf1/nSYP6rdXng8rlUSgYRerjwRiQuRYBP8phGYDhL5iQTNJbhJHRIsoUCixicKaa7QOHk/NOapwrIZIt4MXT6nzcgXN6O8bTPs2mOMRpuPRltI6FTqEiXFWSVkriA5eCVEV58Lm6EbiGkzFsmdxI7sXSIJ7ZXIT+0RF3mZQ/XhUGzTdiwTEznRcqSZxKodTTLaEWjajrwaj+LDIXtH6An95X3J3hF6ugjTOtTFiOrEB4MVXWN2EX4q0i4fELl4QNZNKZz2phSaNYUWGa47RNfQjeG0HkRLk1gJw+y5zEVW9eCEeuip5JxE4F1CphKLDC3ia0gNvGeoLievGJS2T1s1yHRQFiK63UVnlDBvySJFW2zeGY0O/fl8RSX5EwO7qghhCm16iTWtSIpvq0GCPtWbtt329ZnEahLt+7StGro6QUJv816hQRkaRU5qYGVsdJg7ftNYLPFVdwae6pLTXGORpim7W/QuZXcL8Wtm40K7W+LULWmVptIa0lTkkOzPRDhcPrZrjZeN7VrjZWPL6fKxtXvvtxzbSoeZUObDskhTfSnGEKmlpqnIKk8Dxlatz7NZbC2x7370tcVUYjmbRuxe9LASztUjwS963z3dmeflnrbsO6BQKZyqB5MvL4l5urXOaVWPWvcTW5Vyrh4h7/WYLlA5r+pxmD6C0LlxydFXKH0zMO+PlV/06ItTsN4XTJf9tV8koDFV5hPqv4iUuovU+gdE5vZfTIb6kqBhv5/LbL+/UojYweg7gDpTKKs8PQyLauybj2c7h7KYTWMrWKD2jkgcX66AsxMdDl+/KfyBFb9cvOIve5MbJp98uFr4rTcXM6luq31Eqr5r3jXi096oi8SoxfOiHg5wsdVTmZXbLLPq6uAU97UtHhaV57Woq7W+RRxZWkqzOaPysivQFyVPl4Oa1y3Zr614fo5cNyXsTZkfAetyz7FfAur97J7j5dyMUXg6rrK8z6T9OnOX0Aq9uBINRqMwTa4WL5+2Gl06bS0VXjRtNb582mr50mlr2ZsvnLZavXzaau1Np61DZtH0Ck1W1/W8bzH0tfa0FrI60SdotBTnl7vL1Eq8D0mden1ZDSr7LUmb7kBlkZ8tYJvT9J36VGI5e+ayXzMvLnxW40rIDD625Pm41suXI2kXL0ciFy9HMYQ/sB6t2/Ki9SgGetsF6TiyMr94D/ymK1KKuHrXQ+i8FuXyiUNPgxfPHDG0y6eOdUVeNnfEGC6ePGKMbzt7UH/zva3T8eC550vkWoIhcUixV0mID60uTTK/dVq9ZMokeJ8RTkrg1UyJ+VRDKO0NOdxKvEaiNPcbFUmnJGrE5qumc4NKBbU4Xnu9RiLh/Scd/fqqWmDzpWqnuvPJbweUU4MaI16K65LSzknst92xnatFQnIqnqtFpvD/Zr9XSZR9O9zkXEMCJBKda0ji/ddG8rmGFCS43lGfq0XFG1S95zqXnbL3hdApicrYq3A5IyDY/Ek+1Q8SPDGFztUA5pCaL2zCOQG9ud3fINPhrFlfvE/KGcdVxXpOAnfJOR9+8eVVEnj1ko/L4KsksJ5nfTn/VOK9frz5dPf45K8vf5nY493Nx/vb8fHLj4dPh59+/+83/4n/9ea3x6+fbj//eLw1pf1POPWfv1gPCTpTvbe/rNOPpJfNlKN9jPoxSbnW+e/9L6vM/wA=","names":["burn_public"],"brillig_names":["burn_public"]},{"name":"cancel_authwit","hash":"13819721522572189155","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["cancel_authwit"],"brillig_names":["discover_new_messages","notify_created_nullifier_oracle_wrapper"]},{"name":"constructor","hash":"17556220621515704623","is_unconstrained":true,"custom_attributes":["public","initializer"],"abi":{"parameters":[{"name":"name","type":{"kind":"string","length":31},"visibility":"private"},{"name":"symbol","type":{"kind":"string","length":31},"visibility":"private"},{"name":"decimals","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":null,"error_types":{"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["constructor"],"brillig_names":["constructor"]},{"name":"finalize_mint_to_private","hash":"10281781681448692189","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"partial_note","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6783944322265357017":{"error_kind":"string","string":"Invalid partial note or completer"},"10253686202003112746":{"error_kind":"string","string":"Cannot complete a PartialUintNote with a value of 0"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["finalize_mint_to_private"],"brillig_names":["finalize_mint_to_private"]},{"name":"finalize_transfer_to_private","hash":"9939332946671279923","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"partial_note","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6783944322265357017":{"error_kind":"string","string":"Invalid partial note or completer"},"10253686202003112746":{"error_kind":"string","string":"Cannot complete a PartialUintNote with a value of 0"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["finalize_transfer_to_private"],"brillig_names":["finalize_transfer_to_private"]},{"name":"mint_privately","hash":"10153700613848545304","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["mint_privately"],"brillig_names":["discover_new_messages","random","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"mint_publicly","hash":"5854948896452952482","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"tZrbbhs5EET/Rc9+ILt5a/9KEASOowQGBNtQ7AUWgf99uzVdM5J3Scgz6xfX0a1MsouXGenP7sf+++uvbw+PP59+726//Nl9Pz4cDg+/vh2e7u9eHp4e9dk/u2B/iHe36WZHaXdbVfLuNgbVohpVq2tTtbfJpBxcoyu5smtyza7Ftbqan/4/lklTcI2u5MquyTW7Flf1I21vaq4yaQ6u6kdZVf1I35/ZNbmqH4lqca2uzVX9WNtbgqv6cVElV3ZVP26q2bW4Vlf1SzqORSatwVX9kvpWcmXX5Jpdi2t1ba4yaTM/7U+LruTKruqX9f819cv2fvXL2q6mfkWfF/UpdLOLQY0KG0SAWpVswIAEyIACqIAGEIcYABEA52jOxSABMqAAKqABxIECIAIIAGeCM8HZIl6SQQU0gDhYzCeIAAIwIAEyAM4MZ4t7qQbiYIGfgAH2nmYgDhbiCSKAAAxIgAwogAqAs6W4BgM1rNGAAAxIADWsFgnL8gQV0ADiYHmeIAIIwIAEgHOFc4VzhXOFc4OzRbtaIC3bE5ihDa+luFqQWgOIg9jHrdwSAQRgQAJkQAFUQAPIBBTckCzP1dZOy3NtBgxIgAwoAHPWFYYsvc2WXEvvBARgQAJkQAGoT7MV2tI7gThYeieIAAIwwJzJIAMKoAIaQBwsvRNEgBmyQQJkQAFUQAOIg0V9ggggAJwznC3qzTYji/oEFdAA4mCZnwDDWzC8BcNbMLwW45YN7CUrroV2ggwogOp1P4X2BOJwCu0JkI1TaE/AgATIgAKAc4Nzg7PAWeAscLYYnxpvMW6nZxpApjazLe8TRAABrMvNIAEywLosBhXQAHCOcI5wjnCODEiADCiACmgAOJ/mRXl7u9nh9PLt5bjf2+Hl7Dijh5znu+P+8WV3+/h6ONzs/ro7vJ7e9Pv57vGkL3dHfVXrvH/8oaqGPx8Oe6O3m+XTof9RXeJtOT99XFd5kdlC97sLkzgwCUTwCInOLPKFBfUtUpPqFklCmS1qvHDgvkNLjHFoKXUdht0QQTd0K+52I2/uRvncbtgxyKvR+tVoA4tsO81kUTj2GiF9B8kBjZCc48Zu6Omn241BuEkKxlIXjmUs8+X0iDSaH8v0SDEtrajvZscgmdHm/GQhbXbgFK93yHCgQH2HQTCrptEtqmRePAJfegyiyRmzPMVlMHUnv340U5tnWD4L979Gc5DNUgMqUqmcecR3ozFIZ7ULhMmiLhXRQ9eqZEnuJYtG+Y5pnmN62Oy2ggbjWVtESWpj7s0y4uFQzGNRcuhapHFPloUzCXVNhl0JS1dS61oM8qlHf1pWrWX95hJW1FUPFrFb1zaywFjouWFpg1zbBJ2RNDch114TOGyPFsfN0WLaHC3m/yFa465cFS3Onxqti7oW7ta1fma0WpwNQj9asn0/TGHrfjh0uGo/TLR9P0y8dT8cjuaV+2HK2/fDVD5xP7xIVuwmK43OnCnEOVlUu61Ig/FsPHu08ynybqbnYbQ4LSWp3Zk+bAbNk6RR657h8yCfLRRcSDS9P9i1GK6duSwn6BKkZzKqa0zzfhhL9wSd8/a65rK9rnV7XYfNuLKusrmuJXxuXfV+Hk4IeiMvdBevsUWaLUpaZyEoq94zlK5FGRw+M2EFzRzWOcyX7CXmVd0gXrpxdvvjIxalzdcTRXiVRY3zplhHQyGf66HLRJiPSme7yYc8qt0Nnzyq0DoPCfPeKrSuKrRc5VFdN0v0QAGL85XrQ62YDwnqtqojFzfoyqqQ6zdaYTmIt3UWZW5FbOtawfNkVVzXikzhvzaCD1mU5djWZF1HlnQyresIp+XObV7VkZrmC6NU1hjIfKEpeVUnJKCeQutaMGdKat7YhfcGX/Xh3f3D8eI3Bm9mdXy4+37Y+8Ofr4/3Z6++/P2MV/Abhefj0/3+x+txb07LDxX0zxfW7+w5ta/2vbI+1KkuyR7oNwRfSAdH98Wvb9aUfwA=","names":["mint_publicly"],"brillig_names":["mint_publicly"]},{"name":"prepare_private_balance_increase","hash":"10503583661694175330","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["prepare_private_balance_increase"],"brillig_names":["discover_new_messages","random","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]},{"name":"private_balance_of","hash":"5828417643011412651","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["private_balance_of"],"brillig_names":["private_balance_of"]},{"name":"private_transfer","hash":"16062561282836802438","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2429784973622283587":{"error_kind":"string","string":"Can only emit a note log for an existing note."},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11170287298796244984":{"error_kind":"string","string":"Something has gone wrong"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"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cdg4bBw2DhuHjcPH4ePwcfg4fBw+Dh+Hj8PH4ePY49jj2OPY49jj2OPY49jj2OPY44hxxDhiHDGOGEeMI8YR44hxxDhyHDmOHEeOI8eR48hx5DhyHDmOGkeNo8ZR46hx1DhqHDWOGkc9RzcVXZIhHVpDNuRDeyiGcmgcMg4Zh4xDxiHjkHHIOGQcMg4Zh45Dx6Hj0HF8dR6/Jh/aQzGUQ/Xoq/NLMqRDa2gcaxxrHGscaxxrHDYOG4eNw8Zh47Bx2DhsHDYOG4ePw8fh4/Bx+Dh8HD4OH4ePw8exx7HHscexx7HHscexx7HHscexxxHjiHHEOGIcMY4YR4wjxhHjiHHkOHIcOY4cR44jx5HjyHHkOHIcNY4aR42jxlHjqHHUOGocNY6vzuPvsoV049IlGfoc0bSGbMiH9lAM5VA9+ur8kgyNQ8Yh45BxyDhkHDIOGYeOQ8eh49Bx6Dh0HDoOHYeOQ8exxrHGscaxxrHGscaxxrHGscaxxmHjsHHYOGwcNg4bh43DxmHjsHH4OHwcPg4fh4/Dx+Hj8HH4OHwcexx7HHscexx7HHscexx7HHscexwxjhhHjCPGEeOIccQ4YhwxjhhHjiPHkePIceQ4chw5jhxHjiPHUeOocdQ4ahw1jhpHjaPGUeOo5+jmqEsypENryIZ8aA/FUA6NY+rcp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfOfercp8596tynzn3q3KfO99T5njrfU+d76nxPne+p8z11vqfO99T5njrfU+d76nxPne+p8z11vqfO99T5njrfU+d76nxPne+p8z11vqfO99T5njrfU+d76nxPne+p8z11vqfO99T5njrfU+d76nxPne+p8z11vqfO99T5njrfU+d76nxPne+p8z11vqfO99T5njrfU+d76nxPne+p8z11vqfO99T5njrfU+d76nxPne+p8z11vqfO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4pkqyu0GPfWVP2Ihnumi3I7QU3c5E0aRpHM1qUaSaqSoRopqpKhGimqkqEaKaqSoRoq8Rd6C97aCXhZiJV7EM4UUpTmP0pxHac6jNOdRmvMozXmU5jxKcx6lOY/SnEdpzqM051Ga8yjNeVTIq+RV8ip5lbxKXiWvklfJq+SlLFLKIqUsUsoipSxSyiKlLFLKIqUsUsoipSxSyiKlLFLKIqUsUsoipSxSyiKlLFLKott92nV0208vC7ESY255+067pm7j6eUgxtzy9p52rd3m06413XSuYnElitWVKJZXolhfiWKBJbqpRoJqJKhGgmokyBvkDfIGeYO8ge8vpTmP0pxHac6jNOdRmvMozXmU5jxKcx6lOY/SnEdpzqM051Ga8yjNeZTmPEpzHqU5jxZ5i7xFXlp/LVp/LVp/LVp/LVp/LVp/LcqiRVm0KIsWZdGiLFqURYuyaFEWLcqiRVm0KIsWZdGiLFqURYuyaFEWLcqiRVl0+1m7Xm5D62Un3sT4/rqdrF07t5X1shDj++t2s3ZN3XbWrqlF669F669F669F669F669F669F669F669F669F669F669F669F669F66/bx3qZvE5ex/fXojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPojnPovXXovXXovXXovXXovXXovXXoixalEWLsmhRFi3KokVZtCiLFmXRoixalEWLsmhRFi3KokVZtCiLFmXRoixalEWLsmhRFi1af93G18tCrMT4/rodr11Tt+X18lxml9v02vV1u167vozWX0brL6P1l9H6y2j9ZbT+Mlp/Ga2/jNZfRusvo/WX0frLaP1ltP4yWn8Zrb9uw+tl8t45T/+KGs15jOY8RnMeozmP0ZzHaM5jNOcxmvMYzXmM5jxGcx6jOY/RnMdozmM05zGa8xjNeYzmPEbrL6P1l9H6y2j9ZbT+Mlp/GWWRURYZZZFRFhllkVEWGWWRURYZZZFRFhllkVEWGWWRURYZZZFRFhllkVEWGWWRURYZrb+M1l+3m/ZyEhdqjdZfr4328CI21N3tpO26u620XXe0/jJafxmtv4zWX0brL6P1l9H6y2j9ZbT+Mlp/Ga2/nNZfTusvp/WX0/rrNtFeduJNHFN3TnMepzmP05zHac7jNOdxmvM4zXmc5jxO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","names":["private_transfer"],"brillig_names":["discover_new_messages","get_notes_internal","get_collapse_hints","get_public_keys_and_partial_address","decompose_hint","lte_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","store_in_execution_cache_oracle_wrapper","call_private_function_internal","load","random","notify_created_note_oracle_wrapper","remove_constraints","remove_constraints","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","notify_created_nullifier_oracle_wrapper","directive_invert","directive_integer_quotient"]},{"name":"process_message","hash":"3540233880590132770","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[{"name":"message_ciphertext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":17,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"message_context","type":{"kind":"struct","path":"aztec::messages::processing::message_context::MessageContext","fields":[{"name":"tx_hash","type":{"kind":"field"}},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"first_nullifier_in_tx","type":{"kind":"field"}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"private"}],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["process_message"],"brillig_names":["process_message"]},{"name":"public_balance_of","hash":"9824572107611793613","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14904894741898998030":{"error_kind":"string","string":"Function public_balance_of can only be called statically"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/9VawW4jRRDt8Xhsjx1jw4IEF75hJrbj5GaUhGUvILF3pFl7jCIFFsUBLRISc+HAjTsX/gIkJH6CA3+xEhISB4SEx+5ynp9rxjaeye6WFHVPV3VVdXVVdXU7jlmCY/9SqMIYg4yNbBscBmGBvAJH0TN3EdqEru349rsCeLfAhfuKLkXxPw36kW8211yg/j3f8izTPsKzBP5B3fL5ILnjz2tJoW3WgwPnNCxe+g9gTgqPgLfML9Nu830/K9lu4QOTbSvxufOkFNk94X8B/E1x/APhf1mO/iv+75ej/yqnPCxH/7Blln4+s/yO5n9d24+++uyjL8ZPJ/F7k8lNPJtxbkV/yYN9eLp78HybeX745fX11fQqvrl8djW73eCtHYLSr9BYJUMvHEfwSMY7tk1t+zXo/Bbr/Gj2+Da6vRqfR9fX/9fAnCBSGNk2OAxCQwvzTHayYCO8C0b4hnStFK9r0FbswEm6SnoXJLuvFSDszCi/acpN6g7JE33YPrIPYjtP0bWr4HD/EYdyPEXOffHi/U5hZNtgPzjmgbaiE/tZDcYL3NfBrn4m8puKjcrwsxrpk7VnYru6omtXwbFv1BU5dUXOq8RLfLRtNn3WyWhFDo+xHM53KMctUA7SeCTHK1AO8pKiTuTUCpSDvC6SZSuxjfs6sm1wGKwuXw3QrcA4PRMb8SUS7dcE2eyTLdILcUeA471vA65GuNcAh/HA4NI32iltvwW+TCfgK3IKtO9pm/RCYNtr9m2SXohD27N90fZsX7S9FgcCmn3FTrvat6PIqZF84VmlcYGLZNl6RP+JbUuOkeAN4GtIlq+sr0DZQz4XEdrKutl/fNILcehb7D/oW7hfDJqPCF2q1y/Al+kENB9xiZ9WryIPuQh3lPnVDP08hZbPb/ne1TeF/nPbpjb40/bTmHzT9lcXvce3T2+iT+OP42jiZOjJdme6rMuxa3RbSt8DGu3ehjxwXoV4pL4iflZN1vmM7HhwAAxP7158XcvfM5u+h/I9on9mv9Hnpa0eoOd0GIXTXjSNBtFk0h9HnCsM2KtVgvwncRj3ptNpL47605Ppvcsfx5PTyfF4PDgbRr0wiLfJx0clidUa6SL9rLNBq8H4bPjOti/ybNDW5+asz1XWd56xvp9sm9J+v4O8Ds3HmO4oNqoQTqtRhIf4lLfjGoT+B9umcv+yfTknJG5R5zJzzBz6qR5/gx6o60L/ZH3dLcC5Cj2fJUcKvXbOdole8izy0t5C0OYPSVexYU2hR37sZz/advEDiLOuH/p8k3THtTcIp90JtXupDzr/bPslv6PsXW85hMM44beNXWv5vF9ltXpLbLFvvcV1OOK0Nw0tT1RJHsat8H8RcYv3WY5bjFFXoZfY6ZrNfWN/xRjwCYcxUCecmyMP919sjTHA56j2nnKZ3M37FfjhvmC+xrmcr4X+d9DlN9vvmM38xP6i5RnWxRg9j+W96aJ/lZgT+lpOcEh2SfXFzu+6Ir9pNuO3jHfdBunDPsTv7X5Je5MX09o76+tm+b7Ee4b6CS+t5tT8nXNnXv2l5U4tl3Ce2SWXaDWElktaZr/aVMsTnEeQ/g/bpvjntH6Ux/WR5lNaLhB6X6FH+3okG2PCJ5x2puf5ViNHr7y6UNMLfQ/nsuxta+CYz5LxEpzZA+3MxrXzmZ1XO6fAe9BW6LV6ukv0aHMtLrmWRbktwmE8ccxm1bnPaR3bfj+T2kH7nbYGfKUGKPr+HxxPxifx8fyJZngSHp9N7v39YXDyZNwfREEcLrTZJr8jNknu8Oj/KdTtt9zJmV74eUT/j9DO//61ffErT5GX0h052XRORrvgoYxVk/UxP9mkd5NNepHdTDZ1FFwLcBibKRzZb7QX8hI9PKL3LQPZkwbMkfldRX6D5K/prYzx/8u0FPqWQp/uT8VOWr1xgOyi66qFTOKPY6yb+E4ZcTUPqeE4GobhWT+M++FgW1z9B15ygdpeLAAA","debug_symbols":"tZjRTiM5EEX/pZ95sF0ul82vjEYoQBhFigLKwEorxL9vFV23O0GytdNoXrgnhJxx2WW7J+/T4/7+7dfd4fT0/Hu6/fE+3Z8Px+Ph193x+WH3eng+6W/fp2A/kv7MN1OK061opOk2Bk3SjJrZkzXtz4oma4pn9WxzktpS0oyeyZM8syd7Fk/xrJ5tzuy+7L5sPtIkz+zJnsVTPKtnm5ODZ/R0H7uP3cfuY/Np/Sye1bPNWYJn9Eye5Jk92dN9xX3FfDqvpc0pwTN6Jk/yzJ7sWTzF033ivuq+6r7qvuq+6r7qvuq+6r7qvmq+cjM182mftOiZPMnTfFWTPYuneFbPNmcMARABCUAAkzYDBqiWkoEAKqA5RDWTGKiZ7FMxAcjB2jcHA/1U1vWI1sAzREACEEDHk+2fsK7NZFABzcEad4YISAACmCcbMKAABFABzcFaeAYzs0ECECADGFAAAqgO1sO5GERAAhAgAxhQAAKogOYgMAvM1s/ZFsUaeoYMYEABCADTK5jeiumtmF7r2GzdYi2abXGtR2dIAAJkX3fr0xkKQADoDetVg2S9OkMEJAABMoABBSCACoDZWtQGn6xF+fM3DCjzmFMUQAU0BzvD2U5pO8VnSAAdGCeDDGAAzAnmBHOCmQIgAhKAABnAAJg/90X7+LiZcPHcvZ73e7t3Lm4ivZ9eduf96XW6Pb0djzfTP7vj2+cf/X7ZnT7zdXfWd3U+9qdHTRU+HY57o4+b9dOh/9FIXLJ/PFJpbVHo0XEliQNJsDtodoScLhR8pUh9Ra5NXJFbKItC4pWB+oaaCfNQc+4ahmW0hjJibN0y+NtllL9bBtdlNWp/NepAwcJQFIq9QbS+oXHAIBpz/GYZMfXLGDV3qrTUkSpLv7kHrSlEWFMhpm4pg95sekJjNvRw7Cn+oJT+Ph1IUilwpNLWReHr4yKW0XmxHhc55nUU8mVCZdRdBaO4mAvKX+Zz0J+iewtL0i6WhAJdOwYdSowzK8d1m+l9cH1kjaZTr1IUondW3zHock5oDKawzbCcOCXytjpSxSD0YkvbHBKXRZVRJfx3Hfr8FZaTS3tyk0OE4JCWtjlaWO6SlvqO4V7Ly7rok2vp7jUarEuRgP0quv1XR/xysQ46TAraXC5mVJ8st5w7Eqh37tDgBI0xL8efPj93R0F5UEeN2PJSqXuQEw+nYpmLwqGrKONK1seM3Lq3wbiUsJaSa1cxuuPL+tBWaD29qPz/h8fL577SP3xGirg87uhk1G2Ksowi1m2joOUQVdw2Ck5h3ayyTVHW/V7btkLWY4fStkIor/8h4E2FSF6aM5ctgrZs9sabimhBluetbSNYeqoJf7OEr4Kf+nL3cDhffev4YarzYXd/3PvLp7fTw8W7r/++4B18a/lyfn7YP76d92Zav7rUHz+SfkGQSv1p3/zoy6hfQsYU7GW0d7XR9Lb9+WGD+Q8=","names":["public_balance_of"],"brillig_names":["public_balance_of"]},{"name":"public_dispatch","hash":"6083162152262479578","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"selector","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"939615093317106671":{"error_kind":"string","string":"Invalid response from registry"},"2186653215069968126":{"error_kind":"string","string":"Function _finalize_mint_to_private_unsafe can only be called internally"},"2233873454491509486":{"error_kind":"string","string":"Initializer address is not the contract deployer"},"2550444873539515884":{"error_kind":"string","string":"Trying to read from uninitialized PublicImmutable"},"2830029349304997821":{"error_kind":"fmtstring","length":27,"item_types":[{"kind":"field"}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4368111498112096070":{"error_kind":"string","string":"invalid authwit nonce"},"4856349594034274052":{"error_kind":"string","string":"Function _reduce_total_supply can only be called internally"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"6783944322265357017":{"error_kind":"string","string":"Invalid partial note or completer"},"10253686202003112746":{"error_kind":"string","string":"Cannot complete a PartialUintNote with a value of 0"},"10435099482093008907":{"error_kind":"string","string":"Function public_total_supply can only be called statically"},"10502589790419500451":{"error_kind":"string","string":"Function _increase_public_balance can only be called internally"},"11795427120478775878":{"error_kind":"string","string":"Function public_get_decimals can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14904894741898998030":{"error_kind":"string","string":"Function public_balance_of can only be called statically"},"15009911310769716579":{"error_kind":"string","string":"Function public_get_symbol can only be called statically"},"17028138060491915576":{"error_kind":"string","string":"Function _finalize_transfer_to_private_unsafe can only be called internally"},"17618083556256589634":{"error_kind":"string","string":"Initialization hash does not match"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18105278452957613314":{"error_kind":"string","string":"Function public_get_name can only be called statically"}}},"bytecode":"","debug_symbols":"","names":["public_dispatch"],"brillig_names":["public_dispatch"]},{"name":"public_get_decimals","hash":"738750642147884504","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"error_types":{"2550444873539515884":{"error_kind":"string","string":"Trying to read from uninitialized PublicImmutable"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"11795427120478775878":{"error_kind":"string","string":"Function public_get_decimals can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1azW7rRBQex3EbJw0JF5DY8A5289tdUFsubEDi7pHcxEGVChe1BV0kJLxhwY49G94CJCReggVvcSUkJBYIiUw7p/3y+dhNW7sXxD1SNGPPmXO+OX8z49Yz1+S5tmnWyTMbkFfyru86oXtuwLi/+s3cc3Q/ikPSW6X8aTTcC5X1VYh/EDqZXj3yI5Ffk/2jbSfn3exaPq5F9LZWvx3oP3L9bsn8OrGvfDsNQWbV8lcUv1aAX9ZmaT+rRfdA5B+AfGOqjStLh/Xgv5L/Tj34r+rG43rwxx1zGednTp6N/b7rJ1988sFn86eL9O3F4jQ9O8M6yvlTRreR2biFzDdZ5vufn5wcL4/T08Nnx2fnOdm+Ilv6DaOvjXEhH1JAOgSbte2XgPkNxvze2ZPz5Px4vp+cnNzVwFyALM1cG92PYkMLC0xx8WQjvAVG+IqwetVjjbqKHbhI11REh5qvOOBQf9vUuuHFHukTPGwf6YvtmgrWvjLmUb+p6Gkqeh5KFvvb0sy10e1ol190FUysN4D3Ffp1tGmcif620f06qwbPVZwFhKfIZ2K7LQVrXxnj2NhS9Gwpev5LssR/XaNvPlprjL6hsR6tTpfVybvqwTrWJD1+hXpQlhzqyvLxrnpQ1kF22XJuW5q5NrofjUU2x0VF8idio22TJxlrgW6PxvACy3HUJsw41oExjosdGMN6yeTTM9rJYv4a5DKfUI2+m7703XWfqQrf9Uzevrzni22aih5LB9llGxD/R64VH6Idq7woPgK5hnT9n+LnLjHyE8hlPqGeKd7vPJPfO3zitySX7J4yX+bWdUGu8zJbdLnd9DL7qWutL34HzK8z5ifnT0+Tj9MP02SxqS2Yr6iW+Ca/bo/6fL+5yedajNiYlXhvZutyZu59dA+aTKNI9PtOfmDyOYD6A+J/5p4x96Rt3gPncpLEy0GyTEbJYjGcJ1yzDNirU4P+ozROB8vlcpAmw+V4+eD6k8FRPB9Ppsnu7micDMc36ccPZ3XuUd+49kXuUdr6/JL1aXeg/YL1/eBay/vtBvp6NB9zuqfYqEFjuJ+xjySmgg3XIPzfudbq/cP1Zb+SvEXMddaYFQ0tjj8BB2K9wJ+tr7sDY77Cz3VyR+HH/V5s1id+rvH4jLLQ5o8Jq9hwS+FHeRxn37vW2qbrrePDmG8Tdlx7i8Z8Ra/2XSoEzD+6/stz3zqhLW577tO+zWh1gmtBS8Gq5a3IfxF5i3/c5bzFHPUVfsmdvsn7jeMVcyCkMcyBbRrzS/Sh/8XWmAO8j3ZNviYcZtfzfgZ56Bes1ziX67Xw/wpYfnH9nsnXJ44Xrc4wFmM2+waI8zG+aqwJQ60meKS7pvPFxt+uRX/b5PO3jm/XLcLDMdQg+4Q1+aYsp7cVPK+ufq+YvM8Qn8jSzpxavHPtLDt/abVTqyVcZzapJdoZQqslHXO7s6lWJ7iOIP9vrrXjz2n9qI/PR1pMabVA+EOFH+0bkG7MiZDGtD29LLZaJbjKzoUaLow9nMu6b1oD53yRjn/Bnj3S9mxcO+/ZZWdnS+yDrsKvnaf7xI821/KSz7Kot0NjmE+cs0Xn3Oe0Dm1/xDorZwc+A+BcPANUff/fHYxHq21hb7o73VuO0vlDf3+Yj8ZH8+EoidL4As5N+ntik+x6HOPf0rZ7ljs58+P/biD/X8K7+v3t+hJXgaLP8u14xXxeQXshQ3nXzNbfhVme38/y/KK7neUxylgHxjA3Le24Z7QXyhIcAfGHToD4pAVzZH5f0d8i/Wu4lXf8D1Idhb+j8Fv/NNykq28coLvqc9WFTpKP7xibxE4debVKqck8mcTx3jBOh/Hoprz6B6PDnVN6LAAA","debug_symbols":"tZjdTiNJDEbfJddcdPmn7OJVRiMUIIwiRQFlYKUV4t3Xpu1OsqsqzTYzN3wnhBzK3W5Xp983j7v7tx93++PT88/N7bf3zf1pfzjsf9wdnh+2r/vno/32fTP5j9I2t3SzAXshFmVzWyZLsCyWGEmW/mdsyZY1UiI10mxgf4dTZImESIykSI6skRKpkeGj8JH77P8QRGIkRXJkjZRIjWxz8hQZPg4fh4/Dx+5DyxopkRrZ5qxTZImESIykyPDV8FX3VUuNbHPKFFkiIRIjKZIja2T4JHwSPg2fhk/Dp+HT8Gn4NHwaPg2fuk9vNs19zbJEQiRGmg+tjxpH1kiJ1Mg2Z5mmhJIACZjg0uLACa4lB/eKg4vVoQUUMxM6mJnYARIwwNuXqoNfDe7xBp6hJEACJth6yP+Fdy01B01oAd64M5QESMAE87AX6N07Q02QBE1oAd7CM5iZ/Wh4E8+ACZTACTVBEjTAe5jBoSRAAiZQAifUBEnQhBYgaZY0ez+znxRv6BkogRNqgiTk4ZU8vJqHV/Pweseyt4S3KPvJ9R6dARIwgeK8e5/OUBMkIXvDe9UBvFdnKAmQgAmUwAk1QRI0Ic3eor548Bblz99wQp3XDEUSNKEF+BBnn+I+xmeABC9ZHSiBE9IMaYY0Q5pxSigJkIAJlMAJacZP4cfHzSY3oLvX027n+8/FjmT71Mv2tDu+bm6Pb4fDzeav7eHt849+vmyPn/m6Pdm71vW746OlCZ/2h53Tx83501P/owW5Uny8YG1tUdjouJKUgWQCSMdEcKHgKwX0FaRNQkFtqotCypUB+wYlzOOgRF3DsIzWsoxSWrcM/nIZ9c+W4W0cZ0P7Z0MHChZORcXSW0TrGxpPuYjGXL5YRoF+GaPmBsWlDlCWfnMPWlMQ85wKMnZLGfRmswmdR8OGY0/xP0rpX6cDCRDWcABdHA2+Hhdl0J4oDUOBWi7OitZrhwwuEix5ZgltDHYdgw6FCiVLEWp9x6BHtSxdrnBRC054PbYGh1TsKs/maBfN8R/HoNORc3pSOV/wtjNdGwYtalvecjRs9+w7Bj3KkC3KOK0zLLOvFl5XB2guwrZYWOeQsjS5jCqRP+uwO8FpmaGi6xwiebXZBIF1jjYtu1qDvmN4xdIyzYkQu1cb/oYd/jds8cPZU5dVYKv9SvjLuyPWr2+PvzyJqT8BRw6VXAY2Kv2j0UY707K32dfFi9lT5MpBoymqJUegKHa3WBoMUaklR6BUnrqKQYcW+8J5vgGk1t2nx6VM51JIuwoaKXDZUs4CrL9+U395P177o3ikKMulZodC1ynqsoqi61aBy8wwXLcKhqUQJlmnqEtbsLZ1hZyHMMK6QpDOX9R4VSFCS2tSXSNoxMvUWlVEm2S5D163gqWnmvAXS/i34Lu93D7sT1dPhT9cddpv7w+7ePn0dny4ePf175d8J58qv5yeH3aPb6edm86Plu3HN7AnZVD1uz+Rs5fFHhIXmPxl8Xet0eze4/uHL+Yf","names":["public_get_decimals"],"brillig_names":["public_get_decimals"]},{"name":"public_get_name","hash":"15198369030525507268","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"2550444873539515884":{"error_kind":"string","string":"Trying to read from uninitialized PublicImmutable"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18105278452957613314":{"error_kind":"string","string":"Function public_get_name can only be called statically"}}},"bytecode":"H4sIAAAAAAAA/+1azW7kRBBuj2eS8UyGGRaQuPAO9vwkk1tQEhYuILFnDs6MjSJlFZRk0UpczIEbdy68BUhIvAQH3mIlJCQOiAtiOunKfPO57EwSO8tqt6RRt93l+r6urqpuO/HMUjzXNs2qeGYN8UrubblO4K4bMO4vfnvuOryfRAHhVml/Go53A2V+FfIfBc6mV4/9UOzX5P9w09n5OFvax7kIbtvGBPQfuX6v5Pk6uS/WdhqAzartLyR6p4C/zM3KflYL9kjsH4B9Y6qNKyuH9fC/tv9RPfyv68bjevhHXXMV56fOno39gevHXz/97KvZ6Tz5cD4/S87PsY5y/pTJbWw2bmHzfbb56bOTk+P0ODk7fH58fpGz7Su2pd8w+tyYF+qhtAhDuFnfPgPO7zHnT86fXMQXx7P9+OTkrg7mAmRlz7Xh/SQyNLGWKS6e7IQPwAnPiatXPdewp/iBi3RNRXSsrRUHHOJ3TK0bXuQRnvBh/0hffNdUuA6UMY/6TQWnqeA8lC1ebyt7rg1vJ0O+0VM4MW4L7le4rpN140zwO0Zf171q+FzHWYv4FK2Z+G5D4TpQxjg2NhScDQXnVbIl69cz+uajtcboGxrjaHW6rE7eFQfrWJNw/Apx0JYc6sry8a44aOsgu2o5t63suTa8n2yLbY6LiuzviI82TV5krA3YHo3hCyzHUYc441gXxjgutmAM6yWLT9foJ8v5G7DLeiJv/Lvss1Th377J+5f3ZfFNU8GxcpBdtS3S/8K1soboxypf5h6BXUNYr1P83CVGfga7rCfSN8V7kmfy9d0nfSvyItxXnpdn63qJrfOFs+gFdN0XzqeutWvxB3B+lzk/uTg9i79MPk/i+bq+YL2iWmJjSeKwmS11qsqTnWkYCqafLf3AsYn4LdK/cNeYE9I278Ez3YmjdBSn8SSez8ezmGuJlQb4qWr8oyRKRmmajpJ4nG6nD46fHo2H82Q+OppFw+k8HN6Ejx+d6tw7vnXty9w7tPn5JfPT3h/2C+b3o2ut7ndr4PXpecz7vuKjBo3hPsNrJDHVWnMOov+9ay3un64v+4jkLXKus8YsZGx5/AU8kOsl/2x13l0Y8xV93uO2FH3ch8VnA9Ln2ovXaAt9/pi4ig83FH20x3H2g2utbwJvlR/GfIe449zbNOYruNo3nQA4/+T6b85jq3Kf85j2XUOrE1wL2gpXLW/F/svIW/zDKOct5qiv6EvuDEx+3TheMQcCGsMc2KQxvwQP1198jTnA+2jP5GvCYbZ87hewh+uC9Rqf5Xot+r8Bl19dv2/y9YnjRaszzMWY9b6f4fMYXzXWhLFWEzzCrul8sfZ3X8HvmHz+1vHdt018OIYa5J+gprUpy+lNhc/bi99bJr9myE9saWdOLd65dpadv7TaqdUSrjPr1BLtDKHVkq653dlUqxNcR1D/d9fa8Rc0f8Tj85EWU1otEP1A0Uf/tggbcyKgMW1PL4utdgmvsnOhxgtjD59l7JvmwDlfhPE/2LMn2p6Nc+c9u+zsbIXXoKfoa+fpAemjz7W85LMs4nZpDPOJc7bonPuC5qHtj1hn5ezAZwB8Fs8AVb//D0fbk8W2sDsdTnfTSTJ76O8Ps8n20Ww8icMkuqRzE35ffJItxzH+rWy6a3knZ338vwfU/1t0F79/XF/iqqXgWb22V6znFbSXNpR7zWz1XpDl9f0sry/YnSzPUca6MIa5aWXLXaO/0JbwaJF+yxmQNWnDM/L8QMFvE/4Kb+Ue/3NRV9HvKvp2ff4Ve67FuVd9rrrEJPt4j7lJ7NSRV4uU2pnFO1G0O46ScTS5Ka/+AzhRH9+2KwAA","debug_symbols":"tZjRTiM7DIbfZa57ESd27PAqK4QKlFWlqqAuHOkI8e7HZuxpe1aJdofdG/5/mPZrnPxx2nmfHnf3b9/v9sen5x/Tzbf36f60Pxz23+8Ozw/b1/3zUf/7PiX7A226wc2U9YJVYLqBpJpVQbW4oqq9jFRJtbqyq7gqLevrSnIF1+xaXNGVXKsru4qr89B5aDz9HMyuxRVdybW6squ4tlkpuTqPnEfOI+eR8YpqdWVXcW2z1uQKrtm1uKKr86rzqvGqqri2WTm5gmt2La7oSq7V1XnsPHaeOE+cJ84T54nzxHniPHGeGE9Ujdc2U0uu4JpdlVc0Pw1dybW6squ4tlkhpTAQJocxJpjBMEZFM4ZlM8YVMxLGcq0zDBZdtBdbdpHM1DAcRsI0NxZgrGb009E+wiI7GwpTw3AYCdPcWHDRxmPJnU0OU8JgGApTwxi5mZEwzY1FeDYQJocpYTCMAskm0wI8GwnT3FiGZwNhcpgSBsNQmCDXIFuWyZbJwvxpLM2zgTA5TAkT08sxvRzTyzG9llbKZuxDbXEtn7ORMM2NRfRz3S2js8lhSpjIhuV0NjUMh5EwbTY5pTAQJocpYTAMheF58NkiSvYfgDB5HnOGEgbDUBgr2ToscBgJYyVXa9opDIQJcg5yDnIOcq5hOIyE8cnMth1mA2GCXD6BHx+bKQ6Xu9fTbmdny8Vpo2fQy/a0O75ON8e3w2Ez/bM9vH2+6MfL9vipr9uT3tUE7Y6Pqgp82h925j4253en/lt1Z1b0t+vmbG1BaFu4gsAAknIORsJ8gaArRO4jUBo7AluqC4LhilD6BMES8yCIXcKwjNaiDIDWLYO+XEb9u2WQLKsh/dWQAYKYAlEL9AbR+oRGKQbRiOCLZUDulzEKd5ay1JGFuB/uQTS5lFhTLrpre6UMstmAI1lNG18P8Rul9PfpAKI9rjhDm9u5W9B1u4BBPAu3QBSBi1WRes3gwSYpECuLhajPGCQ01wxRCmPrMwYZFVhSLvmilpLKddsaTCnrLo9wtItw/MQYJL1QdE+E84bXU+eaMIioHmfLbOTU+oxBRilHROkiGr9FWHpfBVpXR5YYhOYzr2Mw1CUZo0r47zL0W15aeijLOgZz7DbtIHkdo6XlVGu5zxjuWFy6OWIp3d1W/sAJ/weO+GHvqcsoSqv9SujLp2OpXz8ef7kTY78DjhjCMYzSEPqz0UYn03K26U/Bi94DfMXAURcViBbIUrpHLA6aKFeIFsiVUhcxSCjoj8nzF0Bsq87py6/Ctd8FRwhYUq6jkHWIuowCZN0oyrJd1a4bBeWlEEJeh6jLipC0dYWc+1/J6wopeP6NRKsKYVwCjnUNoCEtDWNVES3x8hV03QiWTDWmL5bwf8CtXm4f9qerh60fhjrtt/eHnV8+vR0fLu6+/vsSd+Jh7cvp+WH3+HbaGen8xFb/fMv6aCtXvLUHXXqpP/E2uk/sEuxuJb3Ltx82mP8A","names":["public_get_name"],"brillig_names":["public_get_name"]},{"name":"public_get_symbol","hash":"14686995264620044572","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]},"visibility":"public"},"error_types":{"2550444873539515884":{"error_kind":"string","string":"Trying to read from uninitialized PublicImmutable"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15009911310769716579":{"error_kind":"string","string":"Function public_get_symbol can only be called statically"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/+1aT2/jRBQfx0kbJw0JC0hc+A72xmnTW1FbFi4gsXckN7FRpcKu2u4KJA4WB27cufAtQELiS3DgW6yEhMQBcYFMO6/55ednN23tLoh9UjRjz5v3fvP+zYxbzyzJc23brJJn1iCv4t3AdQL33IJxf/Hbc8/h3SgKSG+d8qdhvBso66sR/zhwMr1m5IcivyH7h5tOzvv5Uj6uRfR2F78t6D9w/UHF/CaxL3w7DUBm3fIXFL1Rgl/WZmk/b0T3WOQfgHxj6o0rS4fN4L+S/14z+K/qxqNm8Ed9cxnnT508G/sj10+ef/bR09mTefrufH6anp1hHeX8qaKbyGzdQObbLPPDZycnx9lxenr4xfHZeUG2r8iWfsvoa2NcyIfUIR2Czdr2OWB+izF/cPb4PDk/nu0nJye3NTAXIEt7rg3vRpGhhXVMefFkI7wDRviSsHr1Yw0Hih24SDdURGPNVxxwqL9nGt3wIo/0CR62j/TFdm0F60gZ86jfVvS0FT33JYv9bWnPteHN6CG/GCiYWG8H3tfo18m6cSb6e0b36149eK7irEN4ynwmtttQsI6UMY6NDUXPhqLnvyRL/Dcw+uajtcboGxrr0ep0VZ28rR6sY23S49eoB2XJoa4qH2+rB2Ud5Jct57alPdeGd6Ntkc1xUZP8HbHRpimSjHVBt0djeIHlOOoRZhzrwxjHxRaMYb1k8ukZ7WQxfwVymU+oQd/Fr3y37DPV4buhKdqX93yxTVvRY+kgv2w7xP+Ja8WHaMc6L4oPQK4hXf+n+LlNjPwIcplPaGjK9zvPFPcOn/gtySV7qMyXuU1dkJu8zJZdbte9zH7uWuuL3wDzm4z58fmT0+TT9OM0ma9rC+YrqyU2liQO2/mSp6482ZmGoej086UdODZRf4f4n7lnzAlp23fAme0kUTZOsmSSzOfxLOFaYqkFdqpb/1EapeMsy8ZpEmfb2b3rn4fxPE1mWTKbHmXz7fF1+vGDVpN7x9eufZl7h7Y+v2J92t1kv2R937vW8n6zhr4hzce8Hyo2atEY7jPsI4mpzpprEP5vXWv1/u76so9I3iLmJmvMgmKL4w/AgVgv8Oer6+7DmK/w8x63pfDjPiw2GxE/1158Rllo80eEVWy4ofCjPI6z71xrbdPzVvFhzPcIO669S2O+olf7XhQA5h9c/9V5bJXuch7TvplodYJrQVfBquWtyH8ZeYt/dOW8xRz1FX7JnZEp+o3jFXMgoDHMgU0a8yv0of/F1pgDvI8OTLEmHObLeT+BPPQL1mucy/Va+H8BLD+7/tAU6xPHi1ZnGIsx632bw/kYXw3WhFirCR7pbuh8sfY3ZdHfM8X8beKbcpfwcAy1yD5BQ76pyulNBc/ri99rpugzxCeytDOnFu9cO6vOX1rt1GoJ15l1aol2htBqSd/c7Gyq1QmuI8j/q2vt+AtaP+rj85EWU1otEP5A4Uf7dkg35kRAY9qeXhVb3QpcVedCDRfGHs5l3detgXO+TMe/YM+eaHs2rp337KqzsyX2wUDh187TI+JHm2t5yWdZ1NunMcwnztmyc+4LWoe2P2KdlbMDnwFwLp4B6r7/PxxvTxbbwu704XQ3m6Sz+/7+MJtsH83iSRKm0QWc6/QPxSb5chzj39Kme5Y7OfPj/1Qg/5/Cu/j95foSVx1Fn+ULvHI+r6S9kKG8a+er74K8yO/nRX7R3cuLGGWsD2OYm5a23DPaC2UJjg7xbzgB4pMuzJH5I0V/l/Sv4Fbe8T8u9RX+vsJv/fO3yHMtrr3uc9WFTpKP7xibxE4TebVIqZ1ZshNFu3GUxtHkurz6Bxaqzi0SLAAA","debug_symbols":"tZjRbiI7DIbfZa65GMd24vRVVlVFW7pCQrRi2yMdVX33Y3fsAGeVaHe6e8P/DwMfcfLHAd6nx9392/e7/fHp+cd08+19uj/tD4f997vD88P2df981Gffp9keoE43tJmSXhQVmG5gVk2qoIqupGovY1VWza7FVVyVlvR1OLuCa3JFV3Jl1+xaXMXVeeQ8Mp5+DiVXdCVXds2uxVVc66I8uzqPncfOY+ex8VA1uxZXca2L5tkVXJMrupKr87LzsvGyqrjWRcvsCq7JFV3JlV2zq/OK84rzxHniPHGeOE+cJ84T54nzxHliPNlM1XhVFVyTK7oqDzVHlV2za3EV17oozHMYCJPCYBiDghkOY1gyY9xixsBiproBJZNONVh2yV5s4SU2U8JImOrGArwYHQ9lM/rpZB9hmV1MDlPCSJjqxoK7GOPYeCy6i8EwFIbD5DAljJGrmerGIrwYCJPCYBgKw2EUyDaZluDFVDeW4cVAmBQGw1AYDpPDBDkH2cLMtkyW5sVAmBQGw1CYmN4S01tiektMr8WVkxn7UFtcC+hiqhuL6GLA191CuhgMQ2EiGxbUxZQwEqYuJllWFwNhUhgMQ2E4TA4jy+CTRZTtGUhhcBlzAgrDYXIYK9laLUiY6saaOGczECaFCXIKcgpyCnIqYSSMT2bCOQyESWGCjJ/Aj4/NFKfM3etpt7ND5uLY0cPoZXvaHV+nm+Pb4bCZ/tke3j5f9ONle/zU1+1J72qCdsdHVQU+7Q87cx+b87vn/lt1i2byt+surbUhtD9cQWAAmVMKxkzpAsFXiNRHkNTiCKpzbogCVwTsE4Qw5kGIuoRhGbVGGQC1WwZ/uYz8d8tgaash/dWQAYILByIj9AZR+4TKcwyiMsMXy4DUL2MU7iTY6kjCpR/uQTQLYqxpQd21vVIG2axQIllVO2AP8Rul9PfpAKINKPaptqDzovB1u4BBPLFUdAQKXKyK5GtGGWwShFhZQuY+Y5DQlBNEKYVqnzHIqEBLuaSLWnDG67Y1mNKiuzzCUS/C8RNjkHTkWBWC84bX4+eaMIionmttNvSs7DMGGeUUEWWc1xFa78vA6+pIUltAL/bJbzEK5JaMUSXl7zL0697cemiRdYxSYrdpB0nrGHVup1pNfcZwx1Lr5kSI3d2Gf+CE/wNH/LD35DYKrLlfCX/5dMT89ePxlzsx9TvgiCElhoGVoD8bdXQytbNNfxNe9B4oVwwadVGBaIFFsHvE0qCJlgzRAkvmuYsYJBT0V+X5CyDVVef05Vfh3O+CIwS0lOsoZB0it1GArBsFtu2qdt0oOLVCmMo6RG4rwlLXFXLuf5jWFYJ0/o3Eqwop1AJOeQ2gEreGsaqIOpf2FXTdCFqmauEvlvB/wK1ebh/2p6t/XT8Mddpv7w87v3x6Oz5c3H399yXuxL+2L6fnh93j22lnpPNft/rwLekipsy39o+XXuqPig1AsUuwuznrXbn9sMH8Bw==","names":["public_get_symbol"],"brillig_names":["public_get_symbol"]},{"name":"public_total_supply","hash":"2830141988061113965","is_unconstrained":true,"custom_attributes":["public","view"],"abi":{"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"public"},"error_types":{"10435099482093008907":{"error_kind":"string","string":"Function public_total_supply can only be called statically"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"H4sIAAAAAAAA/72VwUrDQBCGN0mDRi2IVtCbFwXBw6RJbb1V1IMXBfsEm+6uBCKVJorHPrpZmNDtNKmtSf0hzG66/Wbm32xisbksjC22KIutIWvFvWuMHkbb+N3JryHOoZ58j+Rtkj+AsOeV9Ndg/YGHTGs7fCj4W/IfdpDzMJvzzV6KvLv5dWCM2zhur/j/NmvP9zb0DGbT/Fz+cUX9WvvowznOtTeHOOZf7y8f44mQd0JMZZqa54z6u0qbMO0NmKeU+fyZJLGK5fTxO06zJbZTwi7GNivvjdZlrjNVdn60hhihnnyX9NDBqPfu0vDkhHrylI4ynsXje54kf91AegCabIyRxlxWfXipCWeGCVekVqv5Wrva4A41eJRNpvxNvkou1n2Y190Hhy0/uCbTNdbQFzdl2BX5NKPNqj3XL4ji49OaLeYY4n2oof4AoMjrIN8lPTCS3yXrL3C+Z9RfxFaNOlWf+yrgive4EOGYHxE+Iz41nT+SvgyUUoHkobpR/57/FgTIKPKhC2EwgOi3/D+qFBY60gkAAA==","debug_symbols":"tZXdboMwDIXfJddcxE6cH15lqira0gkJ0YrBpKni3eesCZSLRJqm3XAIIR8+sXEe4tKe5vdjN1xvH6J+e4jT2PV9937sb+dm6m4DP30IGS6gRa0rASRqy2JEDZLVsgKri+qfirwG+HUEVmLFqCqqjso4ZA6aqMxDZHVRfdBlqUSK6DiNbRsCegmRA783YztMoh7mvq/EZ9PPPy993JvhR6dm5Fn+QjtcWBl47fo23C3Vtlrml4Iio+NyUMb7FQHS7SBQgMhg6smQGl8QtENgHqGdtxGhvTQrwsKOoPIEp1XaB6d1llC04X2yAeCzNujPNsz/2iC3ZsPls+EKCLKUEEZBLgifJ3iSKQhPBH+0AZi3USpudGr1gY5svrgLpWmVSjm1ilTWSqE2PdhUWR4l5hC/sJL/TwsQJJ1qC8nQiqB9u4BCeQLoNQywW8MBZ/cMW9hQB6ldWKfyG1ooUGtCO34iDMkswpedbL+79tmslK3IzYp2OQSW6txszdOoLa/KcFYOPGzO3bg7uZYAG7vm1LdxeJ2H88vs9HVPM+nku4+3c3uZxzaQXo4/vr4prJQ98CkHYeAqLQ9L+PQ3","names":["public_total_supply"],"brillig_names":["public_total_supply"]},{"name":"public_transfer","hash":"6639444253202553032","is_unconstrained":true,"custom_attributes":["public"],"abi":{"parameters":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"authwit_nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null,"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"939615093317106671":{"error_kind":"string","string":"Invalid response from registry"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"4368111498112096070":{"error_kind":"string","string":"invalid authwit nonce"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"13699457482007836410":{"error_kind":"string","string":"Not initialized"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"}}},"bytecode":"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","debug_symbols":"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","names":["public_transfer"],"brillig_names":["public_transfer"]},{"name":"sync_private_state","hash":"17772892226675208741","is_unconstrained":true,"custom_attributes":["utility"],"abi":{"parameters":[],"return_type":null,"error_types":{"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["sync_private_state"],"brillig_names":["sync_private_state"]},{"name":"transfer_from_private_to_public","hash":"9738225332515164314","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"},{"name":"authwit_nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"855401245733623969":{"error_kind":"string","string":"Obtained invalid key validation request"},"1433889167918961673":{"error_kind":"fmtstring","length":17,"item_types":[]},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"4368111498112096070":{"error_kind":"string","string":"invalid authwit nonce"},"4939791462094160055":{"error_kind":"string","string":"Message not authorized by account"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5641381842727637878":{"error_kind":"string","string":"Got more notes than limit."},"5672954975036048158":{"error_kind":"string","string":"Collapse hint vec length mismatch"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"7506220854563469239":{"error_kind":"string","string":"Dirty collapsed vec storage"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"10583567252049806039":{"error_kind":"string","string":"Wrong collapsed vec order"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"11499495063250795588":{"error_kind":"string","string":"Wrong collapsed vec content"},"11553125913047385813":{"error_kind":"string","string":"Wrong collapsed vec length"},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15238796416211288225":{"error_kind":"string","string":"Balance too low"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"15431201120282223247":{"error_kind":"string","string":"Out of bounds index hint"},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]},"18313900523101689315":{"error_kind":"string","string":"Note contract address mismatch."}}},"bytecode":"","debug_symbols":"","names":["transfer_from_private_to_public"],"brillig_names":["discover_new_messages","emit_offchain_effect_oracle_wrapper","store_in_execution_cache_oracle_wrapper","call_private_function_internal","load","notify_created_nullifier_oracle_wrapper","get_notes_internal","get_collapse_hints","get_public_keys_and_partial_address","decompose_hint","lte_hint","get_key_validation_request","notify_nullified_note_oracle_wrapper","random","notify_created_note_oracle_wrapper","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_integer_quotient","directive_to_radix"]},{"name":"transfer_from_public_to_private","hash":"6833591150971578101","is_unconstrained":false,"custom_attributes":["private"],"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]},"visibility":"private"},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128},"visibility":"private"}],"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"include_by_timestamp","type":{"kind":"struct","path":"aztec::protocol_types::abis::include_by_timestamp::IncludeByTimestamp","fields":[{"name":"_opt","type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":64}}]}}]}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator","fields":[{"name":"request","type":{"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest","fields":[{"name":"pk_m","type":{"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}]}},{"name":"sk_app","type":{"kind":"field"}}]}},{"name":"sk_app_generator","type":{"kind":"field"}}]}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}]}}},{"name":"private_call_requests","type":{"kind":"array","length":5,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_static_call","type":{"kind":"boolean"}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_call_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"public_teardown_call_request","type":{"kind":"struct","path":"aztec::protocol_types::abis::public_call_request::PublicCallRequest","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"calldata_hash","type":{"kind":"field"}}]}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_logs","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::private_log::PrivateLogData","fields":[{"name":"log","type":{"kind":"struct","path":"aztec::protocol_types::abis::log::Log","fields":[{"name":"fields","type":{"kind":"array","length":18,"type":{"kind":"field"}}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"contract_class_logs_hashes","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::counted::Counted","fields":[{"name":"inner","type":{"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"length","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::block_header::BlockHeader","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"blobs_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"slot_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"gas_fees","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}},{"name":"total_fees","type":{"kind":"field"}},{"name":"total_mana_used","type":{"kind":"field"}}]}},{"name":"tx_context","type":{"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings","fields":[{"name":"gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"teardown_gas_limits","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas","fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"max_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"max_priority_fees_per_gas","type":{"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees","fields":[{"name":"fee_per_da_gas","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"fee_per_l2_gas","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}}]}}]},"visibility":"databus"},"error_types":{"206160798890201757":{"error_kind":"string","string":"Storage slot 0 not allowed. Storage slots must start from 1."},"576755928210959028":{"error_kind":"string","string":"0 has a square root; you cannot claim it is not square"},"2709101749560550278":{"error_kind":"string","string":"Cannot serialize point at infinity as bytes."},"2896122431943215824":{"error_kind":"fmtstring","length":144,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3095323350861740601":{"error_kind":"fmtstring","length":132,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"3305101268118424981":{"error_kind":"string","string":"Attempted to delete past the length of a CapsuleArray"},"3367683922240523006":{"error_kind":"fmtstring","length":58,"item_types":[{"kind":"field"}]},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5727012404371710682":{"error_kind":"string","string":"push out of bounds"},"5870202753060865374":{"error_kind":"fmtstring","length":61,"item_types":[{"kind":"field"},{"kind":"field"}]},"6336853191198150230":{"error_kind":"fmtstring","length":77,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8270195893599566439":{"error_kind":"string","string":"Invalid public keys hint for address"},"11418088424205762236":{"error_kind":"fmtstring","length":98,"item_types":[]},"12099279057757775880":{"error_kind":"string","string":"DST_LEN too large for offset"},"12822839658937144934":{"error_kind":"fmtstring","length":75,"item_types":[]},"13649294680379557736":{"error_kind":"string","string":"extend_from_bounded_vec out of bounds"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"14514982005979867414":{"error_kind":"string","string":"attempt to bit-shift with overflow"},"14657895983200220173":{"error_kind":"string","string":"Attempted to read past the length of a CapsuleArray"},"15366650908120444287":{"error_kind":"fmtstring","length":48,"item_types":[{"kind":"field"},{"kind":"field"}]},"16218014537381711836":{"error_kind":"string","string":"Value does not fit in field"},"16446004518090376065":{"error_kind":"string","string":"Input length must be a multiple of 32"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"17879506016437779469":{"error_kind":"fmtstring","length":128,"item_types":[{"kind":"integer","sign":"unsigned","width":32}]},"18194595712952743247":{"error_kind":"fmtstring","length":98,"item_types":[{"kind":"integer","sign":"unsigned","width":32},{"kind":"integer","sign":"unsigned","width":32},{"kind":"field"}]}}},"bytecode":"","debug_symbols":"","names":["transfer_from_public_to_private"],"brillig_names":["discover_new_messages","random","decompose_hint","lte_hint","field_less_than","build_msg_block","attach_len_to_msg_block","get_random_bytes","get_random_bytes","get_app_tag_as_sender","increment_app_tagging_secret_index_as_sender_wrapper","notify_created_nullifier_oracle_wrapper","store_in_execution_cache_oracle_wrapper","notify_enqueued_public_function_call_wrapper","directive_invert","directive_to_radix","directive_integer_quotient"]}],"outputs":{"structs":{"events":[{"kind":"struct","path":"SimpleToken::Transfer","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}],"functions":[{"kind":"struct","path":"SimpleToken::_finalize_mint_to_private_unsafe_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::_finalize_mint_to_private_unsafe_parameters","fields":[{"name":"minter_and_completer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"partial_note","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"SimpleToken::_finalize_transfer_to_private_unsafe_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::_finalize_transfer_to_private_unsafe_parameters","fields":[{"name":"from_and_completer","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"partial_note","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"SimpleToken::_increase_public_balance_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::_increase_public_balance_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"SimpleToken::_recurse_subtract_balance_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::_recurse_subtract_balance_parameters","fields":[{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"SimpleToken::_reduce_total_supply_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::_reduce_total_supply_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"SimpleToken::burn_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::burn_private_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"authwit_nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleToken::burn_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::burn_public_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"authwit_nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleToken::cancel_authwit_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::cancel_authwit_parameters","fields":[{"name":"inner_hash","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleToken::constructor_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::constructor_parameters","fields":[{"name":"name","type":{"kind":"string","length":31}},{"name":"symbol","type":{"kind":"string","length":31}},{"name":"decimals","type":{"kind":"integer","sign":"unsigned","width":8}}]}}]},{"kind":"struct","path":"SimpleToken::finalize_mint_to_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::finalize_mint_to_private_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"partial_note","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"SimpleToken::finalize_transfer_to_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::finalize_transfer_to_private_parameters","fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"partial_note","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]}}]}}]},{"kind":"struct","path":"SimpleToken::mint_privately_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::mint_privately_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"SimpleToken::mint_publicly_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::mint_publicly_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"SimpleToken::prepare_private_balance_increase_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::prepare_private_balance_increase_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"struct","path":"uint_note::uint_note::PartialUintNote","fields":[{"name":"commitment","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleToken::private_balance_of_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::private_balance_of_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"SimpleToken::private_transfer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::private_transfer_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]},{"kind":"struct","path":"SimpleToken::process_message_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::process_message_parameters","fields":[{"name":"message_ciphertext","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":17,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"message_context","type":{"kind":"struct","path":"aztec::messages::processing::message_context::MessageContext","fields":[{"name":"tx_hash","type":{"kind":"field"}},{"name":"unique_note_hashes_in_tx","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":64,"type":{"kind":"field"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"first_nullifier_in_tx","type":{"kind":"field"}},{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}}]},{"kind":"struct","path":"SimpleToken::public_balance_of_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::public_balance_of_parameters","fields":[{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"SimpleToken::public_get_decimals_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::public_get_decimals_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":8}}]},{"kind":"struct","path":"SimpleToken::public_get_name_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::public_get_name_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleToken::public_get_symbol_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::public_get_symbol_parameters","fields":[]}},{"name":"return_type","type":{"kind":"struct","path":"compressed_string::field_compressed_string::FieldCompressedString","fields":[{"name":"value","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleToken::public_total_supply_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::public_total_supply_parameters","fields":[]}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":128}}]},{"kind":"struct","path":"SimpleToken::public_transfer_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::public_transfer_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"authwit_nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleToken::sync_private_state_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::sync_private_state_parameters","fields":[]}}]},{"kind":"struct","path":"SimpleToken::transfer_from_private_to_public_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::transfer_from_private_to_public_parameters","fields":[{"name":"from","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}},{"name":"authwit_nonce","type":{"kind":"field"}}]}}]},{"kind":"struct","path":"SimpleToken::transfer_from_public_to_private_abi","fields":[{"name":"parameters","type":{"kind":"struct","path":"SimpleToken::transfer_from_public_to_private_parameters","fields":[{"name":"to","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":128}}]}}]}]},"globals":{"notes":[{"kind":"tuple","fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"},{"kind":"string","value":"UintNote"},{"kind":"struct","fields":[{"name":"owner","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000000"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"randomness","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}},{"name":"value","value":{"kind":"struct","fields":[{"name":"index","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}},{"name":"nullable","value":{"kind":"boolean","value":false}}]}}]}]}],"storage":[{"kind":"struct","fields":[{"name":"contract_name","value":{"kind":"string","value":"SimpleToken"}},{"name":"fields","value":{"kind":"struct","fields":[{"name":"balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}]}},{"name":"total_supply","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}]}},{"name":"public_balances","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}]}},{"name":"symbol","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}]}},{"name":"name","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}]}},{"name":"decimals","value":{"kind":"struct","fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}]}}]}}]}]}},"file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            let body = if type1 == type2 {\n                quote { self }\n            } else if type1 == quote { bool } {\n                quote { self != 0 }\n            } else {\n                quote { self as $type1 }\n            };\n\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        $body\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"16":{"source":"use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n","path":"std/embedded_curve_ops.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"25":{"source":"//! Contains methods on the built-in `Expr` type for quoted, syntactically valid expressions.\n\nuse crate::meta::op::BinaryOp;\nuse crate::meta::op::UnaryOp;\nuse crate::option::Option;\n\nimpl Expr {\n    /// If this expression is an array literal `[elem1, ..., elemN]`, this returns a slice of each element in the array.\n    #[builtin(expr_as_array)]\n    // docs:start:as_array\n    pub comptime fn as_array(self) -> Option<[Expr]> {}\n    // docs:end:as_array\n\n    /// If this expression is an assert, this returns the assert expression and the optional message.\n    #[builtin(expr_as_assert)]\n    // docs:start:as_assert\n    pub comptime fn as_assert(self) -> Option<(Expr, Option<Expr>)> {}\n    // docs:end:as_assert\n\n    /// If this expression is an assert_eq, this returns the left-hand-side and right-hand-side\n    /// expressions, together with the optional message.\n    #[builtin(expr_as_assert_eq)]\n    // docs:start:as_assert_eq\n    pub comptime fn as_assert_eq(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_assert_eq\n\n    /// If this expression is an assignment, this returns a tuple with the left hand side\n    /// and right hand side in order.\n    #[builtin(expr_as_assign)]\n    // docs:start:as_assign\n    pub comptime fn as_assign(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_assign\n\n    /// If this expression is a binary operator operation `<lhs> <op> <rhs>`,\n    /// return the left-hand side, operator, and the right-hand side of the operation.\n    #[builtin(expr_as_binary_op)]\n    // docs:start:as_binary_op\n    pub comptime fn as_binary_op(self) -> Option<(Expr, BinaryOp, Expr)> {}\n    // docs:end:as_binary_op\n\n    /// If this expression is a block `{ stmt1; stmt2; ...; stmtN }`, return\n    /// a slice containing each statement.\n    #[builtin(expr_as_block)]\n    // docs:start:as_block\n    pub comptime fn as_block(self) -> Option<[Expr]> {}\n    // docs:end:as_block\n\n    /// If this expression is a boolean literal, return that literal.\n    #[builtin(expr_as_bool)]\n    // docs:start:as_bool\n    pub comptime fn as_bool(self) -> Option<bool> {}\n    // docs:end:as_bool\n\n    /// If this expression is a cast expression `expr as type`, returns the casted\n    /// expression and the type to cast to.\n    // docs:start:as_cast\n    #[builtin(expr_as_cast)]\n    pub comptime fn as_cast(self) -> Option<(Expr, UnresolvedType)> {}\n    // docs:end:as_cast\n\n    /// If this expression is a `comptime { stmt1; stmt2; ...; stmtN }` block,\n    /// return each statement in the block.\n    #[builtin(expr_as_comptime)]\n    // docs:start:as_comptime\n    pub comptime fn as_comptime(self) -> Option<[Expr]> {}\n    // docs:end:as_comptime\n\n    /// If this expression is a constructor `Type { field1: expr1, ..., fieldN: exprN }`,\n    /// return the type and the fields.\n    #[builtin(expr_as_constructor)]\n    // docs:start:as_constructor\n    pub comptime fn as_constructor(self) -> Option<(UnresolvedType, [(Quoted, Expr)])> {}\n    // docs:end:as_constructor\n\n    /// If this expression is a for statement over a single expression, return the identifier,\n    /// the expression and the for loop body.\n    #[builtin(expr_as_for)]\n    // docs:start:as_for\n    pub comptime fn as_for(self) -> Option<(Quoted, Expr, Expr)> {}\n    // docs:end:as_for\n\n    /// If this expression is a for statement over a range, return the identifier,\n    /// the range start, the range end and the for loop body.\n    #[builtin(expr_as_for_range)]\n    // docs:start:as_for_range\n    pub comptime fn as_for_range(self) -> Option<(Quoted, Expr, Expr, Expr)> {}\n    // docs:end:as_for_range\n\n    /// If this expression is a function call `foo(arg1, ..., argN)`, return\n    /// the function and a slice of each argument.\n    #[builtin(expr_as_function_call)]\n    // docs:start:as_function_call\n    pub comptime fn as_function_call(self) -> Option<(Expr, [Expr])> {}\n    // docs:end:as_function_call\n\n    /// If this expression is an `if condition { then_branch } else { else_branch }`,\n    /// return the condition, then branch, and else branch. If there is no else branch,\n    /// `None` is returned for that branch instead.\n    #[builtin(expr_as_if)]\n    // docs:start:as_if\n    pub comptime fn as_if(self) -> Option<(Expr, Expr, Option<Expr>)> {}\n    // docs:end:as_if\n\n    /// If this expression is an index into an array `array[index]`, return the\n    /// array and the index.\n    #[builtin(expr_as_index)]\n    // docs:start:as_index\n    pub comptime fn as_index(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_index\n\n    /// If this expression is an integer literal, return the integer as a field\n    /// as well as whether the integer is negative (true) or not (false).\n    #[builtin(expr_as_integer)]\n    // docs:start:as_integer\n    pub comptime fn as_integer(self) -> Option<(Field, bool)> {}\n    // docs:end:as_integer\n\n    /// If this expression is a lambda, returns the parameters, return type and body.\n    #[builtin(expr_as_lambda)]\n    // docs:start:as_lambda\n    pub comptime fn as_lambda(\n        self,\n    ) -> Option<([(Expr, Option<UnresolvedType>)], Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_lambda\n\n    /// If this expression is a let statement, returns the let pattern as an `Expr`,\n    /// the optional type annotation, and the assigned expression.\n    #[builtin(expr_as_let)]\n    // docs:start:as_let\n    pub comptime fn as_let(self) -> Option<(Expr, Option<UnresolvedType>, Expr)> {}\n    // docs:end:as_let\n\n    /// If this expression is a member access `foo.bar`, return the struct/tuple\n    /// expression and the field. The field will be represented as a quoted value.\n    #[builtin(expr_as_member_access)]\n    // docs:start:as_member_access\n    pub comptime fn as_member_access(self) -> Option<(Expr, Quoted)> {}\n    // docs:end:as_member_access\n\n    /// If this expression is a method call `foo.bar::<generic1, ..., genericM>(arg1, ..., argN)`, return\n    /// the receiver, method name, a slice of each generic argument, and a slice of each argument.\n    #[builtin(expr_as_method_call)]\n    // docs:start:as_method_call\n    pub comptime fn as_method_call(self) -> Option<(Expr, Quoted, [UnresolvedType], [Expr])> {}\n    // docs:end:as_method_call\n\n    /// If this expression is a repeated element array `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_array)]\n    // docs:start:as_repeated_element_array\n    pub comptime fn as_repeated_element_array(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_array\n\n    /// If this expression is a repeated element slice `[elem; length]`, return\n    /// the repeated element and the length expressions.\n    #[builtin(expr_as_repeated_element_slice)]\n    // docs:start:as_repeated_element_slice\n    pub comptime fn as_repeated_element_slice(self) -> Option<(Expr, Expr)> {}\n    // docs:end:as_repeated_element_slice\n\n    /// If this expression is a slice literal `&[elem1, ..., elemN]`,\n    /// return each element of the slice.\n    #[builtin(expr_as_slice)]\n    // docs:start:as_slice\n    pub comptime fn as_slice(self) -> Option<[Expr]> {}\n    // docs:end:as_slice\n\n    /// If this expression is a tuple `(field1, ..., fieldN)`,\n    /// return each element of the tuple.\n    #[builtin(expr_as_tuple)]\n    // docs:start:as_tuple\n    pub comptime fn as_tuple(self) -> Option<[Expr]> {}\n    // docs:end:as_tuple\n\n    /// If this expression is a unary operation `<op> <rhs>`,\n    /// return the unary operator as well as the right-hand side expression.\n    #[builtin(expr_as_unary_op)]\n    // docs:start:as_unary_op\n    pub comptime fn as_unary_op(self) -> Option<(UnaryOp, Expr)> {}\n    // docs:end:as_unary_op\n\n    /// If this expression is an `unsafe { stmt1; ...; stmtN }` block,\n    /// return each statement inside in a slice.\n    #[builtin(expr_as_unsafe)]\n    // docs:start:as_unsafe\n    pub comptime fn as_unsafe(self) -> Option<[Expr]> {}\n    // docs:end:as_unsafe\n\n    /// Returns `true` if this expression is trailed by a semicolon.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// comptime {\n    ///     let expr1 = quote { 1 + 2 }.as_expr().unwrap();\n    ///     let expr2 = quote { 1 + 2; }.as_expr().unwrap();\n    ///\n    ///     assert(expr1.as_binary_op().is_some());\n    ///     assert(expr2.as_binary_op().is_some());\n    ///\n    ///     assert(!expr1.has_semicolon());\n    ///     assert(expr2.has_semicolon());\n    /// }\n    /// ```\n    #[builtin(expr_has_semicolon)]\n    // docs:start:has_semicolon\n    pub comptime fn has_semicolon(self) -> bool {}\n    // docs:end:has_semicolon\n\n    /// Returns `true` if this expression is `break`.\n    #[builtin(expr_is_break)]\n    // docs:start:is_break\n    pub comptime fn is_break(self) -> bool {}\n    // docs:end:is_break\n\n    /// Returns `true` if this expression is `continue`.\n    #[builtin(expr_is_continue)]\n    // docs:start:is_continue\n    pub comptime fn is_continue(self) -> bool {}\n    // docs:end:is_continue\n\n    /// Applies a mapping function to this expression and to all of its sub-expressions.\n    /// `f` will be applied to each sub-expression first, then applied to the expression itself.\n    ///\n    /// This happens recursively for every expression within `self`.\n    ///\n    /// For example, calling `modify` on `(&[1], &[2, 3])` with an `f` that returns `Option::some`\n    /// for expressions that are integers, doubling them, would return `(&[2], &[4, 6])`.\n    // docs:start:modify\n    pub comptime fn modify<Env>(self, f: fn[Env](Expr) -> Option<Expr>) -> Expr {\n        // docs:end:modify\n        let result = modify_array(self, f);\n        let result = result.or_else(|| modify_assert(self, f));\n        let result = result.or_else(|| modify_assert_eq(self, f));\n        let result = result.or_else(|| modify_assign(self, f));\n        let result = result.or_else(|| modify_binary_op(self, f));\n        let result = result.or_else(|| modify_block(self, f));\n        let result = result.or_else(|| modify_cast(self, f));\n        let result = result.or_else(|| modify_comptime(self, f));\n        let result = result.or_else(|| modify_constructor(self, f));\n        let result = result.or_else(|| modify_if(self, f));\n        let result = result.or_else(|| modify_index(self, f));\n        let result = result.or_else(|| modify_for(self, f));\n        let result = result.or_else(|| modify_for_range(self, f));\n        let result = result.or_else(|| modify_lambda(self, f));\n        let result = result.or_else(|| modify_let(self, f));\n        let result = result.or_else(|| modify_function_call(self, f));\n        let result = result.or_else(|| modify_member_access(self, f));\n        let result = result.or_else(|| modify_method_call(self, f));\n        let result = result.or_else(|| modify_repeated_element_array(self, f));\n        let result = result.or_else(|| modify_repeated_element_slice(self, f));\n        let result = result.or_else(|| modify_slice(self, f));\n        let result = result.or_else(|| modify_tuple(self, f));\n        let result = result.or_else(|| modify_unary_op(self, f));\n        let result = result.or_else(|| modify_unsafe(self, f));\n        if result.is_some() {\n            let result = result.unwrap_unchecked();\n            let modified = f(result);\n            modified.unwrap_or(result)\n        } else {\n            f(self).unwrap_or(self)\n        }\n    }\n\n    /// Returns this expression as a `Quoted` value. It's the same as `quote { $self }`.\n    // docs:start:quoted\n    pub comptime fn quoted(self) -> Quoted {\n        // docs:end:quoted\n        quote { $self }\n    }\n\n    /// Resolves and type-checks this expression and returns the result as a `TypedExpr`.\n    ///\n    /// The `in_function` argument specifies where the expression is resolved:\n    /// - If it's `none`, the expression is resolved in the function where `resolve` was called\n    /// - If it's `some`, the expression is resolved in the given function\n    ///\n    /// If any names used by this expression are not in scope or if there are any type errors,\n    /// this will give compiler errors as if the expression was written directly into\n    /// the current `comptime` function.\n    #[builtin(expr_resolve)]\n    // docs:start:resolve\n    pub comptime fn resolve(self, in_function: Option<FunctionDefinition>) -> TypedExpr {}\n    // docs:end:resolve\n}\n\ncomptime fn modify_array<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_array().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_array(exprs)\n    })\n}\n\ncomptime fn modify_assert<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert().map(|(predicate, msg)| {\n        let predicate = predicate.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert(predicate, msg)\n    })\n}\n\ncomptime fn modify_assert_eq<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assert_eq().map(|(lhs, rhs, msg)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        let msg = msg.map(|msg| msg.modify(f));\n        new_assert_eq(lhs, rhs, msg)\n    })\n}\n\ncomptime fn modify_assign<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_assign().map(|expr| {\n        let (lhs, rhs) = expr;\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_assign(lhs, rhs)\n    })\n}\n\ncomptime fn modify_binary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_binary_op().map(|(lhs, op, rhs)| {\n        let lhs = lhs.modify(f);\n        let rhs = rhs.modify(f);\n        new_binary_op(lhs, op, rhs)\n    })\n}\n\ncomptime fn modify_block<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_block().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_block(exprs)\n    })\n}\n\ncomptime fn modify_cast<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_cast().map(|(expr, typ)| {\n        let expr = expr.modify(f);\n        new_cast(expr, typ)\n    })\n}\n\ncomptime fn modify_comptime<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_comptime().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_comptime(exprs)\n    })\n}\n\ncomptime fn modify_constructor<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_constructor().map(|(typ, fields)| {\n        let fields = fields.map(|(name, value)| (name, value.modify(f)));\n        new_constructor(typ, fields)\n    })\n}\n\ncomptime fn modify_function_call<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_function_call().map(|(function, arguments)| {\n        let function = function.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_function_call(function, arguments)\n    })\n}\n\ncomptime fn modify_if<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_if().map(|(condition, consequence, alternative)| {\n        let condition = condition.modify(f);\n        let consequence = consequence.modify(f);\n        let alternative = alternative.map(|alternative| alternative.modify(f));\n        new_if(condition, consequence, alternative)\n    })\n}\n\ncomptime fn modify_index<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_index().map(|(object, index)| {\n        let object = object.modify(f);\n        let index = index.modify(f);\n        new_index(object, index)\n    })\n}\n\ncomptime fn modify_for<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for().map(|(identifier, array, body)| {\n        let array = array.modify(f);\n        let body = body.modify(f);\n        new_for(identifier, array, body)\n    })\n}\n\ncomptime fn modify_for_range<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_for_range().map(|(identifier, from, to, body)| {\n        let from = from.modify(f);\n        let to = to.modify(f);\n        let body = body.modify(f);\n        new_for_range(identifier, from, to, body)\n    })\n}\n\ncomptime fn modify_lambda<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_lambda().map(|(params, return_type, body)| {\n        let params = params.map(|(name, typ)| (name.modify(f), typ));\n        let body = body.modify(f);\n        new_lambda(params, return_type, body)\n    })\n}\n\ncomptime fn modify_let<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_let().map(|(pattern, typ, expr)| {\n        let pattern = pattern.modify(f);\n        let expr = expr.modify(f);\n        new_let(pattern, typ, expr)\n    })\n}\n\ncomptime fn modify_member_access<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_member_access().map(|(object, name)| {\n        let object = object.modify(f);\n        new_member_access(object, name)\n    })\n}\n\ncomptime fn modify_method_call<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_method_call().map(|(object, name, generics, arguments)| {\n        let object = object.modify(f);\n        let arguments = arguments.map(|arg| arg.modify(f));\n        new_method_call(object, name, generics, arguments)\n    })\n}\n\ncomptime fn modify_repeated_element_array<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_array().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_array(expr, length)\n    })\n}\n\ncomptime fn modify_repeated_element_slice<Env>(\n    expr: Expr,\n    f: fn[Env](Expr) -> Option<Expr>,\n) -> Option<Expr> {\n    expr.as_repeated_element_slice().map(|(expr, length)| {\n        let expr = expr.modify(f);\n        let length = length.modify(f);\n        new_repeated_element_slice(expr, length)\n    })\n}\n\ncomptime fn modify_slice<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_slice().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_slice(exprs)\n    })\n}\n\ncomptime fn modify_tuple<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_tuple().map(|exprs| {\n        let exprs = modify_expressions(exprs, f);\n        new_tuple(exprs)\n    })\n}\n\ncomptime fn modify_unary_op<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unary_op().map(|(op, rhs)| {\n        let rhs = rhs.modify(f);\n        new_unary_op(op, rhs)\n    })\n}\n\ncomptime fn modify_unsafe<Env>(expr: Expr, f: fn[Env](Expr) -> Option<Expr>) -> Option<Expr> {\n    expr.as_unsafe().map(|exprs| {\n        let exprs = exprs.map(|expr| expr.modify(f));\n        new_unsafe(exprs)\n    })\n}\n\ncomptime fn modify_expressions<Env>(exprs: [Expr], f: fn[Env](Expr) -> Option<Expr>) -> [Expr] {\n    exprs.map(|expr| expr.modify(f))\n}\n\ncomptime fn new_array(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { [$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_assert(predicate: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert($predicate, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert($predicate) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assert_eq(lhs: Expr, rhs: Expr, msg: Option<Expr>) -> Expr {\n    if msg.is_some() {\n        let msg = msg.unwrap();\n        quote { assert_eq($lhs, $rhs, $msg) }.as_expr().unwrap()\n    } else {\n        quote { assert_eq($lhs, $rhs) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_assign(lhs: Expr, rhs: Expr) -> Expr {\n    quote { $lhs = $rhs }.as_expr().unwrap()\n}\n\ncomptime fn new_binary_op(lhs: Expr, op: BinaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { ($lhs) $op ($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_block(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_cast(expr: Expr, typ: UnresolvedType) -> Expr {\n    quote { ($expr) as $typ }.as_expr().unwrap()\n}\n\ncomptime fn new_comptime(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { comptime { $exprs }}.as_expr().unwrap()\n}\n\ncomptime fn new_constructor(typ: UnresolvedType, fields: [(Quoted, Expr)]) -> Expr {\n    let fields = fields.map(|(name, value)| quote { $name: $value }).join(quote { , });\n    quote { $typ { $fields }}.as_expr().unwrap()\n}\n\ncomptime fn new_if(condition: Expr, consequence: Expr, alternative: Option<Expr>) -> Expr {\n    if alternative.is_some() {\n        let alternative = alternative.unwrap();\n        quote { if $condition { $consequence } else { $alternative }}.as_expr().unwrap()\n    } else {\n        quote { if $condition { $consequence } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_for(identifier: Quoted, array: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $array { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_for_range(identifier: Quoted, from: Expr, to: Expr, body: Expr) -> Expr {\n    quote { for $identifier in $from .. $to { $body } }.as_expr().unwrap()\n}\n\ncomptime fn new_index(object: Expr, index: Expr) -> Expr {\n    quote { $object[$index] }.as_expr().unwrap()\n}\n\ncomptime fn new_lambda(\n    params: [(Expr, Option<UnresolvedType>)],\n    return_type: Option<UnresolvedType>,\n    body: Expr,\n) -> Expr {\n    let params = params\n        .map(|(name, typ)| {\n            if typ.is_some() {\n                let typ = typ.unwrap();\n                quote { $name: $typ }\n            } else {\n                quote { $name }\n            }\n        })\n        .join(quote { , });\n\n    if return_type.is_some() {\n        let return_type = return_type.unwrap();\n        quote { |$params| -> $return_type { $body } }.as_expr().unwrap()\n    } else {\n        quote { |$params| { $body } }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_let(pattern: Expr, typ: Option<UnresolvedType>, expr: Expr) -> Expr {\n    if typ.is_some() {\n        let typ = typ.unwrap();\n        quote { let $pattern : $typ = $expr; }.as_expr().unwrap()\n    } else {\n        quote { let $pattern = $expr; }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_member_access(object: Expr, name: Quoted) -> Expr {\n    quote { $object.$name }.as_expr().unwrap()\n}\n\ncomptime fn new_function_call(function: Expr, arguments: [Expr]) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    quote { $function($arguments) }.as_expr().unwrap()\n}\n\ncomptime fn new_method_call(\n    object: Expr,\n    name: Quoted,\n    generics: [UnresolvedType],\n    arguments: [Expr],\n) -> Expr {\n    let arguments = join_expressions(arguments, quote { , });\n\n    if generics.len() == 0 {\n        quote { $object.$name($arguments) }.as_expr().unwrap()\n    } else {\n        let generics = generics.map(|generic| quote { $generic }).join(quote { , });\n        quote { $object.$name::<$generics>($arguments) }.as_expr().unwrap()\n    }\n}\n\ncomptime fn new_repeated_element_array(expr: Expr, length: Expr) -> Expr {\n    quote { [$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_repeated_element_slice(expr: Expr, length: Expr) -> Expr {\n    quote { &[$expr; $length] }.as_expr().unwrap()\n}\n\ncomptime fn new_slice(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { &[$exprs]}.as_expr().unwrap()\n}\n\ncomptime fn new_tuple(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { , });\n    quote { ($exprs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unary_op(op: UnaryOp, rhs: Expr) -> Expr {\n    let op = op.quoted();\n    quote { $op($rhs) }.as_expr().unwrap()\n}\n\ncomptime fn new_unsafe(exprs: [Expr]) -> Expr {\n    let exprs = join_expressions(exprs, quote { ; });\n    quote { \n        // Safety: generated by macro\n        unsafe { $exprs }\n    }\n        .as_expr()\n        .unwrap()\n}\n\ncomptime fn join_expressions(exprs: [Expr], separator: Quoted) -> Quoted {\n    exprs.map(|expr| expr.quoted()).join(separator)\n}\n","path":"std/meta/expr.nr"},"39":{"source":"use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n","path":"std/ops/arith.nr"},"42":{"source":"use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n","path":"std/option.nr"},"43":{"source":"pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n","path":"std/panic.nr"},"50":{"source":"mod types;\n\nuse aztec::macros::aztec;\n\n// Minimal token contract. Do not use\n// For demonstration purposes in playground only\n// If you change the names of these functions, please also update them in playground/src/components/contract/contract.ts\n\n#[aztec]\npub contract SimpleToken {\n    use std::ops::{Add, Sub};\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        authwit::auth::{\n            assert_current_call_valid_authwit, assert_current_call_valid_authwit_public,\n            compute_authwit_nullifier,\n        },\n        context::{PrivateCallInterface, PrivateContext},\n        event::event_interface::{emit_event_in_private_log, PrivateLogContent},\n        macros::{\n            events::event,\n            functions::{initializer, internal, private, public, utility, view},\n            storage::storage,\n        },\n        messages::logs::note::{encode_and_encrypt_note, encode_and_encrypt_note_unconstrained},\n        prelude::{AztecAddress, Map, PublicContext, PublicImmutable, PublicMutable},\n    };\n\n    use dep::uint_note::uint_note::{PartialUintNote, UintNote};\n\n    use crate::types::balance_set::BalanceSet;\n\n    global INITIAL_TRANSFER_CALL_MAX_NOTES: u32 = 2;\n    global RECURSIVE_TRANSFER_CALL_MAX_NOTES: u32 = 8;\n\n    #[event]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: u128,\n    }\n\n    #[storage]\n    struct Storage<Context> {\n        balances: Map<AztecAddress, BalanceSet<Context>, Context>,\n        total_supply: PublicMutable<u128, Context>,\n        public_balances: Map<AztecAddress, PublicMutable<u128, Context>, Context>,\n        symbol: PublicImmutable<FieldCompressedString, Context>,\n        name: PublicImmutable<FieldCompressedString, Context>,\n        decimals: PublicImmutable<u8, Context>,\n    }\n\n    #[public]\n    #[initializer]\n    fn constructor(name: str<31>, symbol: str<31>, decimals: u8) {\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        storage.decimals.initialize(decimals);\n    }\n\n    #[public]\n    #[view]\n    fn public_get_name() -> FieldCompressedString {\n        storage.name.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_get_decimals() -> pub u8 {\n        storage.decimals.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_total_supply() -> u128 {\n        storage.total_supply.read()\n    }\n\n    #[public]\n    #[view]\n    fn public_balance_of(owner: AztecAddress) -> u128 {\n        storage.public_balances.at(owner).read()\n    }\n\n    #[utility]\n    pub(crate) unconstrained fn private_balance_of(owner: AztecAddress) -> u128 {\n        storage.balances.at(owner).balance_of()\n    }\n\n    #[public]\n    fn mint_publicly(to: AztecAddress, amount: u128) {\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n\n    #[public]\n    fn public_transfer(from: AztecAddress, to: AztecAddress, amount: u128, authwit_nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(authwit_nonce == 0, \"invalid authwit nonce\");\n        }\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n\n    #[public]\n    fn burn_public(from: AztecAddress, amount: u128, authwit_nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(authwit_nonce == 0, \"invalid authwit nonce\");\n        }\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n\n    #[private]\n    fn transfer_from_private_to_public(\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: u128,\n        authwit_nonce: Field,\n    ) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(authwit_nonce == 0, \"invalid authwit nonce\");\n        }\n\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        SimpleToken::at(context.this_address())._increase_public_balance(to, amount).enqueue(\n            &mut context,\n        );\n    }\n\n    #[private]\n    fn private_transfer(to: AztecAddress, amount: u128) {\n        let from = context.msg_sender();\n\n        let change = subtract_balance(\n            &mut context,\n            storage,\n            from,\n            amount,\n            INITIAL_TRANSFER_CALL_MAX_NOTES,\n        );\n        storage.balances.at(from).add(from, change).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            from,\n            from,\n        ));\n        storage.balances.at(to).add(to, amount).emit(encode_and_encrypt_note_unconstrained(\n            &mut context,\n            to,\n            from,\n        ));\n\n        emit_event_in_private_log(\n            Transfer { from, to, amount },\n            &mut context,\n            from,\n            to,\n            PrivateLogContent.NO_CONSTRAINTS,\n        );\n    }\n\n    #[private]\n    fn burn_private(from: AztecAddress, amount: u128, authwit_nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(authwit_nonce == 0, \"invalid authwit nonce\");\n        }\n        storage.balances.at(from).sub(from, amount).emit(encode_and_encrypt_note(\n            &mut context,\n            from,\n            from,\n        ));\n        SimpleToken::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n\n    #[private]\n    fn transfer_from_public_to_private(to: AztecAddress, amount: u128) {\n        let from = context.msg_sender();\n        let token = SimpleToken::at(context.this_address());\n\n        let partial_note = _prepare_private_balance_increase(from, to, &mut context, storage);\n        token._finalize_transfer_to_private_unsafe(from, amount, partial_note).enqueue(&mut context);\n    }\n\n    #[private]\n    fn prepare_private_balance_increase(to: AztecAddress, from: AztecAddress) -> PartialUintNote {\n        _prepare_private_balance_increase(from, to, &mut context, storage)\n    }\n\n    #[contract_library_method]\n    fn _prepare_private_balance_increase(\n        from: AztecAddress,\n        to: AztecAddress,\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n    ) -> PartialUintNote {\n        let partial_note = UintNote::partial(\n            to,\n            storage.balances.at(to).set.storage_slot,\n            context,\n            to,\n            from,\n            from,\n        );\n\n        partial_note\n    }\n\n    #[public]\n    fn finalize_transfer_to_private(amount: u128, partial_note: PartialUintNote) {\n        let from_and_completer = context.msg_sender();\n        _finalize_transfer_to_private(\n            from_and_completer,\n            amount,\n            partial_note,\n            &mut context,\n            storage,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_transfer_to_private_unsafe(\n        from_and_completer: AztecAddress,\n        amount: u128,\n        partial_note: PartialUintNote,\n    ) {\n        _finalize_transfer_to_private(\n            from_and_completer,\n            amount,\n            partial_note,\n            &mut context,\n            storage,\n        );\n    }\n\n    #[contract_library_method]\n    fn _finalize_transfer_to_private(\n        from_and_completer: AztecAddress,\n        amount: u128,\n        partial_note: PartialUintNote,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let from_balance = storage.public_balances.at(from_and_completer).read().sub(amount);\n        storage.public_balances.at(from_and_completer).write(from_balance);\n\n        partial_note.complete(context, from_and_completer, amount);\n    }\n\n    #[private]\n    fn mint_privately(from: AztecAddress, to: AztecAddress, amount: u128) {\n        let token = SimpleToken::at(context.this_address());\n        let partial_note = _prepare_private_balance_increase(from, to, &mut context, storage);\n        token._finalize_mint_to_private_unsafe(context.msg_sender(), amount, partial_note).enqueue(\n            &mut context,\n        );\n    }\n\n    #[public]\n    fn finalize_mint_to_private(amount: u128, partial_note: PartialUintNote) {\n        _finalize_mint_to_private(\n            context.msg_sender(),\n            amount,\n            partial_note,\n            &mut context,\n            storage,\n        );\n    }\n\n    #[public]\n    #[internal]\n    fn _finalize_mint_to_private_unsafe(\n        minter_and_completer: AztecAddress,\n        amount: u128,\n        partial_note: PartialUintNote,\n    ) {\n        _finalize_mint_to_private(\n            minter_and_completer,\n            amount,\n            partial_note,\n            &mut context,\n            storage,\n        );\n    }\n\n    #[contract_library_method]\n    fn _finalize_mint_to_private(\n        completer: AztecAddress,\n        amount: u128,\n        partial_note: PartialUintNote,\n        context: &mut PublicContext,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let supply = storage.total_supply.read().add(amount);\n        storage.total_supply.write(supply);\n\n        partial_note.complete(context, completer, amount);\n    }\n\n    #[public]\n    #[internal]\n    fn _increase_public_balance(to: AztecAddress, amount: u128) {\n        _increase_public_balance_inner(to, amount, storage);\n    }\n\n    #[contract_library_method]\n    fn _increase_public_balance_inner(\n        to: AztecAddress,\n        amount: u128,\n        storage: Storage<&mut PublicContext>,\n    ) {\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(new_balance);\n    }\n\n    #[public]\n    #[internal]\n    fn _reduce_total_supply(amount: u128) {\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n\n    #[private]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier);\n    }\n\n    #[contract_library_method]\n    fn subtract_balance(\n        context: &mut PrivateContext,\n        storage: Storage<&mut PrivateContext>,\n        account: AztecAddress,\n        amount: u128,\n        max_notes: u32,\n    ) -> u128 {\n        let subtracted = storage.balances.at(account).try_sub(amount, max_notes);\n        assert(subtracted > 0 as u128, \"Balance too low\");\n        if subtracted >= amount {\n            subtracted - amount\n        } else {\n            let remaining = amount - subtracted;\n            compute_recurse_subtract_balance_call(*context, account, remaining).call(context)\n        }\n    }\n\n    #[no_predicates]\n    #[contract_library_method]\n    fn compute_recurse_subtract_balance_call(\n        context: PrivateContext,\n        account: AztecAddress,\n        remaining: u128,\n    ) -> PrivateCallInterface<25, u128, 1> {\n        SimpleToken::at(context.this_address())._recurse_subtract_balance(account, remaining)\n    }\n\n    #[internal]\n    #[private]\n    fn _recurse_subtract_balance(account: AztecAddress, amount: u128) -> u128 {\n        subtract_balance(\n            &mut context,\n            storage,\n            account,\n            amount,\n            RECURSIVE_TRANSFER_CALL_MAX_NOTES,\n        )\n    }\n}\n","path":"/Users/harshbajpai/Desktop/Projects/aztec-projects/privacy-invoice-payment-aztec/token_contract/src/main.nr"},"51":{"source":"use dep::aztec::{\n    context::{PrivateContext, UtilityContext},\n    note::{note_emission::OuterNoteEmission, retrieved_note::RetrievedNote},\n    protocol_types::{address::AztecAddress, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL},\n    state_vars::storage::Storage,\n};\nuse dep::aztec::prelude::{NoteGetterOptions, NoteViewerOptions, PrivateSet};\nuse dep::uint_note::uint_note::UintNote;\nuse std::ops::Add;\n\npub struct BalanceSet<Context> {\n    pub set: PrivateSet<UintNote, Context>,\n}\n\n// TODO(#13824): remove this impl once we allow structs to hold state variables.\nimpl<Context> Storage<1> for BalanceSet<Context> {\n    fn get_storage_slot(self) -> Field {\n        self.set.get_storage_slot()\n    }\n}\n\nimpl<Context> BalanceSet<Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { set: PrivateSet::new(context, storage_slot) }\n    }\n}\n\nimpl BalanceSet<UtilityContext> {\n    pub unconstrained fn balance_of(self: Self) -> u128 {\n        self.balance_of_with_offset(0)\n    }\n\n    pub unconstrained fn balance_of_with_offset(self: Self, offset: u32) -> u128 {\n        let mut balance = 0 as u128;\n        // docs:start:view_notes\n        let mut options = NoteViewerOptions::new();\n        let notes = self.set.view_notes(options.set_offset(offset));\n        // docs:end:view_notes\n        for i in 0..options.limit {\n            if i < notes.len() {\n                balance = balance + notes.get_unchecked(i).get_value();\n            }\n        }\n        if (notes.len() == options.limit) {\n            balance = balance + self.balance_of_with_offset(offset + options.limit);\n        }\n\n        balance\n    }\n}\n\nimpl BalanceSet<&mut PrivateContext> {\n    pub fn add(self: Self, owner: AztecAddress, addend: u128) -> OuterNoteEmission<UintNote> {\n        if addend == 0 as u128 {\n            OuterNoteEmission::new(Option::none())\n        } else {\n            // We fetch the nullifier public key hash from the registry / from our PXE\n            let mut addend_note = UintNote::new(addend, owner);\n\n            // docs:start:insert\n            OuterNoteEmission::new(Option::some(self.set.insert(addend_note)))\n            // docs:end:insert\n        }\n    }\n\n    pub fn sub(self: Self, owner: AztecAddress, amount: u128) -> OuterNoteEmission<UintNote> {\n        let subtracted = self.try_sub(amount, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL);\n\n        // try_sub may have subtracted more or less than amount. We must ensure that we subtracted at least as much as\n        // we needed, and then create a new note for the owner for the change (if any).\n        assert(subtracted >= amount, \"Balance too low\");\n        self.add(owner, subtracted - amount)\n    }\n\n    // Attempts to remove 'target_amount' from the owner's balance. try_sub returns how much was actually subtracted\n    // (i.e. the sum of the value of nullified notes), but this subtracted amount may be more or less than the target\n    // amount.\n    // This may seem odd, but is unfortunately unavoidable due to the number of notes available and their amounts being\n    // unknown. What try_sub does is a best-effort attempt to consume as few notes as possible that add up to more than\n    // `target_amount`.\n    // The `max_notes` parameter is used to fine-tune the number of constraints created by this function. The gate count\n    // scales relatively linearly with `max_notes`, but a lower `max_notes` parameter increases the likelihood of\n    // `try_sub` subtracting an amount smaller than `target_amount`.\n    pub fn try_sub(self: Self, target_amount: u128, max_notes: u32) -> u128 {\n        // We are using a preprocessor here (filter applied in an unconstrained context) instead of a filter because\n        // we do not need to prove correct execution of the preprocessor.\n        // Because the `min_sum` notes is not constrained, users could choose to e.g. not call it. However, all this\n        // might result in is simply higher DA costs due to more nullifiers being emitted. Since we don't care\n        // about proving optimal note usage, we can save these constraints and make the circuit smaller.\n        let options = NoteGetterOptions::with_preprocessor(preprocess_notes_min_sum, target_amount)\n            .set_limit(max_notes);\n        let notes = self.set.pop_notes(options);\n\n        let mut subtracted = 0 as u128;\n        for i in 0..options.limit {\n            if i < notes.len() {\n                let note = notes.get_unchecked(i);\n                subtracted = subtracted + note.get_value();\n            }\n        }\n\n        subtracted\n    }\n}\n\n// Computes the partial sum of the notes array, stopping once 'min_sum' is reached. This can be used to minimize the\n// number of notes read that add to some value, e.g. when transferring some amount of tokens.\n// The preprocessor (a filter applied in an unconstrained context) does not check if total sum is larger or equal to\n// 'min_sum' - all it does is remove extra notes if it does reach that value.\n// Note that proper usage of this preprocessor requires for notes to be sorted in descending order.\npub fn preprocess_notes_min_sum(\n    notes: [Option<RetrievedNote<UintNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    min_sum: u128,\n) -> [Option<RetrievedNote<UintNote>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    let mut selected = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let mut sum = 0 as u128;\n    for i in 0..notes.len() {\n        // Because we process notes in retrieved order, notes need to be sorted in descending amount order for this\n        // filter to be useful. Consider a 'min_sum' of 4, and a set of notes with amounts [3, 2, 1, 1, 1, 1, 1]. If\n        // sorted in descending order, the filter will only choose the notes with values 3 and 2, but if sorted in\n        // ascending order it will choose 4 notes of value 1.\n        if notes[i].is_some() & sum < min_sum {\n            let retrieved_note = notes[i].unwrap_unchecked();\n            selected[i] = Option::some(retrieved_note);\n            sum = sum.add(retrieved_note.note.get_value());\n        }\n    }\n    selected\n}\n","path":"/Users/harshbajpai/Desktop/Projects/aztec-projects/privacy-invoice-payment-aztec/token_contract/src/types/balance_set.nr"},"54":{"source":"use crate::{\n    authwit::authwit_interface::AuthwitInterface,\n    context::{gas::GasOpts, PrivateContext, PublicContext},\n    hash::hash_args_array,\n    macros::authwits::authwit,\n};\nuse dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    constants::{\n        CANONICAL_AUTH_REGISTRY_ADDRESS, GENERATOR_INDEX__AUTHWIT_INNER,\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER, GENERATOR_INDEX__AUTHWIT_OUTER,\n    },\n    hash::poseidon2_hash_with_separator,\n    traits::ToField,\n};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties\n * (e.g. protocols or other users) to execute an action on their behalf.\n *\n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be\n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few\n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can\n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be\n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n *\n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer.\n *\n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is\n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n *\n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline\n * how this would look in private, and then in public later.\n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX).\n * `Alice` would make a `deposit` transaction, that she is executing using her account contract.\n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token`\n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to\n * convince the `Token` contract that it is allowed to do so.\n *\n * This is where the authentication witness comes in The `Token` contract computes a `message_hash` from the\n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to\n * execute that call.\n *\n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her\n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n *\n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n *\n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts.\n *\n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *\n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store\n * the messages that we have approved.\n *\n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `poseidon2_hash_bytes(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a collision and we return\n *      a success flag.\n *\n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be\n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the\n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n *\n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains.\n */\n\npub global IS_VALID_SELECTOR: Field = 0x47dacd73; // 4 last bytes of poseidon2_hash_bytes(\"IS_VALID()\")\n\n#[authwit]\nstruct CallAuthwit {\n    msg_sender: AztecAddress,\n    selector: FunctionSelector,\n    args_hash: Field,\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call with a valid authentication witness\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let authwit = CallAuthwit {\n        msg_sender: context.msg_sender(),\n        selector: context.selector(),\n        args_hash: context.get_args_hash(),\n    };\n    let inner_hash = authwit.emit_as_offchain_effect_and_get_hash();\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/**\n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n *\n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n * @param inner_hash The hash of the message to authorize\n */\npub fn assert_inner_hash_valid_authwit(\n    context: &mut PrivateContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context\n        .static_call_private_function(\n            on_behalf_of,\n            comptime { FunctionSelector::from_signature(\"verify_private_authwit(Field)\") },\n            [inner_hash],\n        )\n        .get_preimage();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allows the same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier);\n}\n\n/**\n * Assert that `on_behalf_of` has authorized the current call in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub unconstrained fn assert_current_call_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n) {\n    let inner_hash = compute_inner_authwit_hash([\n        (*context).msg_sender().to_field(),\n        (*context).selector().to_field(),\n        (*context).get_args_hash(),\n    ]);\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/**\n * Assert that `on_behalf_of` has authorized a specific `inner_hash` in the authentication registry\n *\n * Compute the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then make a call out to the\n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n *\n * @param on_behalf_of The address that has allegedly authorized the `inner_hash`\n */\npub unconstrained fn assert_inner_hash_valid_authwit_public(\n    context: &mut PublicContext,\n    on_behalf_of: AztecAddress,\n    inner_hash: Field,\n) {\n    let results: [Field] = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"consume((Field),Field)\") },\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default(),\n    );\n    assert(results.len() == 1, \"Invalid response from registry\");\n    assert(results[0] == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness\n *\n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n *\n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<let N: u32>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N],\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash =\n        compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n *\n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n *\n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<let N: u32>(args: [Field; N]) -> Field {\n    poseidon2_hash_with_separator(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/**\n * Computes the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n *\n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n *\n * @param on_behalf_of The address that has authorized the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n *\n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    inner_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [consumer.to_field(), chain_id, version, inner_hash],\n        GENERATOR_INDEX__AUTHWIT_OUTER,\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n *\n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n *\n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub unconstrained fn set_authorized(\n    context: &mut PublicContext,\n    message_hash: Field,\n    authorize: bool,\n) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_authorized(Field,bool)\") },\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n\n/**\n * Helper function to reject all authwits\n *\n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise\n */\npub unconstrained fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    let res = context.call_public_function(\n        CANONICAL_AUTH_REGISTRY_ADDRESS,\n        comptime { FunctionSelector::from_signature(\"set_reject_all(bool)\") },\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default(),\n    );\n    assert(res.len() == 0);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/authwit/auth.nr"},"62":{"source":"use crate::oracle::capsules;\nuse protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// A dynamically sized array backed by PXE's non-volatile database (called capsules). Values are persisted until\n/// deleted, so they can be e.g. stored during simulation of a transaction and later retrieved during witness\n/// generation. All values are scoped per contract address, so external contracts cannot access them.\npub struct CapsuleArray<T> {\n    contract_address: AztecAddress,\n    /// The base slot is where the array length is stored in capsules. Array elements are stored in consecutive slots\n    /// after the base slot. For example, with base slot 5: the length is at slot 5, the first element (index 0) is at\n    /// slot 6, the second element (index 1) is at slot 7, and so on.\n    base_slot: Field,\n}\n\nimpl<T> CapsuleArray<T> {\n    /// Returns a CapsuleArray connected to a contract's capsules at a base slot. Array elements are stored in\n    /// contiguous slots following the base slot, so there should be sufficient space between array base slots to\n    /// accommodate elements. A reasonable strategy is to make the base slot a hash of a unique value.\n    pub unconstrained fn at(contract_address: AztecAddress, base_slot: Field) -> Self {\n        Self { contract_address, base_slot }\n    }\n\n    /// Returns the number of elements stored in the array.\n    pub unconstrained fn len(self) -> u32 {\n        // An uninitialized array defaults to a length of 0.\n        capsules::load(self.contract_address, self.base_slot).unwrap_or(0) as u32\n    }\n\n    /// Stores a value at the end of the array.\n    pub unconstrained fn push<let N: u32>(self, value: T)\n    where\n        T: Serialize<N>,\n    {\n        let current_length = self.len();\n\n        // The slot corresponding to the index `current_length` is the first slot immediately after the end of the\n        // array, which is where we want to place the new value.\n        capsules::store(self.contract_address, self.slot_at(current_length), value);\n\n        // Then we simply update the length.\n        let new_length = current_length + 1;\n        capsules::store(self.contract_address, self.base_slot, new_length);\n    }\n\n    /// Retrieves the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn get<let N: u32>(self, index: u32) -> T\n    where\n        T: Deserialize<N>,\n    {\n        assert(index < self.len(), \"Attempted to read past the length of a CapsuleArray\");\n\n        capsules::load(self.contract_address, self.slot_at(index)).unwrap()\n    }\n\n    /// Deletes the value stored in the array at `index`. Throws if the index is out of bounds.\n    pub unconstrained fn remove(self, index: u32) {\n        let current_length = self.len();\n        assert(index < current_length, \"Attempted to delete past the length of a CapsuleArray\");\n\n        // In order to be able to remove elements at arbitrary indices, we need to shift the entire contents of the\n        // array past the removed element one slot backward so that we don't end up with a gap and preserve the\n        // contiguous slots. We can skip this when deleting the last element however.\n        if index != current_length - 1 {\n            // The source and destination regions overlap, but `copy` supports this.\n            capsules::copy(\n                self.contract_address,\n                self.slot_at(index + 1),\n                self.slot_at(index),\n                current_length - index - 1,\n            );\n        }\n\n        // We can now delete the last element (which has either been copied to the slot immediately before it, or was\n        // the element we meant to delete in the first place) and update the length.\n        capsules::delete(self.contract_address, self.slot_at(current_length - 1));\n        capsules::store(self.contract_address, self.base_slot, current_length - 1);\n    }\n\n    /// Iterates over the entire array, calling the callback with all values and their array index. The order in which\n    /// values are processed is arbitrary.\n    ///\n    /// It is safe to delete the current element (and only the current element) from inside the callback via `remove`:\n    /// ```noir\n    /// array.for_each(|index, value| {\n    ///   if some_condition(value) {\n    ///     array.remove(index); // safe only for this index\n    ///   }\n    /// }\n    /// ```\n    ///\n    /// If all elements in the array need to iterated over and then removed, then using `for_each` results in optimal\n    /// efficiency.\n    ///\n    /// It is **not** safe to push new elements into the array from inside the callback.\n    pub unconstrained fn for_each<Env, let N: u32>(self, f: unconstrained fn[Env](u32, T) -> ())\n    where\n        T: Deserialize<N>,\n    {\n        // Iterating over all elements is simple, but we want to do it in such a way that a) deleting the current\n        // element is safe to do, and b) deleting *all* elements is optimally efficient. This is because CapsuleArrays\n        // are typically used to hold pending tasks, so iterating them while clearing completed tasks (sometimes\n        // unconditionally, resulting in a full clear) is a very common access pattern.\n        //\n        // The way we achieve this is by iterating backwards: each element can always be deleted since it won't change\n        // any preceding (lower) indices, and if every element is deleted then every element will (in turn) be the last\n        // element. This results in an optimal full clear since `remove` will be able to skip the `capsules::copy` call\n        // to shift any elements past the deleted one (because there will be none).\n        let mut i = self.len();\n        while i > 0 {\n            i -= 1;\n            f(i, self.get(i));\n        }\n    }\n\n    unconstrained fn slot_at(self, index: u32) -> Field {\n        // Elements are stored immediately after the base slot, so we add 1 to it to compute the slot for the first\n        // element.\n        self.base_slot + 1 + index as Field\n    }\n}\n\nmod test {\n    use crate::test::helpers::test_environment::TestEnvironment;\n    use super::CapsuleArray;\n    use protocol_types::address::AztecAddress;\n\n    global SLOT: Field = 1230;\n\n    unconstrained fn setup() -> AztecAddress {\n        TestEnvironment::new().utility().this_address()\n    }\n\n    #[test]\n    unconstrained fn empty_array() {\n        let contract_address = setup();\n\n        let array: CapsuleArray<Field> = CapsuleArray::at(contract_address, SLOT);\n        assert_eq(array.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn empty_array_read() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        let _: Field = array.get(0);\n    }\n\n    #[test]\n    unconstrained fn array_push() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        assert_eq(array.len(), 1);\n        assert_eq(array.get(0), 5);\n    }\n\n    #[test(should_fail_with = \"Attempted to read past the length of a CapsuleArray\")]\n    unconstrained fn read_past_len() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n        array.push(5);\n\n        let _ = array.get(1);\n    }\n\n    #[test]\n    unconstrained fn array_remove_last() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(5);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn array_remove_some() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        assert_eq(array.len(), 3);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 8);\n        assert_eq(array.get(2), 9);\n\n        array.remove(1);\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 7);\n        assert_eq(array.get(1), 9);\n    }\n\n    #[test]\n    unconstrained fn array_remove_all() {\n        let contract_address = setup();\n\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(7);\n        array.push(8);\n        array.push(9);\n\n        array.remove(1);\n        array.remove(1);\n        array.remove(0);\n\n        assert_eq(array.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn for_each_called_with_all_elements() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        // We store all values that we were called with and check that all (value, index) tuples are present. Note that\n        // we do not care about the order in which each tuple was passed to the closure.\n        let called_with = &mut BoundedVec::<(u32, Field), 3>::new();\n        array.for_each(|index, value| { called_with.push((index, value)); });\n\n        assert_eq(called_with.len(), 3);\n        assert(called_with.any(|(index, value)| (index == 0) & (value == 4)));\n        assert(called_with.any(|(index, value)| (index == 1) & (value == 5)));\n        assert(called_with.any(|(index, value)| (index == 2) & (value == 6)));\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_some() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| {\n            if index == 1 {\n                array.remove(index);\n            }\n        });\n\n        assert_eq(array.len(), 2);\n        assert_eq(array.get(0), 4);\n        assert_eq(array.get(1), 6);\n    }\n\n    #[test]\n    unconstrained fn for_each_remove_all() {\n        let contract_address = setup();\n        let array = CapsuleArray::at(contract_address, SLOT);\n\n        array.push(4);\n        array.push(5);\n        array.push(6);\n\n        array.for_each(|index, _| { array.remove(index); });\n\n        assert_eq(array.len(), 0);\n    }\n\n    // TODO: uncomment this test once OracleMock::count is implemented in the stdlib.\n    // #[test]\n    // unconstrained fn for_each_remove_all_no_copy() {\n    //     let contract_address = setup();\n    //     let array = CapsuleArray::at(contract_address, SLOT);\n\n    //     array.push(4);\n    //     array.push(5);\n    //     array.push(6);\n\n    //     // We test that the copyCapsule was never called, which is the expensive operation we want to avoid.\n    //     let mock = OracleMock::mock(\"copyCapsule\");\n\n    //     array.for_each(|index, _| {\n    //         array.remove(index);\n    //     });\n\n    //     assert_eq(mock.count(), 0);\n    // }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/capsules/mod.nr"},"63":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector,\n    address::AztecAddress,\n    traits::{Deserialize, ToField},\n};\n\nuse crate::context::{\n    gas::GasOpts, private_context::PrivateContext, public_context::PublicContext,\n    returns_hash::ReturnsHash,\n};\nuse crate::hash::{hash_args, hash_calldata};\nuse crate::oracle::execution_cache;\nuse crate::test::helpers::cheatcodes;\n\npub trait CallInterface<let N: u32> {\n    fn get_args(self) -> [Field];\n    fn get_selector(self) -> FunctionSelector;\n    fn get_name(self) -> str<N>;\n    fn get_contract_address(self) -> AztecAddress;\n    fn get_is_static(self) -> bool;\n}\n\n// PrivateCallInterface\n\npub struct PrivateCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n        );\n        let returns: T = returns_hash.get_preimage();\n        returns\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T {\n        execution_cache::store(self.args, self.args_hash);\n        let returns_hash = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns_hash.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateVoidCallInterface\n\npub struct PrivateVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn call(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                false,\n            )\n            .assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticCallInterface\n\npub struct PrivateStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) -> T\n    where\n        T: Deserialize<N>,\n    {\n        execution_cache::store(self.args, self.args_hash);\n        let returns = context.call_private_function_with_args_hash(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            true,\n        );\n        returns.get_preimage()\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PrivateStaticVoidCallInterface\n\npub struct PrivateStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PrivateStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self {\n            target_contract,\n            selector,\n            name,\n            args_hash,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n        }\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        execution_cache::store(self.args, self.args_hash);\n        context\n            .call_private_function_with_args_hash(\n                self.target_contract,\n                self.selector,\n                self.args_hash,\n                true,\n            )\n            .assert_empty();\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PrivateStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicCallInterface\n\npub struct PublicCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    gas_opts: GasOpts,\n    return_type: T,\n    is_static: bool,\n}\n\nimpl<let M: u32, T, let N: u32> PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            gas_opts: GasOpts::default(),\n            return_type: std::mem::zeroed(),\n            is_static,\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) -> T {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicVoidCallInterface\n\npub struct PublicVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n        is_static: bool,\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            false,\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n\n    pub fn set_as_teardown(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.set_public_teardown_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            false,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticCallInterface\n\npub struct PublicStaticCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: T,\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) -> T {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        Deserialize::deserialize(returns.as_array::<N>())\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// PublicStaticVoidCallInterface\n\npub struct PublicStaticVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args: [Field],\n    return_type: (), // Unit type () indicates this interface is for functions that return nothing (void)\n    is_static: bool,\n    gas_opts: GasOpts,\n}\n\nimpl<let M: u32, T, let N: u32> PublicStaticVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        Self {\n            target_contract,\n            selector,\n            name,\n            args,\n            return_type: std::mem::zeroed(),\n            is_static: true,\n            gas_opts: GasOpts::default(),\n        }\n    }\n\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub unconstrained fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.gas_opts,\n        );\n        assert(returns.len() == 0);\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let calldata = self.args.push_front(self.selector.to_field());\n        let calldata_hash = hash_calldata(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        context.call_public_function_with_calldata_hash(\n            self.target_contract,\n            calldata_hash,\n            /*static=*/\n            true,\n        )\n    }\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for PublicStaticVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\n// UtilityCallInterface\n\npub struct UtilityCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\n// UtilityVoidCallInterface\n\npub struct UtilityVoidCallInterface<let M: u32, T, let N: u32> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<M>,\n    args_hash: Field,\n    args: [Field],\n    return_type: T,\n}\n\nimpl<let M: u32, T, let N: u32> CallInterface<M> for UtilityVoidCallInterface<M, T, N> {\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        false\n    }\n}\n\nimpl<let M: u32, T, let N: u32> UtilityVoidCallInterface<M, T, N> {\n    pub fn new(\n        target_contract: AztecAddress,\n        selector: FunctionSelector,\n        name: str<M>,\n        args: [Field],\n    ) -> Self {\n        let args_hash = hash_args(args);\n        Self { target_contract, selector, name, args_hash, args, return_type: std::mem::zeroed() }\n    }\n\n    pub fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    pub fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    pub fn get_name(self) -> str<M> {\n        self.name\n    }\n\n    pub fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n}\n\npub trait TXEPublicCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPublicCallInterface<T, N> for PublicStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let (returns_hash, tx_hash) = cheatcodes::public_call_new_flow(\n            from,\n            self.target_contract,\n            self.selector,\n            self.args,\n            self.is_static,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEPrivateCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field);\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_end_side_effect_counter, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage();\n\n        (returns, tx_hash)\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEPrivateCallInterface<T, N> for PrivateStaticVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self, from: AztecAddress) -> (T, Field) {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let (_, returns_hash, tx_hash) = cheatcodes::private_call_new_flow(\n            from,\n            self.get_contract_address(),\n            self.get_selector(),\n            args,\n            args_hash,\n            self.get_is_static(),\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n\n        (returns, tx_hash)\n    }\n}\n\npub trait TXEUtilityCallInterface<T, let N: u32> {\n    unconstrained fn call_with_txe(self) -> T;\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns: T = ReturnsHash::new(returns_hash).get_preimage();\n        returns\n    }\n}\n\nimpl<let M: u32, T, let N: u32> TXEUtilityCallInterface<T, N> for UtilityVoidCallInterface<M, T, N>\nwhere\n    T: Deserialize<N>,\n{\n    unconstrained fn call_with_txe(self) -> T {\n        let args = self.get_args();\n        let args_hash = hash_args(args);\n        execution_cache::store(args, args_hash);\n\n        let returns_hash = crate::oracle::simulate_utility_function::simulate_utility_function(\n            self.get_contract_address(),\n            self.get_selector(),\n            args_hash,\n        );\n\n        let returns = ReturnsHash::new(returns_hash).get_preimage_and_assert_empty();\n        returns\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr"},"70":{"source":"use crate::{\n    context::{inputs::PrivateContextInputs, returns_hash::ReturnsHash},\n    hash::{ArgsHasher, hash_args_array, hash_calldata_array},\n    keys::constants::{NULLIFIER_INDEX, NUM_KEY_TYPES, OUTGOING_INDEX, sk_generators},\n    messaging::process_l1_to_l2_message,\n    oracle::{\n        block_header::get_block_header_at,\n        call_private_function::call_private_function_internal,\n        enqueue_public_function_call::{\n            notify_enqueued_public_function_call, notify_set_min_revertible_side_effect_counter,\n            notify_set_public_teardown_function_call,\n        },\n        execution_cache,\n        key_validation_request::get_key_validation_request,\n        notes::{notify_created_nullifier, notify_nullified_note},\n    },\n};\nuse dep::protocol_types::{\n    abis::{\n        call_context::CallContext,\n        function_selector::FunctionSelector,\n        gas_settings::GasSettings,\n        include_by_timestamp::IncludeByTimestamp,\n        log_hash::LogHash,\n        note_hash::NoteHash,\n        nullifier::Nullifier,\n        private_call_request::PrivateCallRequest,\n        private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        private_log::{PrivateLog, PrivateLogData},\n        public_call_request::PublicCallRequest,\n        read_request::ReadRequest,\n        side_effect::Counted,\n        validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    },\n    address::{AztecAddress, EthAddress},\n    block_header::BlockHeader,\n    constants::{\n        MAX_CONTRACT_CLASS_LOGS_PER_CALL, MAX_ENQUEUED_CALLS_PER_CALL,\n        MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL,\n        MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL,\n        MAX_NULLIFIER_READ_REQUESTS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n        MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PRIVATE_LOGS_PER_CALL,\n        PRIVATE_LOG_SIZE_IN_FIELDS,\n    },\n    messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Empty, Hash, ToField},\n    utils::arrays::array_concat,\n};\n\n// When finished, one can call .finish() to convert back to the abi\npub struct PrivateContext {\n    // docs:start:private-context\n    pub inputs: PrivateContextInputs,\n    pub side_effect_counter: u32,\n\n    pub min_revertible_side_effect_counter: u32,\n    pub is_fee_payer: bool,\n\n    pub args_hash: Field,\n    pub return_hash: Field,\n\n    pub include_by_timestamp: IncludeByTimestamp,\n\n    pub note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    pub nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    pub note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    pub nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    pub private_call_requests: BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    pub public_call_requests: BoundedVec<Counted<PublicCallRequest>, MAX_ENQUEUED_CALLS_PER_CALL>,\n    pub public_teardown_call_request: PublicCallRequest,\n    pub l2_to_l1_msgs: BoundedVec<Counted<L2ToL1Message>, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    pub historical_header: BlockHeader,\n\n    pub private_logs: BoundedVec<PrivateLogData, MAX_PRIVATE_LOGS_PER_CALL>,\n    pub contract_class_logs_hashes: BoundedVec<Counted<LogHash>, MAX_CONTRACT_CLASS_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    pub last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    pub fn gas_settings(self) -> GasSettings {\n        self.inputs.tx_context.gas_settings\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    pub fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    pub fn push_nullifier(&mut self, nullifier: Field) {\n        notify_created_nullifier(nullifier);\n        self.nullifiers.push(\n            Nullifier { value: nullifier, note_hash: 0, counter: self.next_counter() },\n        );\n    }\n\n    pub fn push_nullifier_for_note_hash(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        let nullifier_counter = self.next_counter();\n        notify_nullified_note(nullifier, nullified_note_hash, nullifier_counter);\n        self.nullifiers.push(\n            Nullifier {\n                value: nullifier,\n                note_hash: nullified_note_hash,\n                counter: nullifier_counter,\n            },\n        );\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_block_header(self) -> BlockHeader {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_block_header_at(self, block_number: u32) -> BlockHeader {\n        get_block_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        self.return_hash = returns_hasher.hash();\n        execution_cache::store(returns_hasher.fields, self.return_hash);\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            include_by_timestamp: self.include_by_timestamp,\n            note_hash_read_requests: self.note_hash_read_requests.storage(),\n            nullifier_read_requests: self.nullifier_read_requests.storage(),\n            key_validation_requests_and_generators: self\n                .key_validation_requests_and_generators\n                .storage(),\n            note_hashes: self.note_hashes.storage(),\n            nullifiers: self.nullifiers.storage(),\n            private_call_requests: self.private_call_requests.storage(),\n            public_call_requests: self.public_call_requests.storage(),\n            public_teardown_call_request: self.public_teardown_call_request,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage(),\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            private_logs: self.private_logs.storage(),\n            contract_class_logs_hashes: self.contract_class_logs_hashes.storage(),\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context,\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\n            \"Setting {0} as fee payer\",\n            [self.this_address().to_field()],\n        );\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n        notify_set_min_revertible_side_effect_counter(self.min_revertible_side_effect_counter);\n    }\n\n    // docs:start:include-by-timestamp\n    pub fn set_include_by_timestamp(&mut self, include_by_timestamp: u64) {\n        // docs:end:include-by-timestamp\n        self.include_by_timestamp =\n            IncludeByTimestamp::min_with_u64(self.include_by_timestamp, include_by_timestamp);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index as u32].unwrap_or(\n            KeyValidationRequest::empty(),\n        );\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one\n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale\n            // Typically we'd validate keys by showing that they are the preimage of `pk_m_hash`, but that'd require\n            // the oracle returning the master secret keys, which could cause malicious contracts to leak it or learn\n            // about secrets from other contracts. We therefore silo secret keys, and rely on the private kernel to\n            // validate that we siloed secret key corresponds to correct siloing of the master secret key that hashes\n            // to `pk_m_hash`.\n\n            // Safety: Kernels verify that the key validation request is valid and below we verify that a request\n            // for the correct public key has been received.\n            let request = unsafe { get_key_validation_request(pk_m_hash, key_index) };\n            assert_eq(request.pk_m.hash(), pk_m_hash, \"Obtained invalid key validation request\");\n\n            self.key_validation_requests_and_generators.push(\n                KeyValidationRequestAndGenerator {\n                    request,\n                    sk_app_generator: sk_generators[key_index as u32],\n                },\n            );\n            self.last_key_validation_requests[key_index as u32] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.l2_to_l1_msgs.push(message.count(self.next_counter()));\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret,\n            leaf_index,\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn emit_private_log(&mut self, log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS], length: u32) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter: 0, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn emit_raw_note_log(\n        &mut self,\n        log: [Field; PRIVATE_LOG_SIZE_IN_FIELDS],\n        length: u32,\n        note_hash_counter: u32,\n    ) {\n        let counter = self.next_counter();\n        let private_log =\n            PrivateLogData { log: PrivateLog::new(log, length), note_hash_counter, counter };\n        self.private_logs.push(private_log);\n    }\n\n    pub fn call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            false,\n        )\n    }\n\n    pub fn static_call_private_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) -> ReturnsHash {\n        let args_hash = hash_args_array(args);\n        execution_cache::store(args, args_hash);\n        self.call_private_function_with_args_hash(\n            contract_address,\n            function_selector,\n            args_hash,\n            true,\n        )\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) -> ReturnsHash {\n        self.call_private_function_with_args_hash(contract_address, function_selector, 0, true)\n    }\n\n    pub fn call_private_function_with_args_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n    ) -> ReturnsHash {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n\n        // Safety: The oracle simulates the private call and returns the value of the side effects counter after\n        // execution of the call (which means that end_side_effect_counter - start_side_effect_counter is\n        // the number of side effects that took place), along with the hash of the return values. We validate these\n        // by requesting a private kernel iteration in which the return values are constrained to hash\n        // to `returns_hash` and the side effects counter to increment from start to end.\n        let (end_side_effect_counter, returns_hash) = unsafe {\n            call_private_function_internal(\n                contract_address,\n                function_selector,\n                args_hash,\n                start_side_effect_counter,\n                is_static_call,\n            )\n        };\n\n        self.private_call_requests.push(\n            PrivateCallRequest {\n                call_context: CallContext {\n                    msg_sender: self.this_address(),\n                    contract_address,\n                    function_selector,\n                    is_static_call,\n                },\n                args_hash,\n                returns_hash,\n                start_side_effect_counter,\n                end_side_effect_counter,\n            },\n        );\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n        self.side_effect_counter = end_side_effect_counter + 1;\n        ReturnsHash::new(returns_hash)\n    }\n\n    pub fn call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n    ) {\n        let calldata_hash = hash_calldata_array([function_selector.to_field()]);\n        self.call_public_function_with_calldata_hash(contract_address, calldata_hash, true)\n    }\n\n    pub fn call_public_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_enqueued_public_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        let call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n\n        self.public_call_requests.push(Counted::new(call_request, counter));\n    }\n\n    pub fn set_public_teardown_function<let ARGS_COUNT: u32>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT],\n    ) {\n        let calldata = array_concat([function_selector.to_field()], args);\n        let calldata_hash = hash_calldata_array(calldata);\n        execution_cache::store(calldata, calldata_hash);\n        self.set_public_teardown_function_with_calldata_hash(contract_address, calldata_hash, false)\n    }\n\n    pub fn set_public_teardown_function_with_calldata_hash(\n        &mut self,\n        contract_address: AztecAddress,\n        calldata_hash: Field,\n        is_static_call: bool,\n    ) {\n        let counter = self.next_counter();\n\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n\n        notify_set_public_teardown_function_call(\n            contract_address,\n            calldata_hash,\n            counter,\n            is_static_call,\n        );\n\n        self.public_teardown_call_request = PublicCallRequest {\n            msg_sender: self.this_address(),\n            contract_address,\n            is_static_call,\n            calldata_hash,\n        };\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            include_by_timestamp: IncludeByTimestamp::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_requests: BoundedVec::new(),\n            public_teardown_call_request: PublicCallRequest::empty(),\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: BlockHeader::empty(),\n            private_logs: BoundedVec::new(),\n            contract_class_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES],\n        }\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"71":{"source":"use crate::context::gas::GasOpts;\nuse crate::hash::{\n    compute_l1_to_l2_message_hash, compute_l1_to_l2_message_nullifier, compute_secret_hash,\n};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::constants::MAX_U32_VALUE;\nuse dep::protocol_types::traits::{Empty, FromField, Packable, Serialize, ToField};\n\npub struct PublicContext {\n    pub args_hash: Option<Field>,\n    pub compute_args_hash: fn() -> Field,\n}\n\nimpl PublicContext {\n    pub fn new(compute_args_hash: fn() -> Field) -> Self {\n        PublicContext { args_hash: Option::none(), compute_args_hash }\n    }\n\n    pub fn emit_public_log<T, let N: u32>(_self: &mut Self, log: T)\n    where\n        T: Serialize<N>,\n    {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_public_log(Serialize::serialize(log).as_slice()) };\n    }\n\n    pub fn note_hash_exists(_self: Self, note_hash: Field, leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { note_hash_exists(note_hash, leaf_index) } == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(_self: Self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { l1_to_l2_msg_exists(msg_hash, msg_leaf_index) } == 1\n    }\n\n    pub fn nullifier_exists(_self: Self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { nullifier_exists(unsiloed_nullifier, address.to_field()) } == 1\n    }\n\n    pub fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field,\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_l1_to_l2_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/\n            self.this_address(),\n            self.version(),\n            content,\n            secret_hash,\n            leaf_index,\n        );\n        let nullifier = compute_l1_to_l2_message_nullifier(message_hash, secret);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()),\n            \"L1-to-L2 message is already nullified\",\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index),\n            \"Tried to consume nonexistent L1-to-L2 message\",\n        );\n\n        self.push_nullifier(nullifier);\n    }\n\n    pub fn message_portal(_self: &mut Self, recipient: EthAddress, content: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { send_l2_to_l1_msg(recipient, content) };\n    }\n\n    pub unconstrained fn call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub unconstrained fn static_call_public_function(\n        _self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts,\n    ) -> [Field] {\n        let calldata = args.push_front(function_selector.to_field());\n\n        call_static(\n            gas_opts.l2_gas.unwrap_or(MAX_U32_VALUE),\n            gas_opts.da_gas.unwrap_or(MAX_U32_VALUE),\n            contract_address,\n            calldata,\n        );\n        // Use success_copy to determine whether the call succeeded\n        let success = success_copy();\n\n        let result_data = returndata_copy(0, returndata_size());\n        if !success {\n            // Rethrow the revert data.\n            avm_revert(result_data);\n        }\n        result_data\n    }\n\n    pub fn push_note_hash(_self: &mut Self, note_hash: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_note_hash(note_hash) };\n    }\n    pub fn push_nullifier(_self: &mut Self, nullifier: Field) {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { emit_nullifier(nullifier) };\n    }\n\n    pub fn this_address(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            address()\n        }\n    }\n    pub fn msg_sender(_self: Self) -> AztecAddress {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            sender()\n        }\n    }\n    pub fn selector(_self: Self) -> FunctionSelector {\n        // The selector is the first element of the calldata when calling a public function through dispatch.\n        // Safety: AVM opcodes are constrained by the AVM itself\n        let raw_selector: [Field; 1] = unsafe { calldata_copy(0, 1) };\n        FunctionSelector::from_field(raw_selector[0])\n    }\n    pub fn get_args_hash(mut self) -> Field {\n        if !self.args_hash.is_some() {\n            self.args_hash = Option::some((self.compute_args_hash)());\n        }\n\n        self.args_hash.unwrap_unchecked()\n    }\n    pub fn transaction_fee(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            transaction_fee()\n        }\n    }\n\n    pub fn chain_id(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            chain_id()\n        }\n    }\n    pub fn version(_self: Self) -> Field {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            version()\n        }\n    }\n    pub fn block_number(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            block_number()\n        }\n    }\n    pub fn timestamp(_self: Self) -> u64 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            timestamp()\n        }\n    }\n    pub fn fee_per_l2_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_l2_gas()\n        }\n    }\n    pub fn fee_per_da_gas(_self: Self) -> u128 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            fee_per_da_gas()\n        }\n    }\n\n    pub fn l2_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            l2_gas_left()\n        }\n    }\n    pub fn da_gas_left(_self: Self) -> u32 {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe {\n            da_gas_left()\n        }\n    }\n    pub fn is_static_call(_self: Self) -> bool {\n        // Safety: AVM opcodes are constrained by the AVM itself\n        unsafe { is_static_call() } == 1\n    }\n\n    pub fn raw_storage_read<let N: u32>(_self: Self, storage_slot: Field) -> [Field; N] {\n        let mut out = [0; N];\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            out[i] = unsafe { storage_read(storage_slot + i as Field) };\n        }\n        out\n    }\n\n    pub fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n\n    pub fn raw_storage_write<let N: u32>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        for i in 0..N {\n            // Safety: AVM opcodes are constrained by the AVM itself\n            unsafe { storage_write(storage_slot + i as Field, values[i]) };\n        }\n    }\n\n    pub fn storage_write<T, let N: u32>(self, storage_slot: Field, value: T)\n    where\n        T: Packable<N>,\n    {\n        self.raw_storage_write(storage_slot, value.pack());\n    }\n}\n\n// Unconstrained opcode wrappers (do not use directly).\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> u32 {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> u128 {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> u128 {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> u32 {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> u32 {\n    da_gas_left_opcode()\n}\nunconstrained fn is_static_call() -> Field {\n    is_static_call_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u1 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u1 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_public_log(message: [Field]) {\n    emit_public_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u1 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\nunconstrained fn call_static(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {\n    call_static_opcode(l2_gas_allocation, da_gas_allocation, address, args)\n}\n\npub unconstrained fn calldata_copy<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {\n    calldata_copy_opcode(cdoffset, copy_size)\n}\n\n// `success_copy` is placed immediately after the CALL opcode to get the success value\nunconstrained fn success_copy() -> bool {\n    success_copy_opcode()\n}\n\nunconstrained fn returndata_size() -> u32 {\n    returndata_size_opcode()\n}\n\nunconstrained fn returndata_copy(rdoffset: u32, copy_size: u32) -> [Field] {\n    returndata_copy_opcode(rdoffset, copy_size)\n}\n\npub unconstrained fn avm_return(returndata: [Field]) {\n    return_opcode(returndata)\n}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\nunconstrained fn avm_revert(revertdata: [Field]) {\n    revert_opcode(revertdata)\n}\n\nunconstrained fn storage_read(storage_slot: Field) -> Field {\n    storage_read_opcode(storage_slot)\n}\n\nunconstrained fn storage_write(storage_slot: Field, value: Field) {\n    storage_write_opcode(storage_slot, value);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(|| 0)\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> u128 {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> u32 {}\n\n#[oracle(avmOpcodeIsStaticCall)]\nunconstrained fn is_static_call_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u1 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n// TODO(#11124): rename unencrypted to public in avm\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_public_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u1 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCalldataCopy)]\nunconstrained fn calldata_copy_opcode<let N: u32>(cdoffset: u32, copy_size: u32) -> [Field; N] {}\n\n#[oracle(avmOpcodeReturndataSize)]\nunconstrained fn returndata_size_opcode() -> u32 {}\n\n#[oracle(avmOpcodeReturndataCopy)]\nunconstrained fn returndata_copy_opcode(rdoffset: u32, copy_size: u32) -> [Field] {}\n\n#[oracle(avmOpcodeReturn)]\nunconstrained fn return_opcode(returndata: [Field]) {}\n\n// This opcode reverts using the exact data given. In general it should only be used\n// to do rethrows, where the revert data is the same as the original revert data.\n// For normal reverts, use Noir's `assert` which, on top of reverting, will also add\n// an error selector to the revert data.\n#[oracle(avmOpcodeRevert)]\nunconstrained fn revert_opcode(revertdata: [Field]) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode(\n    l2_gas_allocation: u32,\n    da_gas_allocation: u32,\n    address: AztecAddress,\n    args: [Field],\n) {}\n\n#[oracle(avmOpcodeSuccessCopy)]\nunconstrained fn success_copy_opcode() -> bool {}\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode(storage_slot: Field) -> Field {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode(storage_slot: Field, value: Field) {}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"72":{"source":"use crate::{hash::hash_args_array, oracle::execution_cache};\nuse dep::protocol_types::traits::Deserialize;\n\npub struct ReturnsHash {\n    hash: Field,\n}\n\nimpl ReturnsHash {\n    pub fn new(hash: Field) -> Self {\n        ReturnsHash { hash }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.hash, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.hash\n    }\n\n    /// This is only used during private execution, since in public it is the VM itself that keeps track of return\n    /// values.\n    pub fn get_preimage<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n\n        Deserialize::deserialize(preimage)\n    }\n\n    pub fn get_preimage_and_assert_empty<T, let N: u32>(self) -> T\n    where\n        T: Deserialize<N>,\n    {\n        // Safety: We verify that the value returned by `load` is the preimage of `hash`, fully constraining it.\n        let preimage: [Field; N] = unsafe { execution_cache::load(self.hash) };\n        assert_eq(self.hash, hash_args_array(preimage));\n        assert_eq(self.hash, 0);\n\n        Deserialize::deserialize(preimage)\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/returns_hash.nr"},"73":{"source":"use crate::oracle::{\n    execution::{get_block_number, get_chain_id, get_contract_address, get_timestamp, get_version},\n    storage::storage_read,\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Packable};\n\npub struct UtilityContext {\n    block_number: u32,\n    timestamp: u64,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UtilityContext {\n    pub unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create a UtilityContext in an environment in which these oracles are not\n        // available.\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let contract_address = get_contract_address();\n        let version = get_version();\n        let chain_id = get_chain_id();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at(contract_address: AztecAddress) -> Self {\n        let block_number = get_block_number();\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub unconstrained fn at_historical(contract_address: AztecAddress, block_number: u32) -> Self {\n        let timestamp = get_timestamp();\n        let chain_id = get_chain_id();\n        let version = get_version();\n        Self { block_number, timestamp, contract_address, version, chain_id }\n    }\n\n    pub fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    pub fn timestamp(self) -> u64 {\n        self.timestamp\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    pub fn version(self) -> Field {\n        self.version\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    pub unconstrained fn raw_storage_read<let N: u32>(\n        self: Self,\n        storage_slot: Field,\n    ) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    pub unconstrained fn storage_read<T, let N: u32>(self, storage_slot: Field) -> T\n    where\n        T: Packable<N>,\n    {\n        T::unpack(self.raw_storage_read(storage_slot))\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/context/utility_context.nr"},"75":{"source":"use crate::{\n    context::{PrivateContext, PublicContext},\n    event::event_selector::EventSelector,\n    messages::{\n        logs::{event::to_encrypted_private_event_message, utils::prefix_with_tag},\n        offchain_messages::emit_offchain_message,\n    },\n    utils::remove_constraints::{remove_constraints, remove_constraints_if},\n};\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT,\n    hash::poseidon2_hash_with_separator,\n    traits::{Serialize, ToField},\n    utils::arrays::array_concat,\n};\n\npub struct PrivateLogContentConstraintsEnum {\n    /// The contents of the log are entirely unconstrained, and could have any values.\n    ///\n    /// Only use in scenarios where the recipient not receiving the message is an acceptable outcome (e.g. because the\n    /// sender is somehow motivated to ensure the recipient learns of it).\n    pub NO_CONSTRAINTS: u8,\n    /// The contents of the log and its encryption are constrained. The tag (and therefore whether the recipient is\n    /// actually able to find the message) is not.\n    ///\n    /// Only use in scenarios where the recipient not receiving the message is an acceptable outcome (e.g. because the\n    /// sender is somehow motivated to ensure the recipient learns of it).\n    // TODO(#14565): This variant requires for tagging to also be constrained, as it is otherwise useless.\n    pub CONSTRAINED_ENCRYPTION: u8,\n}\n\npub global PrivateLogContent: PrivateLogContentConstraintsEnum = PrivateLogContentConstraintsEnum {\n    NO_CONSTRAINTS: 1,\n    CONSTRAINED_ENCRYPTION: 2,\n    // TODO: add constrained tagging and constrained handshaking\n};\n\n/// Emits an event in a private log, encrypting it such that only `recipient` will learn of its contents. The log will\n/// be tagged using a shared secret between `sender` and `recipient`, so that `recipient` can efficiently find the log.\n///\n/// The `constraints` value determines what parts of this computation will be constrained. See the documentation for\n/// each value in `PrivateLogContentConstraintsEnum` to learn more about the different variants.\npub fn emit_event_in_private_log<Event, let N: u32>(\n    event: Event,\n    context: &mut PrivateContext,\n    sender: AztecAddress,\n    recipient: AztecAddress,\n    constraints: u8,\n)\nwhere\n    Event: EventInterface + Serialize<N>,\n{\n    // This function relies on `constraints` being a constant in order to reduce circuit constraints when unconstrained\n    // usage is requested. If `constraints` were a runtime value then performance would suffer.\n    assert_constant(constraints);\n\n    let (ciphertext, randomness) = remove_constraints_if(\n        constraints == PrivateLogContent.NO_CONSTRAINTS,\n        || to_encrypted_private_event_message(event, recipient),\n    );\n    let log_content = prefix_with_tag(ciphertext, sender, recipient);\n\n    // We generate a cryptographic commitment to the event to ensure its authenticity during out-of-band delivery.\n    // The nullifier tree is chosen over the note hash tree for this purpose since it provides a simpler mechanism\n    // - nullifiers require no nonce, and events, being non-spendable, don't need the guarantee that a \"spending\"\n    // nullifier can be computed.\n    // TODO(#11571): with decryption happening in Noir we can now use the Packable trait instead.\n    let serialized_event_with_randomness = array_concat([randomness], event.serialize());\n    let event_commitment = poseidon2_hash_with_separator(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n    context.push_nullifier(event_commitment);\n\n    context.emit_private_log(log_content, log_content.len());\n}\n\n/// Emits an event as an offchain message. Similar to private log emission but uses offchain message mechanism instead.\n///\n/// Unlike private log emission, encryption here is always unconstrained. This design choice stems from the nature of\n/// offchain messages - they lack guaranteed delivery, unlike private logs. Without delivery guarantees, smart\n/// contracts cannot make assumptions about a message being delivered, making constrained encryption unnecessary.\n/// However, message integrity remains protected through a cryptographic commitment stored in the nullifier tree,\n/// preventing tampering even in the absence of guaranteed delivery. See the description of the\n/// `messages::offchain_message::emit_offchain_message` function for more details on when a guaranteed delivery is\n/// valuable. If guaranteed delivery is required, the `emit_event_in_private_log` function should be used instead.\npub fn emit_event_as_offchain_message<Event, let N: u32>(\n    event: Event,\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n)\nwhere\n    Event: EventInterface + Serialize<N>,\n{\n    // Safety: as explained above, this function places no constraints on the content of the message.\n    let (message_ciphertext, randomness) =\n        unsafe { remove_constraints(|| to_encrypted_private_event_message(event, recipient)) };\n\n    // We generate a cryptographic commitment to the event to ensure its authenticity during out-of-band delivery. Note\n    // that the commitment is made from the (constrained) event content, and not the (unconstrained) ciphertext.\n    // The nullifier tree is chosen over the note hash tree for this purpose since it provides a simpler mechanism\n    // - nullifiers require no nonce, and events, being non-spendable, don't need the guarantee that a \"spending\"\n    // nullifier can be computed.\n    // TODO(#11571): with decryption happening in Noir we can now use the Packable trait instead.\n    let serialized_event_with_randomness = array_concat([randomness], event.serialize());\n    let event_commitment = poseidon2_hash_with_separator(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n    context.push_nullifier(event_commitment);\n\n    emit_offchain_message(message_ciphertext, recipient);\n}\n\npub fn emit_event_in_public_log<Event, let N: u32>(event: Event, context: &mut PublicContext)\nwhere\n    Event: EventInterface + Serialize<N>,\n{\n    let mut log_content = [0; N + 1];\n\n    let serialized_event = event.serialize();\n    for i in 0..serialized_event.len() {\n        log_content[i] = serialized_event[i];\n    }\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    log_content[serialized_event.len()] = Event::get_event_type_id().to_field();\n\n    context.emit_public_log(log_content);\n}\n\npub trait EventInterface {\n    fn get_event_type_id() -> EventSelector;\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/event/event_interface.nr"},"76":{"source":"use dep::protocol_types::{\n    hash::poseidon2_hash_bytes,\n    traits::{Deserialize, Empty, FromField, Serialize, ToField},\n};\n\npub struct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    // TODO(#2707): Consider making this a u64 as we already cast this to that when encoding the message. This would decrease\n    // the likelihood of collisions without any extra cost.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        EventSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/event/event_selector.nr"},"78":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n        GENERATOR_INDEX__FUNCTION_ARGS, GENERATOR_INDEX__MESSAGE_NULLIFIER,\n        GENERATOR_INDEX__PUBLIC_BYTECODE, GENERATOR_INDEX__PUBLIC_CALLDATA,\n        GENERATOR_INDEX__SECRET_HASH, MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS,\n    },\n    hash::{\n        poseidon2_hash_subarray, poseidon2_hash_with_separator, poseidon2_hash_with_separator_slice,\n        sha256_to_field,\n    },\n    point::Point,\n    traits::{Hash, ToField},\n};\n\npub use dep::protocol_types::hash::{compute_siloed_nullifier, pedersen_hash};\n\npub fn pedersen_commitment<let N: u32>(inputs: [Field; N], hash_index: u32) -> Point {\n    std::hash::pedersen_commitment_with_separator(inputs, hash_index)\n}\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    poseidon2_hash_with_separator([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_l1_to_l2_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field,\n    leaf_index: Field,\n) -> Field {\n    let mut hash_bytes = [0 as u8; 224];\n    let sender_bytes: [u8; 32] = sender.to_field().to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n    let recipient_bytes: [u8; 32] = recipient.to_field().to_be_bytes();\n    let version_bytes: [u8; 32] = version.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let secret_hash_bytes: [u8; 32] = secret_hash.to_be_bytes();\n    let leaf_index_bytes: [u8; 32] = leaf_index.to_be_bytes();\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n        hash_bytes[i + 192] = leaf_index_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret\npub fn compute_l1_to_l2_message_nullifier(message_hash: Field, secret: Field) -> Field {\n    poseidon2_hash_with_separator([message_hash, secret], GENERATOR_INDEX__MESSAGE_NULLIFIER)\n}\n\npub struct ArgsHasher {\n    pub fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<let N: u32>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\n// Computes the hash of input arguments or return values for private functions, or for authwit creation.\npub fn hash_args_array<let N: u32>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Same as `hash_args_array`, but takes a slice instead of an array.\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(args, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Computes the hash of calldata for public functions.\npub fn hash_calldata_array<let N: u32>(calldata: [Field; N]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n// Same as `hash_calldata_array`, but takes a slice instead of an array.\npub fn hash_calldata(calldata: [Field]) -> Field {\n    if calldata.len() == 0 {\n        0\n    } else {\n        poseidon2_hash_with_separator_slice(calldata, GENERATOR_INDEX__PUBLIC_CALLDATA)\n    }\n}\n\n/**\n * Computes the public bytecode commitment for a contract class.\n * The commitment is `hash([separator, ...bytecode])` where bytecode omits the length prefix present\n * in `packed_bytecode`.\n *\n * @param packed_bytecode - The packed bytecode of the contract class. 0th word is the length in bytes.\n *    packed_bytecode is mutable so that we can avoid copying the array to construct one starting with\n *    separator instead of length.\n * @returns The public bytecode commitment.\n */\npub fn compute_public_bytecode_commitment(\n    mut packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS],\n) -> Field {\n    // First field element contains the length of the bytecode\n    let bytecode_length_in_bytes: u32 = packed_public_bytecode[0] as u32;\n    let bytecode_length_in_fields: u32 =\n        (bytecode_length_in_bytes / 31) + (bytecode_length_in_bytes % 31 != 0) as u32;\n    // Don't allow empty public bytecode.\n    // AVM doesn't handle execution of contracts that exist with empty bytecode.\n    assert(bytecode_length_in_fields != 0);\n    assert(bytecode_length_in_fields < MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS);\n\n    // Packed_bytecode's 0th entry is the length. Replace it with separator before hashing.\n    let separator = GENERATOR_INDEX__PUBLIC_BYTECODE.to_field();\n    packed_public_bytecode[0] = separator;\n    // +1 to length to account for the separator\n    let nonzero_length = bytecode_length_in_fields + 1;\n\n    poseidon2_hash_subarray(packed_public_bytecode, nonzero_length)\n    // NOTE: we use poseidon2_hash_subarray here because we want to hash the bytecode only up to\n    // its nonzero length. We do NOT want to include a `1` at the end to indicate \"variable length\",\n    // and we want to enforce that all trailing elements are zero.\n}\n\n#[test]\nunconstrained fn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..100 {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    dep::std::println(hash);\n    assert(hash == 0x19b0d74feb06ebde19edd85a28986c97063e84b3b351a8b666c7cac963ce655f);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/hash.nr"},"93":{"source":"use dep::protocol_types::{\n    address::aztec_address::AztecAddress, point::Point, scalar::Scalar, traits::FromField,\n};\nuse std::{embedded_curve_ops::multi_scalar_mul, ops::Neg};\n\n/// Computes a standard ecdh shared secret: [secret] * public_key = shared_secret.\n/// The input secret is known only to one party. The output shared secret is derivable\n/// by both parties, through this function.\n/// E.g.:\n/// Epk = esk * G // ephemeral keypair\n/// Pk = sk * G // recipient keypair\n/// Shared secret S = esk * Pk = sk * Epk // see how this function can be called with two different sets of inputs, depending on which secret the caller knows (either esk or sk)?\n// See also: https://en.wikipedia.org/wiki/Elliptic-curve_Diffie%E2%80%93Hellman\npub fn derive_ecdh_shared_secret(secret: Scalar, public_key: Point) -> Point {\n    let shared_secret = multi_scalar_mul([public_key], [secret]);\n    shared_secret\n}\n\n/// Computes a standard ecdh shared secret using the address public key of the given address:\n/// [ephemeral_secret] * recipient_address_public_key = shared_secret.\n/// The intention is that the _creator_ of a shared secret would call this function,\n/// given the address of their intended recipient.\npub fn derive_ecdh_shared_secret_using_aztec_address(\n    ephemeral_secret: Scalar,\n    recipient_address: AztecAddress,\n) -> Point {\n    derive_ecdh_shared_secret(ephemeral_secret, recipient_address.to_address_point().inner)\n}\n\n#[test]\nunconstrained fn test_consistency_with_typescript() {\n    let secret = Scalar {\n        lo: 0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        hi: 0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06,\n    };\n    let point = Point {\n        x: 0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        y: 0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        is_infinite: false,\n    };\n\n    let shared_secret = derive_ecdh_shared_secret(secret, point);\n\n    // This is just pasted from a test run.\n    // The original typescript code from which this could be generated seems to have been deleted by someone, and soon the typescript code for encryption and decryption won't be needed, so this will have to do.\n    let hard_coded_shared_secret = Point {\n        x: 0x15d55a5b3b2caa6a6207f313f05c5113deba5da9927d6421bcaa164822b911bc,\n        y: 0x0974c3d0825031ae933243d653ebb1a0b08b90ee7f228f94c5c74739ea3c871e,\n        is_infinite: false,\n    };\n    assert_eq(shared_secret, hard_coded_shared_secret);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let shared_secret = derive_ecdh_shared_secret(secret_a, pk_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n\n#[test]\nunconstrained fn test_shared_secret_computation_from_address_in_both_directions() {\n    let secret_a = Scalar { lo: 0x1234, hi: 0x2345 };\n    let secret_b = Scalar { lo: 0x3456, hi: 0x4567 };\n\n    let mut pk_a = std::embedded_curve_ops::fixed_base_scalar_mul(secret_a);\n    let mut pk_b = std::embedded_curve_ops::fixed_base_scalar_mul(secret_b);\n\n    let address_b = AztecAddress::from_field(pk_b.x);\n\n    // We were lazy in deriving the secret keys, and didn't check the resulting y-coordinates\n    // of the pk_a or pk_b to be less than half the field modulus.\n    // If needed, we negate the pk's so that they yield valid address points.\n    // (We could also have negated the secrets, but there's no negate method for\n    // EmbeddedCurvesScalar).\n    pk_a = if (AztecAddress::from_field(pk_a.x).to_address_point().inner == pk_a) {\n        pk_a\n    } else {\n        pk_a.neg()\n    };\n    pk_b = if (address_b.to_address_point().inner == pk_b) {\n        pk_b\n    } else {\n        pk_b.neg()\n    };\n\n    let shared_secret = derive_ecdh_shared_secret_using_aztec_address(secret_a, address_b);\n    let shared_secret_alt = derive_ecdh_shared_secret(secret_b, pk_a);\n\n    assert_eq(shared_secret, shared_secret_alt);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/keys/ecdh_shared_secret.nr"},"94":{"source":"use std::embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul};\n\nuse dep::protocol_types::{point::Point, scalar::Scalar};\n\nuse crate::oracle::random::random;\n\npub fn generate_ephemeral_key_pair() -> (Scalar, Point) {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n\n    // Safety: we use the randomness to preserve the privacy of both the sender and recipient via encryption, so a\n    // malicious sender could use non-random values to reveal the plaintext. But they already know it themselves anyway,\n    // and so the recipient already trusts them to not disclose this information. We can therefore assume that the\n    // sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#12757): compute the key pair without constraining eph_sk twice (once in from_field, once in the black box\n    // called by fixed_base_scalar_mul).\n    let eph_sk = EmbeddedCurveScalar::from_field(randomness);\n    let eph_pk = fixed_base_scalar_mul(eph_sk);\n\n    (eph_sk, eph_pk)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/keys/ephemeral.nr"},"95":{"source":"use crate::{\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX},\n    oracle::{\n        key_validation_request::get_key_validation_request,\n        keys::get_public_keys_and_partial_address,\n    },\n};\nuse dep::protocol_types::{address::AztecAddress, public_keys::PublicKeys};\n\nmod test;\n\npub unconstrained fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n\n// A helper function that gets app-siloed outgoing viewing key for a given `ovpk_m_hash`. This function is used\n// in unconstrained contexts only - when computing unconstrained note logs. The safe alternative is `request_ovsk_app`\n// function defined on `PrivateContext`.\npub unconstrained fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n    get_key_validation_request(ovpk_m_hash, OUTGOING_INDEX).sk_app\n}\n\n// Returns all public keys for a given account, applying proper constraints to the context. We read all\n// keys at once since the constraints for reading them all are actually fewer than if we read them one at a time - any\n// read keys that are not required by the caller can simply be discarded.\npub fn get_public_keys(account: AztecAddress) -> PublicKeys {\n    // Safety: Public keys are constrained by showing their inclusion in the address's preimage.\n    let (public_keys, partial_address) = unsafe { get_public_keys_and_partial_address(account) };\n    assert_eq(\n        account,\n        AztecAddress::compute(public_keys, partial_address),\n        \"Invalid public keys hint for address\",\n    );\n\n    public_keys\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/keys/getters/mod.nr"},"99":{"source":"use crate::macros::utils::{\n    compute_struct_selector, derive_serialize_if_not_implemented, get_trait_impl_method,\n};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\npub comptime mut global AUTHWIT_TYPES: UHashMap<Field, TypeDefinition, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\ncomptime fn register_authwit(authwit_selector: Field, authwit_struct: TypeDefinition) {\n    if AUTHWIT_TYPES.contains_key(authwit_selector) {\n        let existing_authwit = AUTHWIT_TYPES.get(authwit_selector).unwrap().name();\n        let authwit_name = authwit_struct.name();\n        panic(\n            f\"Authwit selector collision detected between authwits '{authwit_name}' and '{existing_authwit}'\",\n        );\n    }\n    AUTHWIT_TYPES.insert(authwit_selector, authwit_struct);\n}\n\npub comptime fn generate_auhtwit_interface_and_get_selector(s: TypeDefinition) -> (Quoted, Field) {\n    let name = s.name();\n\n    let authwit_selector = compute_struct_selector(\n        s,\n        quote { crate::authwit::authwit_selector::AuthwitSelector::from_signature },\n    );\n\n    let from_field = get_trait_impl_method(\n        quote { crate::authwit::authwit_selector::AuthwitSelector }.as_type(),\n        quote { crate::protocol_types::traits::FromField },\n        quote { from_field },\n    );\n\n    let authwit_interface = quote { crate::authwit::authwit_interface::AuthwitInterface };\n    let authwit_selector_type = quote { crate::authwit::authwit_selector::AuthwitSelector };\n\n    (\n        quote {\n        impl $authwit_interface for $name {\n\n            fn get_authwit_selector() -> $authwit_selector_type {\n                $from_field($authwit_selector)\n            }\n\n            fn emit_as_offchain_effect_and_get_hash(self) -> Field {\n                let inner_hash = compute_inner_authwit_hash(protocol_types::traits::Serialize::serialize(self));\n                crate::oracle::offchain_effect::emit_offchain_effect([$authwit_selector, inner_hash]);\n                inner_hash\n            }\n        }\n    },\n        authwit_selector,\n    )\n}\n\npub comptime fn authwit(s: TypeDefinition) -> Quoted {\n    let (authwit_interface_impl, authwit_selector) = generate_auhtwit_interface_and_get_selector(s);\n    register_authwit(authwit_selector, s);\n\n    let serialize_impl = derive_serialize_if_not_implemented(s);\n\n    quote {\n        $authwit_interface_impl\n        $serialize_impl\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/authwits.nr"},"100":{"source":"use crate::{\n    macros::{\n        authwits::AUTHWIT_TYPES,\n        dispatch::generate_public_dispatch,\n        functions::{stub_registry, utils::check_each_fn_macroified},\n        notes::{generate_note_export, NOTES},\n        storage::STORAGE_LAYOUT_NAME,\n        utils::{get_trait_impl_method, module_has_storage},\n    },\n    messages::discovery::private_notes::MAX_NOTE_PACKED_LEN,\n};\n\n/// Marks a contract as an Aztec contract, generating the interfaces for its functions and notes, as well as injecting\n/// the `sync_private_state` utility function.\n/// Note: This is a module annotation, so the returned quote gets injected inside the module (contract) itself.\npub comptime fn aztec(m: Module) -> Quoted {\n    let interface = generate_contract_interface(m);\n\n    // Functions that don't have #[private], #[public], #[utility], #[contract_library_method], or #[test] are not\n    // allowed in contracts.\n    check_each_fn_macroified(m);\n\n    let contract_library_method_compute_note_hash_and_nullifier =\n        generate_contract_library_method_compute_note_hash_and_nullifier();\n    let note_exports = generate_note_exports();\n    let public_dispatch = generate_public_dispatch(m);\n    let sync_private_state = generate_sync_private_state();\n    let process_message = generate_process_message();\n    generate_authwit_exports();\n\n    quote {\n        $note_exports\n        $interface\n        $contract_library_method_compute_note_hash_and_nullifier\n        $public_dispatch\n        $sync_private_state\n        $process_message\n    }\n}\n\ncomptime fn generate_contract_interface(m: Module) -> Quoted {\n    let module_name = m.name();\n    let contract_stubs = stub_registry::get(m);\n    let fn_stubs_quote = if contract_stubs.is_some() {\n        contract_stubs.unwrap().join(quote {})\n    } else {\n        quote {}\n    };\n\n    let has_storage_layout = module_has_storage(m) & STORAGE_LAYOUT_NAME.get(m).is_some();\n    let storage_layout_getter = if has_storage_layout {\n        let storage_layout_name = STORAGE_LAYOUT_NAME.get(m).unwrap();\n        quote {\n            pub fn storage_layout() -> StorageLayoutFields {\n                $storage_layout_name.fields\n            }\n        }\n    } else {\n        quote {}\n    };\n\n    let library_storage_layout_getter = if has_storage_layout {\n        quote {\n            #[contract_library_method]\n            $storage_layout_getter\n        }\n    } else {\n        quote {}\n    };\n\n    quote {\n        pub struct $module_name {\n            pub target_contract: dep::aztec::protocol_types::address::AztecAddress\n        }\n\n        impl $module_name {\n            $fn_stubs_quote\n\n            pub fn at(\n                addr: aztec::protocol_types::address::AztecAddress\n            ) -> Self {\n                Self { target_contract: addr }\n            }\n\n            pub fn interface() -> Self {\n                Self { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n            }\n\n            $storage_layout_getter\n        }\n\n        #[contract_library_method]\n        pub fn at(\n            addr: aztec::protocol_types::address::AztecAddress\n        ) -> $module_name {\n            $module_name { target_contract: addr }\n        }\n\n        #[contract_library_method]\n        pub fn interface() -> $module_name {\n            $module_name { target_contract: aztec::protocol_types::address::AztecAddress::zero() }\n        }\n\n        $library_storage_layout_getter\n\n    }\n}\n\n/// Generates a contract library method called `_compute_note_hash_and_nullifier` which is used for note\n/// discovery (to create the `aztec::messages::discovery::ComputeNoteHashAndNullifier` function) and to implement the\n/// `compute_note_hash_and_nullifier` unconstrained contract function.\ncomptime fn generate_contract_library_method_compute_note_hash_and_nullifier() -> Quoted {\n    let notes = NOTES.entries();\n\n    if notes.len() > 0 {\n        let max_note_packed_len = notes.fold(\n            0,\n            |acc, (_, (_, len, _, _)): (Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]))| {\n                if len > acc {\n                    len\n                } else {\n                    acc\n                }\n            },\n        );\n\n        if max_note_packed_len > MAX_NOTE_PACKED_LEN {\n            panic(\n                f\"One of the notes has packed len {max_note_packed_len} but the maximum is {MAX_NOTE_PACKED_LEN}\",\n            );\n        }\n\n        // Contracts that do define notes produce an if-else chain where `note_type_id` is matched against the\n        // `get_note_type_id()` function of each note type that we know of, in order to identify the note type. Once we\n        // know it we call we correct `unpack` method from the `Packable` trait to obtain the underlying note type, and\n        // compute the note hash (non-siloed) and inner nullifier (also non-siloed).\n\n        let mut if_note_type_id_match_statements_list = &[];\n        for i in 0..notes.len() {\n            let (typ, (_, packed_note_length, _, _)) = notes[i];\n\n            let get_note_type_id = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteType },\n                quote { get_id },\n            );\n            let unpack = get_trait_impl_method(\n                typ,\n                quote { crate::protocol_types::traits::Packable<_> },\n                quote { unpack },\n            );\n\n            let compute_note_hash = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_note_hash },\n            );\n\n            let compute_nullifier_unconstrained = get_trait_impl_method(\n                typ,\n                quote { crate::note::note_interface::NoteHash },\n                quote { compute_nullifier_unconstrained },\n            );\n\n            let if_or_else_if = if i == 0 {\n                quote { if }\n            } else {\n                quote { else if }\n            };\n\n            if_note_type_id_match_statements_list = if_note_type_id_match_statements_list.push_back(\n                quote {\n                    $if_or_else_if note_type_id == $get_note_type_id() {\n                        // As an extra safety check we make sure that the packed_note BoundedVec has the expected\n                        // length, since we're about to interpret it's raw storage as a fixed-size array by calling the\n                        // unpack function on it.\n                        let expected_len = $packed_note_length;\n                        let actual_len = packed_note.len();\n                        assert(\n                            actual_len == expected_len,\n                            f\"Expected packed note of length {expected_len} but got {actual_len} for note type id {note_type_id}\"\n                        );\n\n                        let note = $unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n\n                        let note_hash = $compute_note_hash(note, storage_slot);\n    \n                        // The message discovery process finds settled notes, that is, notes that were created in prior\n                        // transactions and are therefore already part of the note hash tree. We therefore compute the\n                        // nullification note hash by treating the note as a settled note with the provided note nonce.\n                        let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n                            aztec::note::retrieved_note::RetrievedNote{ \n                                note, \n                                contract_address, \n                                metadata: aztec::note::note_metadata::SettledNoteMetadata::new(note_nonce).into()\n                            }, \n                            storage_slot,\n                        );\n\n                        let inner_nullifier = $compute_nullifier_unconstrained(note, note_hash_for_nullify);\n\n                        Option::some(\n                            aztec::messages::discovery::NoteHashAndNullifier {\n                                note_hash, inner_nullifier\n                            }\n                        )\n                    }\n                },\n            );\n        }\n\n        let if_note_type_id_match_statements = if_note_type_id_match_statements_list.join(quote {});\n\n        quote {\n            /// Unpacks an array into a note corresponding to `note_type_id` and then computes its note hash\n            /// (non-siloed) and inner nullifier (non-siloed) assuming the note has been inserted into the note hash\n            /// tree with `note_nonce`.\n            ///\n            /// The signature of this function notably matches the `aztec::messages::discovery::ComputeNoteHashAndNullifier` type,\n            /// and so it can be used to call functions from that module such as `discover_new_messages`, \n            /// `do_process_log` and `attempt_note_discovery`.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                storage_slot: Field,\n                note_type_id: Field,\n                contract_address: aztec::protocol_types::address::AztecAddress,\n                note_nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                $if_note_type_id_match_statements\n                else {\n                    Option::none()\n                }\n            }\n        }\n    } else {\n        // Contracts with no notes still implement this function to avoid having special-casing, the implementation\n        // simply throws immediately.\n        quote {\n            /// This contract does not use private notes, so this function should never be called as it will\n            /// unconditionally fail.\n            ///\n            /// This function is automatically injected by the `#[aztec]` macro.\n            #[contract_library_method]\n            unconstrained fn _compute_note_hash_and_nullifier(\n                _packed_note: BoundedVec<Field, aztec::messages::discovery::private_notes::MAX_NOTE_PACKED_LEN>,\n                _storage_slot: Field,\n                _note_type_id: Field,\n                _contract_address: aztec::protocol_types::address::AztecAddress,\n                _nonce: Field,\n            ) -> Option<aztec::messages::discovery::NoteHashAndNullifier> {\n                panic(f\"This contract does not use private notes\")\n            }\n        }\n    }\n}\n\ncomptime fn generate_authwit_exports() {\n    let authwits = AUTHWIT_TYPES.values();\n    authwits.for_each(|(s): TypeDefinition| { s.add_attribute(\"abi(authwits)\"); });\n}\n\ncomptime fn generate_note_exports() -> Quoted {\n    let notes = NOTES.values();\n    // Second value in each tuple is `note_packed_len` and that is ignored here because it's only used when\n    // generating partial note helper functions.\n    notes\n        .map(|(s, _, note_type_id, fields): (TypeDefinition, u32, Field, [(Quoted, u32, bool)])| {\n            generate_note_export(s, note_type_id, fields)\n        })\n        .join(quote {})\n}\n\ncomptime fn generate_sync_private_state() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // All we need to do here is trigger message discovery, but this is already done by the #[utility] macro - we don't\n    // need to do anything extra.\n    quote {\n        #[$utility]\n        unconstrained fn sync_private_state() {\n        }\n    }\n}\n\ncomptime fn generate_process_message() -> Quoted {\n    // We obtain the `utility` function on the next line instead of directly doing\n    // `#[aztec::macros::functions::utility]` in the returned quote because the latter would result in the function\n    // attribute having the full path in the ABI. This is undesirable because we use the information in the ABI only\n    // to determine whether a function is `private`, `public`, or `utility`.\n    let utility = crate::macros::functions::utility;\n\n    // TODO(#15012): Here we use PRIVATE_LOG_CIPHERTEXT_LEN for message ciphertext length. Fix message vs log naming.\n    quote {\n        #[$utility]\n        unconstrained fn process_message(\n            message_ciphertext: BoundedVec<Field, aztec::protocol_types::constants::PRIVATE_LOG_CIPHERTEXT_LEN>,\n            message_context: aztec::messages::processing::message_context::MessageContext,\n        ) {\n            aztec::messages::discovery::process_message::do_process_message(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n                message_ciphertext,\n                message_context,\n            );\n        }\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/aztec.nr"},"101":{"source":"use super::utils::{compute_fn_selector, size_in_fields};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault, panic};\n\n/// Returns an `fn public_dispatch(...)` function for the given module that's assumed to be an Aztec contract.\npub comptime fn generate_public_dispatch(m: Module) -> Quoted {\n    let functions = m.functions();\n    let functions =\n        functions.filter(|function: FunctionDefinition| function.has_named_attribute(\"public\"));\n\n    let unit = get_type::<()>();\n\n    let seen_selectors =\n        &mut UHashMap::<Field, Quoted, BuildHasherDefault<Poseidon2Hasher>>::default();\n\n    let ifs = functions.map(|function: FunctionDefinition| {\n        let parameters = function.parameters();\n        let return_type = function.return_type();\n\n        let selector: Field = compute_fn_selector(function);\n        let fn_name = function.name();\n\n        // Since function selectors are computed as the first 4 bytes of the hash of the function signature,\n        // it's possible to have collisions. With the following check, we ensure it doesn't happen within\n        // the same contract.\n        if seen_selectors.contains_key(selector) {\n            let existing_fn = seen_selectors.get(selector).unwrap();\n            panic(\n                f\"Public function selector collision detected between functions '{fn_name}' and '{existing_fn}'\",\n            );\n        }\n        seen_selectors.insert(selector, fn_name);\n\n        let mut parameters_size = 0;\n        for param in parameters {\n            parameters_size += size_in_fields(param.1);\n        }\n\n        let initial_read = if parameters.len() == 0 {\n            quote {}\n        } else {\n            // The initial calldata_copy offset is 1 to skip the Field selector\n            // The expected calldata is the serialization of\n            // - FunctionSelector: the selector of the function intended to dispatch\n            // - Parameters: the parameters of the function intended to dispatch\n            // That is, exactly what is expected for a call to the target function,\n            // but with a selector added at the beginning.\n            quote {\n                let input_calldata: [Field; $parameters_size] = dep::aztec::context::public_context::calldata_copy(1, $parameters_size);\n                let mut reader = dep::aztec::protocol_types::utils::reader::Reader::new(input_calldata);\n            }\n        };\n\n        let parameter_index: &mut u32 = &mut 0;\n        let reads = parameters.map(|param: (Quoted, Type)| {\n            let parameter_index_value = *parameter_index;\n            let param_name = f\"arg{parameter_index_value}\".quoted_contents();\n            let param_type = param.1;\n            let read = quote {\n                let $param_name: $param_type = reader.read_struct(dep::aztec::protocol_types::traits::Deserialize::deserialize);\n            };\n            *parameter_index += 1;\n            quote { $read }\n        });\n        let read = reads.join(quote { });\n\n        let mut args = &[];\n        for parameter_index in 0..parameters.len() {\n            let param_name = f\"arg{parameter_index}\".quoted_contents();\n            args = args.push_back(quote { $param_name });\n        }\n\n        let args = args.join(quote { , });\n        // name of the function is assigned just before the call so debug metadata doesn't span most of this macro when figuring out where the call comes from.\n        let name = function.name();\n        let call = quote { $name($args) };\n\n        let return_code = if return_type == unit {\n            quote {\n                $call;\n                // Force early return.\n                dep::aztec::context::public_context::avm_return([]);\n            }\n        } else {\n            quote {\n                let return_value = dep::aztec::protocol_types::traits::Serialize::serialize($call);\n                dep::aztec::context::public_context::avm_return(return_value.as_slice());\n            }\n        };\n\n        let if_ = quote {\n            if selector == $selector {\n                $initial_read\n                $read\n                $return_code\n            }\n        };\n        if_\n    });\n\n    if ifs.len() == 0 {\n        // No dispatch function if there are no public functions\n        quote {}\n    } else {\n        let ifs = ifs.push_back(quote { panic(f\"Unknown selector {selector}\") });\n        let dispatch = ifs.join(quote {  });\n\n        let body = quote {\n            // We mark this as public because our whole system depends on public\n            // functions having this attribute. However, the public MACRO will\n            // handle the public_dispatch function specially and do nothing.\n            #[public]\n            pub unconstrained fn public_dispatch(selector: Field) {\n                $dispatch\n            }\n        };\n\n        body\n    }\n}\n\ncomptime fn get_type<T>() -> Type {\n    let t: T = std::mem::zeroed();\n    std::meta::type_of(t)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/dispatch.nr"},"104":{"source":"use crate::macros::utils::{\n    add_to_field_array, AsStrQuote, compute_fn_selector, is_fn_private, is_fn_public, is_fn_view,\n    size_in_fields,\n};\nuse std::meta::{type_of, unquote};\n\ncomptime global FROM_FIELD: TypedExpr = {\n    let from_field_trait = quote { protocol_types::traits::FromField }.as_trait_constraint();\n    let function_selector_typ =\n        quote { protocol_types::abis::function_selector::FunctionSelector }.as_type();\n    function_selector_typ.get_trait_impl(from_field_trait).unwrap().methods().filter(|m| {\n        m.name() == quote { from_field }\n    })[0]\n        .as_typed_expr()\n};\n\ncomptime global SERIALIZED_ARGS_NAME: Quoted = quote { serialized_args };\n\npub comptime fn stub_fn(f: FunctionDefinition) -> Quoted {\n    let is_static_call = is_fn_view(f);\n    let is_void = f.return_type() == type_of(());\n\n    if is_fn_private(f) {\n        if is_static_call {\n            if is_void {\n                create_private_static_void_stub(f)\n            } else {\n                create_private_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_private_void_stub(f)\n            } else {\n                create_private_stub(f)\n            }\n        }\n    } else if is_fn_public(f) {\n        if is_static_call {\n            if is_void {\n                create_public_static_void_stub(f)\n            } else {\n                create_public_static_stub(f)\n            }\n        } else {\n            if is_void {\n                create_public_void_stub(f)\n            } else {\n                create_public_stub(f)\n            }\n        }\n    } else {\n        if is_void {\n            create_utility_void_stub(f)\n        } else {\n            create_utility_stub(f)\n        }\n    }\n}\n\n/// Utility function creating stubs used by all the stub functions in this file.\ncomptime fn create_stub_base(\n    f: FunctionDefinition,\n) -> (Quoted, Quoted, Quoted, Quoted, u32, Field) {\n    let fn_name = f.name();\n    let fn_parameters = f.parameters();\n    let fn_parameters_list =\n        fn_parameters.map(|(name, typ): (Quoted, Type)| quote { $name: $typ }).join(quote {,});\n    let params_num_fields =\n        fn_parameters.fold(0, |acc, (_, typ)| acc + crate::macros::utils::size_in_fields(typ));\n\n    let serialized_args_index_name = quote { serialized_args_index };\n    // Example of what the fold(...) below will generate for `target_address` and `fee_juice_limit_per_tx` function\n    // parameters:\n    // ```\n    // let mut serialized_args = [0;2];\n    // let mut serialized_args_index = 0;\n    // let target_address_serialized = aztec::protocol_types::traits::Serialize::serialize(target_address)\n    // for i in 0..target_address_serialized.len() {\n    //    serialized_args[serialized_args_index] = target_address_serialized[i];\n    //    serialized_args_index += 1;\n    // }\n    // serialized_args[serialized_args_index] = fee_juice_limit_per_tx as Field\n    // serialized_args_index += 1;\n    // ```\n    let serialized_args_array_construction = fn_parameters.fold(\n        quote {\n            let mut $SERIALIZED_ARGS_NAME = [0; $params_num_fields];\n            let mut $serialized_args_index_name: u32 = 0;\n        },\n        |args, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let arg_to_append =\n                add_to_field_array(SERIALIZED_ARGS_NAME, serialized_args_index_name, name, typ);\n            quote {\n                $args\n                $arg_to_append\n            }\n        },\n    );\n\n    let (fn_name_str, _) = fn_name.as_str_quote();\n    let fn_name_len: u32 = unquote!(quote { $fn_name_str.as_bytes().len()});\n    let fn_selector: Field = compute_fn_selector(f);\n\n    (\n        fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len,\n        fn_selector,\n    )\n}\n\ncomptime fn create_private_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_array_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_array_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_private_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_private_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PrivateStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_public_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_public_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n                false\n            )\n        }\n    }\n}\n\ncomptime fn create_public_static_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    quote {\n        pub fn $fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::PublicStaticVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                serialized_args\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n    let fn_return_type = f.return_type();\n    let size = size_in_fields(fn_return_type);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityCallInterface<$fn_name_len, $fn_return_type, $size> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n\ncomptime fn create_utility_void_stub(f: FunctionDefinition) -> Quoted {\n    let (fn_name, fn_parameters_list, serialized_args_slice_construction, fn_name_str, fn_name_len, fn_selector) =\n        create_stub_base(f);\n\n    // This is here because utility function call interfaces can only be used within TXe tests.\n    let modified_fn_name = f\"_experimental_{fn_name}\".quoted_contents();\n\n    quote {\n        pub fn $modified_fn_name(self, $fn_parameters_list) -> dep::aztec::context::call_interfaces::UtilityVoidCallInterface<$fn_name_len, (), 0> {\n            $serialized_args_slice_construction\n            let selector = $FROM_FIELD($fn_selector);\n            dep::aztec::context::call_interfaces::UtilityVoidCallInterface::new(\n                self.target_contract,\n                selector,\n                $fn_name_str,\n                $SERIALIZED_ARGS_NAME,\n            )\n        }\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/functions/call_interface_stubs.nr"},"105":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::GENERATOR_INDEX__CONSTRUCTOR, hash::poseidon2_hash_with_separator, traits::ToField,\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext},\n    oracle::get_contract_instance::{\n        get_contract_instance, get_contract_instance_deployer_avm,\n        get_contract_instance_initialization_hash_avm,\n    },\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier =\n        compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    context.push_nullifier_read_request(init_nullifier);\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let deployer = get_contract_instance_deployer_avm(address).unwrap();\n    let initialization_hash = get_contract_instance_initialization_hash_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (deployer.is_zero()) | (deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()),\n        \"Initializer address is not the contract deployer\",\n    );\n}\n\n/// This function is not only used in macros but it's also used by external people to check that an instance has been\n/// initialized with the correct constructor arguments. Don't hide this unless you implement factory functionality.\npub fn compute_initialization_hash(\n    init_selector: FunctionSelector,\n    init_args_hash: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR,\n    )\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/functions/initialization_utils.nr"},"108":{"source":"use crate::macros::{\n    functions::{abi_export::create_fn_abi_export, call_interface_stubs::stub_fn, stub_registry},\n    notes::NOTES,\n    utils::{\n        add_to_hasher, fn_has_noinitcheck, get_fn_visibility, is_fn_contract_library_method,\n        is_fn_initializer, is_fn_internal, is_fn_private, is_fn_public, is_fn_test, is_fn_utility,\n        is_fn_view, modify_fn_body, module_has_initializer, module_has_storage,\n    },\n};\nuse protocol_types::meta::generate_serialize_to_fields;\nuse std::meta::type_of;\n\npub(crate) comptime fn transform_private(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[private] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Private functions undergo a lot of transformations from their Aztec.nr form into a circuit that can be fed to the\n    // Private Kernel Circuit.\n    // First we change the function signature so that it also receives `PrivateContextInputs`, which contain information\n    // about the execution context (e.g. the caller).\n    let original_params = f.parameters();\n    f.set_parameters(&[(\n        quote { inputs },\n        quote { crate::context::inputs::private_context_inputs::PrivateContextInputs }.as_type(),\n    )]\n        .append(original_params));\n\n    let mut body = f.body().as_block().unwrap();\n\n    // The original params are hashed and passed to the `context` object, so that the kernel can verify we've received\n    // the correct values.\n    // TODO: Optimize args_hasher for small number of arguments\n    let args_hasher_name = quote { args_hasher };\n    let args_hasher = original_params.fold(\n        quote {\n            let mut $args_hasher_name = dep::aztec::hash::ArgsHasher::new();\n        },\n        |args_hasher, param: (Quoted, Type)| {\n            let (name, typ) = param;\n            let appended_arg = add_to_hasher(args_hasher_name, name, typ);\n            quote {\n                $args_hasher\n                $appended_arg\n            }\n        },\n    );\n\n    let context_creation = quote {\n        let mut context = dep::aztec::context::private_context::PrivateContext::new(inputs, dep::aztec::protocol_types::traits::Hash::hash($args_hasher_name));\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !is_fn_initializer(f) & !fn_has_noinitcheck(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    // All private functions perform message discovery, since they may need to access notes. This is slightly\n    // inefficient and could be improved by only doing it once we actually attempt to read any. Note that the message\n    // discovery call syncs private events as well. We do not sync those here if there are no notes because we don't\n    // have an API that would access events from private functions.\n    let message_discovery_call = if NOTES.len() > 0 {\n        create_message_discovery_call()\n    } else {\n        quote {}\n    };\n\n    // Finally, we need to change the return type to be `PrivateCircuitPublicInputs`, which is what the Private Kernel\n    // circuit expects.\n    let return_value_var_name = quote { macro__returned__values };\n\n    let return_value_type = f.return_type();\n    let return_value = if body.len() == 0 {\n        quote {}\n    } else if return_value_type != type_of(()) {\n        // The original return value is passed to a second args hasher which the context receives.\n        let (body_without_return, last_body_expr) = body.pop_back();\n        let return_value = last_body_expr.quoted();\n        let return_value_assignment =\n            quote { let $return_value_var_name: $return_value_type = $return_value; };\n        let return_hasher_name = quote { return_hasher };\n        let return_value_into_hasher =\n            add_to_hasher(return_hasher_name, return_value_var_name, return_value_type);\n\n        body = body_without_return;\n\n        quote {\n            let mut $return_hasher_name = dep::aztec::hash::ArgsHasher::new();\n            $return_value_assignment\n            $return_value_into_hasher\n            context.set_return_hash($return_hasher_name);\n        }\n    } else {\n        let (body_without_return, last_body_expr) = body.pop_back();\n        if !last_body_expr.has_semicolon()\n            & last_body_expr.as_for().is_none()\n            & last_body_expr.as_assert().is_none()\n            & last_body_expr.as_for_range().is_none()\n            & last_body_expr.as_assert_eq().is_none()\n            & last_body_expr.as_let().is_none() {\n            let unused_return_value_name = f\"_{return_value_var_name}\".quoted_contents();\n            body = body_without_return.push_back(\n                quote { let $unused_return_value_name = $last_body_expr; }.as_expr().unwrap(),\n            );\n        }\n        quote {}\n    };\n\n    let context_finish = quote { context.finish() };\n\n    let to_prepend = quote {\n        $args_hasher\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n        $message_discovery_call\n    };\n\n    let to_append = quote {\n        $return_value\n        $mark_as_initialized\n        $context_finish\n    };\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n    f.set_return_type(\n        quote { dep::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs }\n            .as_type(),\n    );\n    f.set_return_data();\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_public(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // If a function is further modified as unconstrained, we throw an error\n    if f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[public] but marked as unconstrained, remove unconstrained keyword\",\n        );\n    }\n\n    let module_has_initializer = module_has_initializer(f.module());\n    let module_has_storage = module_has_storage(f.module());\n\n    // Public functions undergo a lot of transformations from their Aztec.nr form.\n    let original_params = f.parameters();\n    let args_len = original_params\n        .map(|(name, typ): (Quoted, Type)| {\n            generate_serialize_to_fields(name, typ, false).0.len()\n        })\n        .fold(0, |acc: u32, val: u32| acc + val);\n\n    // Unlike in the private case, in public the `context` does not need to receive the hash of the original params.\n    let context_creation = quote {\n        let mut context = dep::aztec::context::public_context::PublicContext::new(|| {\n        // We start from 1 because we skip the selector for the dispatch function.\n        let serialized_args : [Field; $args_len] = dep::aztec::context::public_context::calldata_copy(1, $args_len);\n        dep::aztec::hash::hash_args_array(serialized_args)\n        });\n    };\n\n    // Modifications introduced by the different marker attributes.\n    let internal_check = if is_fn_internal(f) {\n        create_internal_check(f)\n    } else {\n        quote {}\n    };\n\n    let view_check = if is_fn_view(f) {\n        create_view_check(f)\n    } else {\n        quote {}\n    };\n\n    let (assert_initializer, mark_as_initialized) = if is_fn_initializer(f) {\n        (create_assert_correct_initializer_args(f), create_mark_as_initialized(f))\n    } else {\n        (quote {}, quote {})\n    };\n\n    let storage_init = if module_has_storage {\n        // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n        // referenced. We instead ignore 'unused variable' warnings for it.\n        quote {\n            #[allow(unused_variables)]\n            let storage = Storage::init(&mut context);\n        }\n    } else {\n        quote {}\n    };\n\n    // Initialization checks are not included in contracts that don't have initializers.\n    let init_check = if module_has_initializer & !fn_has_noinitcheck(f) & !is_fn_initializer(f) {\n        create_init_check(f)\n    } else {\n        quote {}\n    };\n\n    let to_prepend = quote {\n        $context_creation\n        $assert_initializer\n        $init_check\n        $internal_check\n        $view_check\n        $storage_init\n    };\n\n    let to_append = quote {\n        $mark_as_initialized\n    };\n\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, to_append);\n    f.set_body(modified_body);\n\n    // All public functions are automatically made unconstrained, even if they were not marked as such. This is because\n    // instead of compiling into a circuit, they will compile to bytecode that will be later transpiled into AVM\n    // bytecode.\n    f.set_unconstrained(true);\n    f.set_return_public(true);\n\n    fn_abi\n}\n\npub(crate) comptime fn transform_utility(f: FunctionDefinition) -> Quoted {\n    let fn_abi = create_fn_abi_export(f);\n    let fn_stub = stub_fn(f);\n    stub_registry::register(f.module(), fn_stub);\n\n    // Check if function is marked as unconstrained\n    if !f.is_unconstrained() {\n        let name = f.name();\n        panic(\n            f\"Function {name} is annotated with #[utility] but not marked as unconstrained, add unconstrained keyword\",\n        );\n    }\n\n    // Create utility context\n    let context_creation =\n        quote { let mut context = dep::aztec::context::utility_context::UtilityContext::new(); };\n    let module_has_storage = module_has_storage(f.module());\n\n    // Initialize Storage if module has storage\n    let storage_init = if module_has_storage {\n        quote {\n            // Some functions don't access storage, but it'd be quite difficult to only inject this variable if it is\n            // referenced. We instead ignore 'unused variable' warnings for it.\n            #[allow(unused_variables)]\n            let storage = Storage::init(context);\n        }\n    } else {\n        quote {}\n    };\n\n    // All utility functions perform message discovery, since they may need to access private notes that would be\n    // found during this process or they may be used to sync private events from TypeScript\n    // (`sync_private_state` function gets invoked by PXE::getPrivateEvents function).\n    let message_discovery_call = create_message_discovery_call();\n\n    // Inject context creation, storage initialization, and message discovery call at the beginning of the function\n    // body.\n    let to_prepend = quote {\n        $context_creation\n        $storage_init\n        $message_discovery_call\n    };\n    let body = f.body().as_block().unwrap();\n    let modified_body = modify_fn_body(body, to_prepend, quote {});\n    f.set_body(modified_body);\n\n    f.set_return_public(true);\n\n    fn_abi\n}\n\ncomptime fn create_internal_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called internally\";\n    quote { assert(context.msg_sender() == context.this_address(), $assertion_message); }\n}\n\ncomptime fn create_view_check(f: FunctionDefinition) -> Quoted {\n    let name = f.name();\n    let assertion_message = f\"Function {name} can only be called statically\";\n    if is_fn_private(f) {\n        // Here `context` is of type context::PrivateContext\n        quote { assert(context.inputs.call_context.is_static_call == true, $assertion_message); }\n    } else {\n        // Here `context` is of type context::PublicContext\n        quote { assert(context.is_static_call(), $assertion_message); }\n    }\n}\n\ncomptime fn create_assert_correct_initializer_args(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_initialization_matches_address_preimage_{fn_visibility}(context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_mark_as_initialized(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::mark_as_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\ncomptime fn create_init_check(f: FunctionDefinition) -> Quoted {\n    let fn_visibility = get_fn_visibility(f);\n    f\"dep::aztec::macros::functions::initialization_utils::assert_is_initialized_{fn_visibility}(&mut context);\"\n        .quoted_contents()\n}\n\n/// Injects a call to `aztec::messages::discovery::discover_new_messages`, causing for new notes to be added to PXE and made\n/// available for the current execution.\npub(crate) comptime fn create_message_discovery_call() -> Quoted {\n    quote {\n        /// Safety: message discovery returns nothing and is performed solely for its side-effects. It is therefore\n        /// always safe to call.\n        unsafe {\n            dep::aztec::messages::discovery::discover_new_messages(\n                context.this_address(),\n                _compute_note_hash_and_nullifier,\n            );\n        };\n    }\n}\n\n/// Checks if each function in the module is marked with either #[private], #[public], #[utility],\n/// #[contract_library_method], or #[test]. Non-macroified functions are not allowed in contracts.\npub(crate) comptime fn check_each_fn_macroified(m: Module) {\n    for f in m.functions() {\n        let name = f.name();\n        if !is_fn_private(f)\n            & !is_fn_public(f)\n            & !is_fn_utility(f)\n            & !is_fn_contract_library_method(f)\n            & !is_fn_test(f) {\n            panic(\n                f\"Function {name} must be marked as either #[private], #[public], #[utility], #[contract_library_method], or #[test]\",\n            );\n        }\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/functions/utils.nr"},"110":{"source":"use crate::{macros::utils::AsStrQuote, note::note_getter_options::PropertySelector};\nuse poseidon::poseidon2::Poseidon2Hasher;\nuse protocol_types::meta::{derive_packable_and_get_packed_len, generate_serialize_to_fields};\nuse std::{\n    collections::umap::UHashMap,\n    hash::{BuildHasherDefault, Hash, Hasher},\n    meta::{type_of, unquote},\n};\n\n/// A map from note type to (note_struct_definition, note_packed_len, note_type_id, fields).\n/// `fields` is an array of tuples where each tuple contains the name of the field/struct member (e.g. `amount`\n/// in `TokenNote`), the index of where the packed member starts in the packed note and a flag indicating\n/// whether the field is nullable or not.\npub comptime mut global NOTES: UHashMap<Type, (TypeDefinition, u32, Field, [(Quoted, u32, bool)]), BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\npub comptime mut global NOTE_TYPE_ID_COUNTER: u32 = 0;\n\n/// The note type id is set by enumerating the note types.\ncomptime fn get_next_note_type_id() -> Field {\n    // We assert that the note type id fits within 7 bits\n    assert(\n        NOTE_TYPE_ID_COUNTER < 128 as u32,\n        \"A contract can contain at most 128 different note types\",\n    );\n\n    let note_type_id = NOTE_TYPE_ID_COUNTER as Field;\n    NOTE_TYPE_ID_COUNTER += 1;\n    note_type_id\n}\n\n/// Generates a quote that implements `Packable` for a given struct `s`.\n/// If the note struct already implements `Packable`, we return an empty quote.\ncomptime fn derive_packable_if_not_implemented_and_get_len(s: TypeDefinition) -> (Quoted, u32) {\n    // We try to get the packed length of the note struct. If it does not implement `Packable`, we get Option::none()\n    let packed_len_typ = std::meta::typ::fresh_type_variable();\n    // We don't care about the result of the implements check. We just want the get the packed length.\n    let _ = s.as_type().implements(\n        quote { crate::protocol_types::traits::Packable<$packed_len_typ> }.as_trait_constraint(),\n    );\n    let maybe_packed_length = packed_len_typ.as_constant();\n\n    if maybe_packed_length.is_some() {\n        // We got some packed length meaning that the note struct implements `Packable`. For this reason we return\n        // an empty quote for the implementation and the packed length.\n        (quote {}, maybe_packed_length.unwrap())\n    } else {\n        // We didn't manage to get the packed length which means the note struct doesn't implement `Packable`\n        // so we derive it and return it along with the packed length.\n        derive_packable_and_get_packed_len(s)\n    }\n}\n\n/// Generates default `NoteType` implementation for a given note struct `s` and returns it as a quote.\n///\n/// impl NoteType for NoteStruct {\n///     fn get_id() -> Field {\n///         ...\n///     }\n/// }\ncomptime fn generate_note_interface(s: TypeDefinition, note_type_id: Field) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteType for $name {\n            fn get_id() -> Field {\n                $note_type_id\n            }\n        }\n    }\n}\n\n/// Generates default `NoteHash` trait implementation for a given note struct `s` and returns it as a quote.\n///\n/// # Generated Implementation\n/// ```\n/// impl NoteHash for NoteStruct {\n///     fn compute_note_hash(self, storage_slot: Field) -> Field { ... }\n///\n///     fn compute_nullifier(self, context: &mut PrivateContext, note_hash_for_nullify: Field) -> Field { ... }\n///\n///     unconstrained fn compute_nullifier_unconstrained(note_hash_for_nullify: Field) -> Field { ... }\n/// }\n/// ```\ncomptime fn generate_note_hash_trait_impl(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    quote {\n        impl aztec::note::note_interface::NoteHash for $name {\n            fn compute_note_hash(self, storage_slot: Field) -> Field {\n                let inputs = aztec::protocol_types::utils::arrays::array_concat(aztec::protocol_types::traits::Packable::pack(self), [storage_slot]);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(inputs, aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_HASH)\n            }\n\n            fn compute_nullifier(\n                self,\n                context: &mut aztec::prelude::PrivateContext,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = context.request_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n\n            unconstrained fn compute_nullifier_unconstrained(\n                self,\n                note_hash_for_nullify: Field,\n            ) -> Field {\n                let owner_npk_m = aztec::keys::getters::get_public_keys(self.owner).npk_m;\n                // We invoke hash as a static trait function rather than calling owner_npk_m.hash() directly\n                // in the quote to avoid \"trait not in scope\" compiler warnings.\n                let owner_npk_m_hash = aztec::protocol_types::traits::Hash::hash(owner_npk_m);\n                let secret = aztec::keys::getters::get_nsk_app(owner_npk_m_hash);\n                aztec::protocol_types::hash::poseidon2_hash_with_separator(\n                    [note_hash_for_nullify, secret],\n                    aztec::protocol_types::constants::GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n                )\n            }\n        }\n    }\n}\n\n/// Generates note properties struct for a given note struct `s`.\n///\n/// Example:\n/// ```\n/// struct TokenNoteProperties {\n///     amount: aztec::note::note_getter_options::PropertySelector,\n///     npk_m_hash: aztec::note::note_getter_options::PropertySelector\n///     randomness: aztec::note::note_getter_options::PropertySelector\n/// }\n///\n/// impl aztec::note::note_interface::NoteProperties<TokenNoteProperties> for TokenNote {\n///     fn properties() -> TokenNoteProperties {\n///         Self {\n///             amount: aztec::note::note_getter_options::PropertySelector { index: 0, offset: 0, length: 32 },\n///             npk_m_hash: aztec::note::note_getter_options::PropertySelector { index: 1, offset: 0, length: 32 },\n///             randomness: aztec::note::note_getter_options::PropertySelector { index: 2, offset: 0, length: 32 }\n///         }\n///     }\n/// }\n/// ```\ncomptime fn generate_note_properties(s: TypeDefinition) -> Quoted {\n    let name = s.name();\n\n    let struct_name = f\"{name}Properties\".quoted_contents();\n\n    let property_selector_type = type_of(PropertySelector { index: 0, offset: 0, length: 0 });\n\n    let note_fields = s.fields_as_written();\n\n    let properties_types = note_fields\n        .map(|(name, _, _)| quote { pub $name: $property_selector_type })\n        .join(quote {,});\n\n    // TODO #8694: Properly handle non-field types https://github.com/AztecProtocol/aztec-packages/issues/8694\n    let mut properties_list = &[];\n    for i in 0..note_fields.len() {\n        let (name, _, _) = note_fields[i];\n        properties_list = properties_list.push_back(\n            quote { $name: aztec::note::note_getter_options::PropertySelector { index: $i, offset: 0, length: 32 } },\n        );\n    }\n\n    let properties = properties_list.join(quote {,});\n\n    quote {\n        pub struct $struct_name {\n            $properties_types\n        }\n\n        impl aztec::note::note_interface::NoteProperties<$struct_name> for $name {\n            fn properties() -> $struct_name {\n                $struct_name {\n                    $properties\n                }\n            }\n        }\n    }\n}\n\n/// Generates note export for a given note struct `s`. The export is a global variable that contains note type id,\n/// note name and information about note fields (field name, index and whether the field is nullable or not).\n///\n/// Example:\n/// ```\n/// struct TokenNoteFields_5695262104 {\n///     amount: aztec::note::note_field::NoteField,\n///     owner: aztec::note::note_field::NoteField\n/// }\n///\n/// #[abi(notes)]\n/// global TokenNote_EXPORTS_5695262104: (Field, str<8>, TokenNoteFields_5695262104) = (\n///     0,\n///     \"TokenNote\",\n///     TokenNoteFields_5695262104 {\n///         amount: aztec::note::note_field::NoteField { index: 0, nullable: false },\n///         owner: aztec::note::note_field::NoteField { index: 1, nullable: false }\n///     }\n/// );\n///\n/// Randomly looking value at the end of the export name is generated by hashing the note struct type and is included\n/// to prevent naming collisions in case there are multiple notes with the same name imported in a contract.\npub(crate) comptime fn generate_note_export(\n    s: TypeDefinition,\n    note_type_id: Field,\n    fields: [(Quoted, u32, bool)],\n) -> Quoted {\n    let name = s.name();\n    let mut hasher = Poseidon2Hasher::default();\n    s.as_type().hash(&mut hasher);\n    let hash = hasher.finish() as u32;\n    let global_export_name = f\"{name}_EXPORTS_{hash}\".quoted_contents();\n    let note_fields_name = f\"{name}Fields_{hash}\".quoted_contents();\n    let (note_name_as_str, _) = name.as_str_quote();\n    let note_name_str_len = unquote!(quote { $note_name_as_str.as_bytes().len() });\n\n    let mut note_fields = &[];\n    let mut note_field_constructors = &[];\n    for field in fields {\n        let (name, index, nullable) = field;\n        note_fields = note_fields.push_back(quote { $name: aztec::note::note_field::NoteField });\n        note_field_constructors = note_field_constructors.push_back(\n            quote { $name: aztec::note::note_field::NoteField { index: $index, nullable: $nullable }},\n        );\n    }\n\n    let note_fields = note_fields.join(quote {,});\n    let note_field_constructors = note_field_constructors.join(quote {,});\n\n    quote {\n        pub struct $note_fields_name {\n            pub $note_fields\n        }\n\n        #[abi(notes)]\n        global $global_export_name: (Field, str<$note_name_str_len>, $note_fields_name) = ($note_type_id, $note_name_as_str, $note_fields_name { $note_field_constructors });\n    }\n}\n\n/// Registers a note struct `note` with the given `note_packed_len`, `note_type_id`, `fixed_fields` and\n/// `nullable_fields` in the global `NOTES` map.\ncomptime fn register_note(\n    note: TypeDefinition,\n    note_packed_len: u32,\n    note_type_id: Field,\n    fixed_fields: [(Quoted, Type, u32)],\n    nullable_fields: [(Quoted, Type, u32)],\n) {\n    let mut fields = &[];\n    for field in fixed_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, false));\n    }\n    for field in nullable_fields {\n        let (name, _, index) = field;\n        fields = fields.push_back((name, index, true));\n    }\n\n    NOTES.insert(note.as_type(), (note, note_packed_len, note_type_id, fields));\n}\n\n/// Separates note struct members into fixed and nullable ones. It also stores the index of where each struct member\n/// starts in the serialized note. Note that each struct member can occupy multiple fields (as in Field type).\ncomptime fn index_note_fields(\n    s: TypeDefinition,\n    nullable_fields: [Quoted],\n) -> ([(Quoted, Type, u32)], [(Quoted, Type, u32)]) {\n    let mut indexed_fixed_fields: [(Quoted, Type, u32)] = &[];\n    let mut indexed_nullable_fields = &[];\n    let mut counter: u32 = 0;\n    for field in s.fields_as_written() {\n        let (name, typ, _) = field;\n        if nullable_fields.all(|field| field != name) {\n            indexed_fixed_fields = indexed_fixed_fields.push_back((name, typ, counter));\n        } else {\n            indexed_nullable_fields = indexed_nullable_fields.push_back((name, typ, counter));\n        }\n        let (serialization_fields, _) = generate_serialize_to_fields(name, typ, true);\n        // Each struct member can occupy multiple fields so we need to increment the counter accordingly\n        counter += serialization_fields.len();\n    }\n    (indexed_fixed_fields, indexed_nullable_fields)\n}\n\n/// Generates the following:\n/// - NoteTypeProperties\n/// - NoteType trait implementation\n/// - NoteHash trait implementation\n/// - Packable implementation\n///\n/// Registers the note in the global `NOTES` map.\n///\n/// For more details on the generated code, see the individual functions.\npub comptime fn note(s: TypeDefinition) -> Quoted {\n    assert_has_owner(s);\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n\n    let note_properties = generate_note_properties(s);\n    let note_type_id = get_next_note_type_id();\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n    let note_hash_impl = generate_note_hash_trait_impl(s);\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $note_hash_impl\n        $packable_impl\n    }\n}\n\n/// Generates code for a custom note implementation that requires specialized note hash or nullifier computation.\n///\n/// # Generated Code\n/// - NoteTypeProperties: Defines the structure and properties of note fields\n/// - NoteType trait implementation: Provides the note type ID\n/// - Packable implementation: Enables serialization/deserialization of the note\n///\n/// # Registration\n/// Registers the note in the global `NOTES` map with:\n/// - Note type ID\n/// - Packed length\n/// - Field indices and nullability\n///\n/// # Use Cases\n/// Use this macro when implementing a note that needs custom:\n/// - Note hash computation logic\n/// - Nullifier computation logic\n///\n/// The macro omits generating default NoteHash trait implementation, allowing you to provide your own.\n///\n/// # Example\n/// ```\n/// #[custom_note]\n/// struct CustomNote {\n///     value: Field,\n///     metadata: Field\n/// }\n///\n/// impl NoteHash for CustomNote {\n///     // Custom note hash computation...\n///     fn compute_note_hash(...) -> Field { ... }\n///\n///     // Custom nullifier computation...\n///     fn compute_nullifier(...) -> Field { ... }\n///     fn compute_nullifier_unconstrained(...) -> Field { ... }\n/// }\n/// ```\npub comptime fn custom_note(s: TypeDefinition) -> Quoted {\n    let (packable_impl, note_packed_len) = derive_packable_if_not_implemented_and_get_len(s);\n    let note_type_id = get_next_note_type_id();\n\n    let (indexed_fixed_fields, indexed_nullable_fields) = index_note_fields(s, &[]);\n    register_note(\n        s,\n        note_packed_len,\n        note_type_id,\n        indexed_fixed_fields,\n        indexed_nullable_fields,\n    );\n\n    let note_properties = generate_note_properties(s);\n    let note_interface_impl = generate_note_interface(s, note_type_id);\n\n    quote {\n        $note_properties\n        $note_interface_impl\n        $packable_impl\n    }\n}\n\n/// Asserts that the note has an 'owner' field.\n///\n/// We require notes implemented with #[note] macro macro to have an 'owner' field because our\n/// auto-generated nullifier functions expect it. This requirement is most likely only temporary.\ncomptime fn assert_has_owner(note: TypeDefinition) {\n    let fields = note.fields_as_written();\n    let mut has_owner = false;\n    for i in 0..fields.len() {\n        let (field_name, _, _) = fields[i];\n        if field_name == quote { owner } {\n            has_owner = true;\n            break;\n        }\n    }\n    assert(\n        has_owner,\n        \"Note must have an 'owner' field. If your notes have no owner, use #[custom_note] insteadof #[note] and implement the NoteHashing trait manually.\",\n    );\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/notes.nr"},"111":{"source":"use poseidon::poseidon2::Poseidon2Hasher;\nuse std::{collections::umap::UHashMap, hash::BuildHasherDefault};\n\nuse super::utils::AsStrQuote;\nuse super::utils::get_storage_size;\n\n/// Stores a map from a module to the name of the struct that describes its storage layout.\n/// This is then used when generating a `storage_layout()` getter on the contract struct.\npub comptime mut global STORAGE_LAYOUT_NAME: UHashMap<Module, Quoted, BuildHasherDefault<Poseidon2Hasher>> =\n    UHashMap::default();\n\n/// Marks a struct as the one describing the storage layout of a contract.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract should have this macro (or `storage_no_init`) applied to it, and the\n/// struct has to be called 'Storage'.\npub comptime fn storage(s: TypeDefinition) -> Quoted {\n    let struct_name = s.name();\n    if struct_name != quote { Storage } {\n        panic(\n            f\"The #[storage] macro can only be applied to a struct with name 'Storage', got '{struct_name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage_no_init\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n\n    // This macro performs three things:\n    //  - it marks the contract as having storage, so that `macros::utils::module_has_storage` will return true and\n    //    functions will have the storage variable injected and initialized via the `init` function.\n    //  - it implements said `init` function by allocating appropriate storage slots to each state variable.\n    //  - it exposes the storage layout by creating a `StorageLayout` struct that is exposed via the `abi(storage)`\n    //    macro.\n    let mut slot: u32 = 1;\n    let mut storage_vars_constructors = &[];\n    let mut storage_layout_fields = &[];\n    let mut storage_layout_constructors = &[];\n\n    // TODO(#8658): uncomment the code below to inject the Context type parameter.\n    //let mut new_storage_fields = &[];\n    //let context_generic = s.add_generic(\"Context\");\n    for field in s.fields_as_written() {\n        // FIXME: This doesn't handle field types with generics\n        let (name, typ, _) = field;\n        let (storage_field_constructor, storage_size) =\n            generate_storage_field_constructor(typ, quote { $slot });\n        storage_vars_constructors =\n            storage_vars_constructors.push_back(quote { $name: $storage_field_constructor });\n        // We have `Storable` in a separate `.nr` file instead of defining it in the last quote of this function\n        // because that way a dev gets a more reasonable error if he defines a struct with the same name in\n        // a contract.\n        storage_layout_fields =\n            storage_layout_fields.push_back(quote { pub $name: dep::aztec::prelude::Storable });\n        storage_layout_constructors = storage_layout_constructors.push_back(\n            quote { $name: dep::aztec::prelude::Storable { slot: $slot } },\n        );\n        //let with_context_generic = add_context_generic(typ, context_generic);\n        //println(with_context_generic);\n        //new_storage_fields = new_storage_fields.push_back((name,  with_context_generic ));\n        slot += storage_size;\n    }\n\n    //s.set_fields(new_storage_fields);\n    let storage_vars_constructors = storage_vars_constructors.join(quote {,});\n    let storage_impl = quote {\n        impl<Context> Storage<Context> {\n            fn init(context: Context) -> Self {\n                Self {\n                    $storage_vars_constructors\n                }\n            }\n        }\n    };\n\n    let storage_layout_fields = storage_layout_fields.join(quote {,});\n    let storage_layout_constructors = storage_layout_constructors.join(quote {,});\n\n    let module = s.module();\n    let module_name = module.name();\n    let storage_layout_name = f\"STORAGE_LAYOUT_{module_name}\".quoted_contents();\n    let (module_name_str, module_name_len) = module_name.as_str_quote();\n    STORAGE_LAYOUT_NAME.insert(module, storage_layout_name);\n\n    quote {\n        $storage_impl\n\n        pub struct StorageLayoutFields {\n            $storage_layout_fields\n        }\n\n        pub struct StorageLayout<let N: u32> {\n            pub contract_name: str<N>,\n            pub fields: StorageLayoutFields\n        }\n\n        #[abi(storage)]\n        pub global $storage_layout_name: StorageLayout<$module_name_len> = StorageLayout {\n            contract_name: $module_name_str,\n            fields: StorageLayoutFields { $storage_layout_constructors }\n        };\n    }\n}\n\n/// Same as `storage`, except the user is in charge of providing an implementation of the `init` constructor function\n/// with signature `fn init<Context>(context: Context) -> Self`, which allows for manual control of storage slot\n/// allocation. Similarly, no `StorageLayout` struct will be created.\n///\n/// The contract's storage is accessed via the `storage` variable, which will will automatically be made available in\n/// all functions as an instance of the struct this macro was applied to.\n///\n/// Only a single struct in the entire contract can have this macro (or storage_no_init) applied to it, and the struct\n/// has to be called 'Storage'.\npub comptime fn storage_no_init(s: TypeDefinition) {\n    // All `storage` does is provide the `init` implementation, so we don't need to do anything here. Applying this\n    // macro however will cause for `macros::utils::module_has_storage` to return true, resulting in the injection of\n    // the `storage` variable.\n\n    // We do need to make sure that the type is called Storage, since we'll do `Storage::init` later on.\n\n    if s.name() != quote { Storage } {\n        let name = s.name();\n        panic(\n            f\"The #[storage_no_init] macro can only be applied to a struct with name 'Storage', got '{name}' instead.\",\n        )\n    }\n\n    assert(\n        !s.has_named_attribute(\"storage\"),\n        f\"Only one of #[storage] and #[storage_no_init] can be applied to the Storage struct.\",\n    );\n}\n\n/// Returns the expression required to initialize a state variable with a given slot, along with its serialization size,\n/// i.e. how many contiguous storage slots the variable requires.\ncomptime fn generate_storage_field_constructor(typ: Type, slot: Quoted) -> (Quoted, u32) {\n    assert(\n        typ.as_data_type().is_some(),\n        \"Storage containers must be generic structs of the form `Container<_, Context>`, or Map<Key, _, Context>\",\n    );\n    let (container_struct, generics) = typ.as_data_type().unwrap();\n    let struct_name = container_struct.name();\n\n    let constructor = if is_storage_map(typ) {\n        // Map state variables recursively initialize their contents - this includes nested maps.\n        let (value_constructor, _) =\n            generate_storage_field_constructor(generics[1], quote { slot });\n\n        quote { $struct_name::new(context, $slot, | context, slot | { $value_constructor }) }\n    } else {\n        // We assume below that all state variables implement `fn new<Context>(context: Context, slot: Field) -> Self`.\n        quote { $struct_name::new(context, $slot)}\n    };\n\n    (constructor, get_storage_size(typ))\n}\n\n/// Returns true if `typ` is `state_vars::map::Map`.\ncomptime fn is_storage_map(typ: Type) -> bool {\n    if typ.as_data_type().is_some() {\n        let (def, generics) = typ.as_data_type().unwrap();\n        let maybe_map = if (def.name() == quote { Map }) & (generics.len() == 3) {\n            let maybe_key = generics[0];\n            let maybe_value = generics[1];\n            let maybe_context = generics[2];\n            quote { crate::state_vars::map::Map<$maybe_key, $maybe_value, $maybe_context> }.as_type()\n        } else {\n            quote {()}.as_type()\n        };\n        typ == maybe_map\n    } else {\n        false\n    }\n}\n\ncomptime fn add_context_generic(typ: Type, context_generic: Type) -> Type {\n    let (def, mut generics) = typ.as_data_type().expect(\n        f\"Storage containers must be generic structs of the form `Container<..., Context>`\",\n    );\n    let name = def.name();\n\n    if is_storage_map(typ) {\n        generics[generics.len() - 2] = add_context_generic(generics[1], context_generic);\n        generics[generics.len() - 1] = context_generic;\n    } else {\n        generics[generics.len() - 1] = context_generic;\n    }\n\n    let generics = generics.map(|typ: Type| quote {$typ}).join(quote {,});\n    quote { $name<$generics> }.as_type()\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/macros/storage.nr"},"113":{"source":"use protocol_types::{address::AztecAddress, debug_log::{debug_log, debug_log_format}};\n\npub mod nonce_discovery;\npub mod partial_notes;\npub mod private_events;\npub mod private_notes;\npub mod process_message;\n\nuse crate::{\n    messages::{\n        discovery::{private_notes::MAX_NOTE_PACKED_LEN, process_message::do_process_message},\n        processing::{\n            get_private_logs, pending_tagged_log::PendingTaggedLog,\n            validate_enqueued_notes_and_events,\n        },\n    },\n    utils::array,\n};\n\npub struct NoteHashAndNullifier {\n    /// The result of NoteHash::compute_note_hash\n    pub note_hash: Field,\n    /// The result of NoteHash::compute_nullifier_unconstrained (since all of message discovery is unconstrained)\n    pub inner_nullifier: Field,\n}\n\n/// A function which takes a note's packed content, address of the emitting contract, note nonce, storage slot and note\n/// type ID and attempts to compute its note hash (not hashed by note nonce nor siloed by address) and inner nullifier\n/// (not siloed by address).\n///\n/// This function must be user-provided as its implementation requires knowledge of how note type IDs are allocated in a\n/// contract. The `#[aztec]` macro automatically creates such a contract library method called\n/// `_compute_note_hash_and_nullifier`, which looks something like this:\n///\n/// ```\n/// |packed_note, contract_address, note_nonce, storage_slot, note_type_id| {\n///     if note_type_id == MyNoteType::get_id() {\n///         assert(packed_note.len() == MY_NOTE_TYPE_SERIALIZATION_LENGTH);\n///\n///         let note = MyNoteType::unpack(aztec::utils::array::subarray(packed_note.storage(), 0));\n///\n///         let note_hash = note.compute_note_hash(storage_slot);\n///         let note_hash_for_nullify = aztec::note::utils::compute_note_hash_for_nullify(\n///             RetrievedNote{ note, contract_address, metadata: SettledNoteMetadata::new(note_nonce).into() },\n///             storage_slot\n///         );\n///\n///         let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n///\n///         Option::some(\n///             aztec::messages::discovery::NoteHashAndNullifier {\n///                 note_hash, inner_nullifier\n///             }\n///         )\n///     } else if note_type_id == MyOtherNoteType::get_id() {\n///           ... // Similar to above but calling MyOtherNoteType::unpack_content\n///     } else {\n///         Option::none() // Unknown note type ID\n///     };\n/// }\n/// ```\ntype ComputeNoteHashAndNullifier<Env> = unconstrained fn[Env](/* packed_note */BoundedVec<Field, MAX_NOTE_PACKED_LEN>, /* storage_slot */ Field, /* note_type_id */ Field, /* contract_address */ AztecAddress, /* note nonce */ Field) -> Option<NoteHashAndNullifier>;\n\n/// Performs the message discovery process, in which private are downloaded and inspected to find new private notes,\n/// partial notes and events, etc., and pending partial notes are processed to search for their completion logs.\n/// This is the mechanism via which a contract updates its knowledge of its private state.\n///\n/// Receives the address of the contract on which discovery is performed along with its\n/// `compute_note_hash_and_nullifier` function.\npub unconstrained fn discover_new_messages<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    debug_log(\"Performing message discovery\");\n\n    // First we process all private logs, which can contain different kinds of messages e.g. private notes, partial\n    // notes, private events, etc.\n    let mut logs = get_private_logs(contract_address);\n    logs.for_each(|i, pending_tagged_log: PendingTaggedLog| {\n        debug_log_format(\n            \"Processing log with tag {0}\",\n            [pending_tagged_log.log.get(0)],\n        );\n\n        // We remove the tag from the pending tagged log and process the message ciphertext contained in it.\n        let message_ciphertext = array::subbvec(pending_tagged_log.log, 1);\n\n        do_process_message(\n            contract_address,\n            compute_note_hash_and_nullifier,\n            message_ciphertext,\n            pending_tagged_log.context,\n        );\n        logs.remove(i);\n    });\n\n    // Then we process all pending partial notes, regardless of whether they were found in the current or previous\n    // executions.\n    partial_notes::fetch_and_process_partial_note_completion_logs(\n        contract_address,\n        compute_note_hash_and_nullifier,\n    );\n\n    // Finally we validate all notes and events that were found as part of the previous processes, resulting in them\n    // being added to PXE's database and retrievable via oracles (get_notes) and our TS API (PXE::getPrivateEvents).\n    validate_enqueued_notes_and_events(contract_address);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/mod.nr"},"114":{"source":"use crate::messages::discovery::{ComputeNoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::MAX_NOTE_HASHES_PER_TX,\n    debug_log::debug_log_format,\n    hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n    traits::ToField,\n};\n\n/// A struct with the discovered information of a complete note, required for delivery to PXE. Note that this is *not*\n/// the complete note information, since it does not include content, storage slot, etc.\npub struct DiscoveredNoteInfo {\n    pub note_nonce: Field,\n    pub note_hash: Field,\n    pub inner_nullifier: Field,\n}\n\n/// Searches for note nonces that will result in a note that was emitted in a transaction. While rare, it is possible\n/// for multiple notes to have the exact same packed content and storage slot but different nonces, resulting in\n/// different unique note hashes. Because of this this function returns a *vector* of discovered notes, though in most\n/// cases it will contain a single element.\n///\n/// Due to how nonces are computed, this function requires knowledge of the transaction in which the note was created,\n/// more specifically the list of all unique note hashes in it plus the value of its first nullifier.\npub unconstrained fn attempt_note_nonce_discovery<Env>(\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) -> BoundedVec<DiscoveredNoteInfo, MAX_NOTE_HASHES_PER_TX> {\n    let discovered_notes = &mut BoundedVec::new();\n\n    debug_log_format(\n        \"Attempting nonce discovery on {0} potential notes on contract {1} for storage slot {2}\",\n        [unique_note_hashes_in_tx.len() as Field, contract_address.to_field(), storage_slot],\n    );\n\n    // We need to find nonces (typically just one) that result in a note hash that, once siloed into a unique note hash,\n    // is one of the note hashes created by the transaction.\n    unique_note_hashes_in_tx.for_eachi(|i, expected_unique_note_hash| {\n        // Nonces are computed by hashing the first nullifier in the transaction with the index of the note in the\n        // new note hashes array. We therefore know for each note in every transaction what its nonce is.\n        let candidate_nonce = compute_note_hash_nonce(first_nullifier_in_tx, i);\n\n        // Given note nonce, note content and metadata, we can compute the note hash and silo it to check if it matches\n        // the note hash at the array index we're currently processing.\n        // TODO(#11157): handle failed note_hash_and_nullifier computation\n        let hashes = compute_note_hash_and_nullifier(\n            packed_note,\n            storage_slot,\n            note_type_id,\n            contract_address,\n            candidate_nonce,\n        )\n            .expect(f\"Failed to compute a note hash for note type {note_type_id}\");\n\n        let siloed_note_hash = compute_siloed_note_hash(contract_address, hashes.note_hash);\n        let unique_note_hash = compute_unique_note_hash(candidate_nonce, siloed_note_hash);\n\n        if unique_note_hash == expected_unique_note_hash {\n            // Note that while we did check that the note hash is the preimage of the expected unique note hash, we\n            // perform no validations on the nullifier - we fundamentally cannot, since only the application knows\n            // how to compute nullifiers. We simply trust it to have provided the correct one: if it hasn't, then\n            // PXE may fail to realize that a given note has been nullified already, and calls to the application\n            // could result in invalid transactions (with duplicate nullifiers). This is not a concern because an\n            // application already has more direct means of making a call to it fail the transaction.\n            discovered_notes.push(\n                DiscoveredNoteInfo {\n                    note_nonce: candidate_nonce,\n                    note_hash: hashes.note_hash,\n                    inner_nullifier: hashes.inner_nullifier,\n                },\n            );\n\n            // We don't exit the loop - it is possible (though rare) for the exact same note content to be present\n            // multiple times in the same transaction with different nonces. This typically doesn't happen due to\n            // notes containing random values in order to hide their contents.\n        }\n    });\n\n    debug_log_format(\n        \"Found valid nonces for a total of {0} notes\",\n        [discovered_notes.len() as Field],\n    );\n\n    *discovered_notes\n}\n\nmod test {\n    use crate::{\n        messages::discovery::{NoteHashAndNullifier, private_notes::MAX_NOTE_PACKED_LEN},\n        note::{\n            note_interface::{NoteHash, NoteType},\n            note_metadata::SettledNoteMetadata,\n            retrieved_note::RetrievedNote,\n            utils::compute_note_hash_for_nullify,\n        },\n        oracle::random::random,\n        test::mocks::mock_note::MockNote,\n        utils::array,\n    };\n\n    use dep::protocol_types::{\n        address::AztecAddress,\n        hash::{compute_note_hash_nonce, compute_siloed_note_hash, compute_unique_note_hash},\n        traits::{FromField, Packable},\n    };\n\n    use super::attempt_note_nonce_discovery;\n\n    // This implementation could be simpler, but this serves as a nice example of the expected flow in a real\n    // implementation, and as a sanity check that the interface is sufficient.\n    unconstrained fn compute_note_hash_and_nullifier(\n        packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n        storage_slot: Field,\n        note_type_id: Field,\n        contract_address: AztecAddress,\n        note_nonce: Field,\n    ) -> Option<NoteHashAndNullifier> {\n        if note_type_id == MockNote::get_id() {\n            let note = MockNote::unpack(array::subarray(packed_note.storage(), 0));\n            let note_hash = note.compute_note_hash(storage_slot);\n\n            let note_hash_for_nullify = compute_note_hash_for_nullify(\n                RetrievedNote {\n                    note,\n                    contract_address,\n                    metadata: SettledNoteMetadata::new(note_nonce).into(),\n                },\n                storage_slot,\n            );\n\n            let inner_nullifier = note.compute_nullifier_unconstrained(note_hash_for_nullify);\n\n            Option::some(NoteHashAndNullifier { note_hash, inner_nullifier })\n        } else {\n            Option::none()\n        }\n    }\n\n    global VALUE: Field = 7;\n    global FIRST_NULLIFIER_IN_TX: Field = 47;\n    global CONTRACT_ADDRESS: AztecAddress = AztecAddress::from_field(13);\n    global STORAGE_SLOT: Field = 99;\n\n    #[test]\n    unconstrained fn no_note_hashes() {\n        let unique_note_hashes_in_tx = BoundedVec::new();\n        let packed_note = BoundedVec::new();\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    #[test(should_fail_with = \"Failed to compute a note hash\")]\n    unconstrained fn failed_hash_computation() {\n        let unique_note_hashes_in_tx = BoundedVec::from_array([random()]);\n        let packed_note = BoundedVec::new();\n        let note_type_id = 0; // This note type id is unknown to compute_note_hash_and_nullifier\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            note_type_id,\n            packed_note,\n        );\n\n        assert_eq(discovered_notes.len(), 0);\n    }\n\n    struct NoteAndData {\n        note: MockNote,\n        note_nonce: Field,\n        note_hash: Field,\n        unique_note_hash: Field,\n        inner_nullifier: Field,\n    }\n\n    unconstrained fn construct_note(value: Field, note_index_in_tx: u32) -> NoteAndData {\n        let note_nonce = compute_note_hash_nonce(FIRST_NULLIFIER_IN_TX, note_index_in_tx);\n\n        let retrieved_note = MockNote::new(value)\n            .contract_address(CONTRACT_ADDRESS)\n            .note_metadata(SettledNoteMetadata::new(note_nonce).into())\n            .build_retrieved_note();\n        let note = retrieved_note.note;\n\n        let note_hash = note.compute_note_hash(STORAGE_SLOT);\n        let unique_note_hash = compute_unique_note_hash(\n            note_nonce,\n            compute_siloed_note_hash(CONTRACT_ADDRESS, note_hash),\n        );\n        let inner_nullifier = note.compute_nullifier_unconstrained(compute_note_hash_for_nullify(\n            retrieved_note,\n            STORAGE_SLOT,\n        ));\n\n        NoteAndData { note, note_nonce, note_hash, unique_note_hash, inner_nullifier }\n    }\n\n    #[test]\n    unconstrained fn single_note() {\n        let note_index_in_tx = 2;\n        let note_and_data = construct_note(VALUE, note_index_in_tx);\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(note_index_in_tx, note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(note_and_data.note.pack()),\n        );\n\n        assert_eq(discovered_notes.len(), 1);\n        let discovered_note = discovered_notes.get(0);\n\n        assert_eq(discovered_note.note_nonce, note_and_data.note_nonce);\n        assert_eq(discovered_note.note_hash, note_and_data.note_hash);\n        assert_eq(discovered_note.inner_nullifier, note_and_data.inner_nullifier);\n    }\n\n    #[test]\n    unconstrained fn multiple_notes_same_preimage() {\n        let first_note_index_in_tx = 3;\n        let first_note_and_data = construct_note(VALUE, first_note_index_in_tx);\n\n        let second_note_index_in_tx = 5;\n        let second_note_and_data = construct_note(VALUE, second_note_index_in_tx);\n\n        // Both notes have the same preimage (and therefore packed representation), so both should be found in the same\n        // call.\n        assert_eq(first_note_and_data.note, second_note_and_data.note);\n        let packed_note = first_note_and_data.note.pack();\n\n        let mut unique_note_hashes_in_tx = BoundedVec::from_array([\n            random(), random(), random(), random(), random(), random(), random(),\n        ]);\n        unique_note_hashes_in_tx.set(first_note_index_in_tx, first_note_and_data.unique_note_hash);\n        unique_note_hashes_in_tx.set(second_note_index_in_tx, second_note_and_data.unique_note_hash);\n\n        let discovered_notes = attempt_note_nonce_discovery(\n            unique_note_hashes_in_tx,\n            FIRST_NULLIFIER_IN_TX,\n            compute_note_hash_and_nullifier,\n            CONTRACT_ADDRESS,\n            STORAGE_SLOT,\n            MockNote::get_id(),\n            BoundedVec::from_array(packed_note),\n        );\n\n        assert_eq(discovered_notes.len(), 2);\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == first_note_and_data.note_nonce)\n                & (discovered_note.note_hash == first_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == first_note_and_data.inner_nullifier)\n        }));\n\n        assert(discovered_notes.any(|discovered_note| {\n            (discovered_note.note_nonce == second_note_and_data.note_nonce)\n                & (discovered_note.note_hash == second_note_and_data.note_hash)\n                & (discovered_note.inner_nullifier == second_note_and_data.inner_nullifier)\n        }));\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/nonce_discovery.nr"},"115":{"source":"use crate::{\n    capsules::CapsuleArray,\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::{\n            enqueue_note_for_validation, get_pending_partial_notes_completion_logs,\n            log_retrieval_response::LogRetrievalResponse,\n        },\n    },\n    utils::array,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    debug_log::debug_log_format,\n    hash::sha256_to_field,\n    traits::{Deserialize, Serialize},\n};\n\nglobal PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 2;\n\n/// Partial notes have a maximum packed length of their private fields bound by extra content in their private message\n/// (e.g. the storage slot, note completion log tag, etc.).\npub global MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\n/// The slot in the PXE capsules where we store a `CapsuleArray` of `DeliveredPendingPartialNote`.\npub global DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT\".as_bytes(),\n);\n\n/// A partial note that was delivered but is still pending completion. Contains the information necessary to find the\n/// log that will complete it and lead to a note being discovered and delivered.\n#[derive(Serialize, Deserialize)]\npub(crate) struct DeliveredPendingPartialNote {\n    pub(crate) note_completion_log_tag: Field,\n    pub(crate) storage_slot: Field,\n    pub(crate) note_type_id: Field,\n    pub(crate) packed_private_note_content: BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>,\n    pub(crate) recipient: AztecAddress,\n}\n\npub unconstrained fn process_partial_note_private_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content) =\n        decode_partial_note_private_msg(msg_metadata, msg_content);\n\n    // We store the information of the partial note we found in a persistent capsule in PXE, so that we can later search\n    // for the public log that will complete it.\n    let pending = DeliveredPendingPartialNote {\n        note_completion_log_tag,\n        storage_slot,\n        note_type_id,\n        packed_private_note_content,\n        recipient,\n    };\n\n    CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    )\n        .push(pending);\n}\n\n/// Searches for logs that would result in the completion of pending partial notes, ultimately resulting in the notes\n/// being delivered to PXE if completed.\npub unconstrained fn fetch_and_process_partial_note_completion_logs<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n) {\n    let pending_partial_notes = CapsuleArray::at(\n        contract_address,\n        DELIVERED_PENDING_PARTIAL_NOTE_ARRAY_LENGTH_CAPSULES_SLOT,\n    );\n\n    debug_log_format(\n        \"{} pending partial notes\",\n        [pending_partial_notes.len() as Field],\n    );\n\n    // Each of the pending partial notes might get completed by a log containing its public values. For performance\n    // reasons, we fetch all of these logs concurrently and then process them one by one, minimizing the amount of time\n    // waiting for the node roundtrip.\n    let maybe_completion_logs =\n        get_pending_partial_notes_completion_logs(contract_address, pending_partial_notes);\n\n    // Each entry in the maybe completion logs array corresponds to the entry in the pending partial notes array at the\n    // same index. This means we can use the same index as we iterate through the responses to get both the partial note\n    // and the log that might complete it.\n    assert_eq(maybe_completion_logs.len(), pending_partial_notes.len());\n\n    maybe_completion_logs.for_each(|i, maybe_log: Option<LogRetrievalResponse>| {\n        // We clear the completion logs as we read them so that the array is empty by the time we next query it.\n        // TODO(#14943): use volatile arrays to avoid having to manually clear this.\n        maybe_completion_logs.remove(i);\n\n        let pending_partial_note = pending_partial_notes.get(i);\n\n        if maybe_log.is_none() {\n            debug_log_format(\n                \"Found no completion logs for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n\n            // Note that we're not removing the pending partial note from the capsule array, so we will continue\n            // searching for this tagged log when performing message discovery in the future until we either find it or\n            // the entry is somehow removed from the array.\n        } else {\n            debug_log_format(\n                \"Completion log found for partial note with tag {}\",\n                [pending_partial_note.note_completion_log_tag],\n            );\n            let log = maybe_log.unwrap();\n\n            // Public fields are assumed to all be placed at the end of the packed representation, so we combine the\n            // private and public packed fields (i.e. the contents of the private message and public log plaintext to get\n            // the complete packed content.\n            let complete_packed_note = array::append(\n                pending_partial_note.packed_private_note_content,\n                log.log_payload,\n            );\n\n            let discovered_notes = attempt_note_nonce_discovery(\n                log.unique_note_hashes_in_tx,\n                log.first_nullifier_in_tx,\n                compute_note_hash_and_nullifier,\n                contract_address,\n                pending_partial_note.storage_slot,\n                pending_partial_note.note_type_id,\n                complete_packed_note,\n            );\n\n            // TODO(#11627): is there anything reasonable we can do if we get a log but it doesn't result in a note\n            // being found?\n            if discovered_notes.len() == 0 {\n                panic(\n                    f\"A partial note's completion log did not result in any notes being found - this should never happen\",\n                );\n            }\n\n            debug_log_format(\n                \"Discovered {0} notes for partial note with tag {1}\",\n                [discovered_notes.len() as Field, pending_partial_note.note_completion_log_tag],\n            );\n\n            discovered_notes.for_each(|discovered_note| {\n                enqueue_note_for_validation(\n                    contract_address,\n                    pending_partial_note.storage_slot,\n                    discovered_note.note_nonce,\n                    complete_packed_note,\n                    discovered_note.note_hash,\n                    discovered_note.inner_nullifier,\n                    log.tx_hash,\n                    pending_partial_note.recipient,\n                );\n            });\n\n            // Because there is only a single log for a given tag, once we've processed the tagged log then we\n            // simply delete the pending work entry, regardless of whether it was actually completed or not.\n            pending_partial_notes.remove(i);\n        }\n    });\n}\n\nfn decode_partial_note_private_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, Field, BoundedVec<Field, MAX_PARTIAL_NOTE_PRIVATE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all partial note private messages must have at least {PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the partial note private message encoding below must be updated as well.\n    std::static_assert(\n        PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 2,\n        \"unexpected value for PARTIAL_NOTE_PRIVATE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have two fields that are not the partial note's packed representation, which are the storage slot\n    // and the note completion log tag.\n    let storage_slot = msg_content.get(0);\n    let note_completion_log_tag = msg_content.get(1);\n\n    let packed_private_note_content = array::subbvec(msg_content, 2);\n\n    (note_type_id, storage_slot, note_completion_log_tag, packed_private_note_content)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/partial_notes.nr"},"116":{"source":"use crate::{\n    event::event_selector::EventSelector,\n    messages::{encoding::MAX_MESSAGE_CONTENT_LEN, processing::enqueue_event_for_validation},\n    prelude::AztecAddress,\n    utils::array,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__EVENT_COMMITMENT, hash::poseidon2_hash_with_separator_bounded_vec,\n    traits::FromField,\n};\n\n/// The number of fields in a private event message content that are not the event's serialized representation\n/// (1 field for randomness).\nglobal PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of an event's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, randomness, etc.).\npub global MAX_EVENT_SERIALIZED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN;\n\npub unconstrained fn process_private_event_msg(\n    contract_address: AztecAddress,\n    recipient: AztecAddress,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n    tx_hash: Field,\n) {\n    // In the case of events, the msg metadata is the event selector.\n    let event_type_id = EventSelector::from_field(msg_metadata as Field);\n\n    assert(\n        msg_content.len() > PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n        f\"Invalid private event message: all private event messages must have at least {PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private event message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN\",\n    );\n\n    let serialized_event_with_randomness = msg_content;\n\n    let event_commitment = poseidon2_hash_with_separator_bounded_vec(\n        serialized_event_with_randomness,\n        GENERATOR_INDEX__EVENT_COMMITMENT,\n    );\n\n    // Randomness was injected into the event payload in `emit_event_in_private_log` but we have already used it\n    // to compute the event commitment, so we can safely discard it now.\n    let serialized_event = array::subbvec(\n        serialized_event_with_randomness,\n        PRIVATE_EVENT_MSG_CONTENT_NON_EVENT_FIELDS_LEN,\n    );\n\n    enqueue_event_for_validation(\n        contract_address,\n        event_type_id,\n        serialized_event,\n        event_commitment,\n        tx_hash,\n        recipient,\n    );\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_events.nr"},"117":{"source":"use crate::{\n    messages::{\n        discovery::{ComputeNoteHashAndNullifier, nonce_discovery::attempt_note_nonce_discovery},\n        encoding::MAX_MESSAGE_CONTENT_LEN,\n        processing::enqueue_note_for_validation,\n    },\n    utils::array,\n};\nuse protocol_types::{\n    address::AztecAddress, constants::MAX_NOTE_HASHES_PER_TX, debug_log::debug_log_format,\n};\n\n/// The number of fields in a private note message content that are not the note's packed representation.\n// See the call to `std::static_assert` below to see what's in these fields.\nglobal PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN: u32 = 1;\n\n/// The maximum length of the packed representation of a note's contents. This is limited by private log size,\n/// encryption overhead and extra fields in the message (e.g. message type id, storage slot, etc.).\npub global MAX_NOTE_PACKED_LEN: u32 =\n    MAX_MESSAGE_CONTENT_LEN - PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN;\n\npub unconstrained fn process_private_note_msg<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) {\n    let (note_type_id, storage_slot, packed_note) =\n        decode_private_note_msg(msg_metadata, msg_content);\n\n    attempt_note_discovery(\n        contract_address,\n        tx_hash,\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        recipient,\n        compute_note_hash_and_nullifier,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n}\n\n/// Attempts discovery of a note given information about its contents and the transaction in which it is\n/// suspected the note was created.\npub unconstrained fn attempt_note_discovery<Env>(\n    contract_address: AztecAddress,\n    tx_hash: Field,\n    unique_note_hashes_in_tx: BoundedVec<Field, MAX_NOTE_HASHES_PER_TX>,\n    first_nullifier_in_tx: Field,\n    recipient: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n) {\n    let discovered_notes = attempt_note_nonce_discovery(\n        unique_note_hashes_in_tx,\n        first_nullifier_in_tx,\n        compute_note_hash_and_nullifier,\n        contract_address,\n        storage_slot,\n        note_type_id,\n        packed_note,\n    );\n\n    debug_log_format(\n        \"Discovered {0} notes from a private message\",\n        [discovered_notes.len() as Field],\n    );\n\n    discovered_notes.for_each(|discovered_note| {\n        enqueue_note_for_validation(\n            contract_address,\n            storage_slot,\n            discovered_note.note_nonce,\n            packed_note,\n            discovered_note.note_hash,\n            discovered_note.inner_nullifier,\n            tx_hash,\n            recipient,\n        );\n    });\n}\n\nfn decode_private_note_msg(\n    msg_metadata: u64,\n    msg_content: BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>,\n) -> (Field, Field, BoundedVec<Field, MAX_NOTE_PACKED_LEN>) {\n    let note_type_id = msg_metadata as Field; // TODO: make note type id not be a full field\n\n    assert(\n        msg_content.len() > PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN,\n        f\"Invalid private note message: all private note messages must have at least {PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN} fields\",\n    );\n\n    // If PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN is changed, causing the assertion below to fail, then the\n    // destructuring of the private note message encoding below must be updated as well.\n    std::static_assert(\n        PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN == 1,\n        \"unexpected value for PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN\",\n    );\n\n    // We currently have a single field that is not the note's packed representation, which is the storage slot.\n    let storage_slot = msg_content.get(0);\n    let packed_note = array::subbvec(msg_content, PRIVATE_NOTE_MSG_CONTENT_NON_NOTE_FIELDS_LEN);\n\n    (note_type_id, storage_slot, packed_note)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/private_notes.nr"},"118":{"source":"use crate::messages::{\n    discovery::{\n        ComputeNoteHashAndNullifier, partial_notes::process_partial_note_private_msg,\n        private_events::process_private_event_msg, private_notes::process_private_note_msg,\n    },\n    encoding::decode_message,\n    encryption::{aes128::AES128, log_encryption::LogEncryption},\n    msg_type::{\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_EVENT_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID,\n    },\n    processing::message_context::MessageContext,\n};\n\nuse protocol_types::{\n    address::AztecAddress,\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    debug_log::{debug_log, debug_log_format},\n};\n\n/// Processes a message that can contain notes, partial notes, or events.\n///\n/// Notes result in nonce discovery being performed prior to delivery, which requires knowledge of the transaction hash\n/// in which the notes would've been created (typically the same transaction in which the log was emitted), along with\n/// the list of unique note hashes in said transaction and the `compute_note_hash_and_nullifier` function. Once\n/// discovered, the notes are enqueued for validation.\n///\n/// Partial notes result in a pending partial note entry being stored in a PXE capsule, which will later be retrieved to\n/// search for the note's completion public log.\n///\n/// Events are processed by computing an event commitment from the serialized event data and its randomness field, then\n/// enqueueing the event data and commitment for validation.\npub unconstrained fn do_process_message<Env>(\n    contract_address: AztecAddress,\n    compute_note_hash_and_nullifier: ComputeNoteHashAndNullifier<Env>,\n    message_ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n    message_context: MessageContext,\n) {\n    let message = AES128::decrypt_log(message_ciphertext, message_context.recipient);\n\n    // The first thing to do after decrypting the message is to determine what type of message we're processing. We\n    // have 3 message types: private notes, partial notes and events.\n\n    // We decode the message to obtain the message type id, metadata and content.\n    let (msg_type_id, msg_metadata, msg_content) = decode_message(message);\n\n    if msg_type_id == PRIVATE_NOTE_MSG_TYPE_ID {\n        debug_log(\"Processing private note msg\");\n\n        process_private_note_msg(\n            contract_address,\n            message_context.tx_hash,\n            message_context.unique_note_hashes_in_tx,\n            message_context.first_nullifier_in_tx,\n            message_context.recipient,\n            compute_note_hash_and_nullifier,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID {\n        debug_log(\"Processing partial note private msg\");\n\n        process_partial_note_private_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n        );\n    } else if msg_type_id == PRIVATE_EVENT_MSG_TYPE_ID {\n        debug_log(\"Processing private event msg\");\n\n        process_private_event_msg(\n            contract_address,\n            message_context.recipient,\n            msg_metadata,\n            msg_content,\n            message_context.tx_hash,\n        );\n    } else {\n        debug_log_format(\"Unknown msg type id {0}\", [msg_type_id as Field]);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/discovery/process_message.nr"},"119":{"source":"// TODO(#12750): don't make these values assume we're using AES.\nuse crate::{\n    messages::encryption::log_encryption::PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS, utils::array,\n};\n\npub global MAX_MESSAGE_LEN: u32 = PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS;\n\nglobal MESSAGE_EXPANDED_METADATA_LEN: u32 = 1;\n\n// The standard message layout is composed of:\n//  - an initial field called the 'expanded metadata'\n//  - an arbitrary number of fields following that called the 'message content'\n//\n// ```\n// message: [ msg_expanded_metadata, ...msg_content ]\n// ```\n//\n// The expanded metadata itself is interpreted as a u128, of which:\n//  - the upper 64 bits are the message type id\n//  - the lower 64 bits are called the 'message metadata'\n//\n// ```\n// msg_expanded_metadata: [  msg_type_id    |  msg_metadata  ]\n//                        <---  64 bits --->|<--- 64 bits --->\n// ```\n//\n// The meaning of the message metadata and message content depend on the value of the message type id. Note that there\n// is nothing special about the message metadata, it _can_ be considered part of the content. It just has a different\n// name to make it distinct from the message content given that it is not a full field.\n\n/// The maximum length of a message's content, i.e. not including the expanded message metadata.\npub global MAX_MESSAGE_CONTENT_LEN: u32 = MAX_MESSAGE_LEN - MESSAGE_EXPANDED_METADATA_LEN;\n\n/// Encodes a message following aztec-nr's standard message encoding. This message can later be decoded with\n/// `decode_message` to retrieve the original values.\n///\n/// - The `msg_type` is an identifier that groups types of messages that are all processed the same way, e.g. private\n/// notes or events. Possible values are defined in `aztec::messages::msg_type`.\n/// - The `msg_metadata` and `msg_content` are the values stored in the message, whose meaning depends on the\n///  `msg_type`. The only special thing about `msg_metadata` that separates it from `msg_content` is that it is a u64\n/// instead of a full Field (due to details of how messages are encoded), allowing applications that can fit values into\n/// this smaller variable to achieve higher data efficiency.\npub fn encode_message<let N: u32>(\n    msg_type: u64,\n    msg_metadata: u64,\n    msg_content: [Field; N],\n) -> [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] {\n    std::static_assert(\n        msg_content.len() <= MAX_MESSAGE_CONTENT_LEN,\n        \"Invalid message content: it must have a length of at most MAX_MESSAGE_CONTENT_LEN\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n    let mut message: [Field; (N + MESSAGE_EXPANDED_METADATA_LEN)] = std::mem::zeroed();\n\n    message[0] = to_expanded_metadata(msg_type, msg_metadata);\n    for i in 0..msg_content.len() {\n        message[MESSAGE_EXPANDED_METADATA_LEN + i] = msg_content[i];\n    }\n\n    message\n}\n\n/// Decodes a standard aztec-nr message, i.e. one created via `encode_message`, returning the original encoded values.\n///\n/// Note that `encode_message` returns a fixed size array while this function takes a `BoundedVec`: this is because\n/// prior to decoding the message type is unknown, and consequentially not known at compile time. If working with\n/// fixed-size messages, consider using `BoundedVec::from_array` to convert them.\npub unconstrained fn decode_message(\n    message: BoundedVec<Field, MAX_MESSAGE_LEN>,\n) -> (u64, u64, BoundedVec<Field, MAX_MESSAGE_CONTENT_LEN>) {\n    assert(\n        message.len() >= MESSAGE_EXPANDED_METADATA_LEN,\n        f\"Invalid message: it must have at least {MESSAGE_EXPANDED_METADATA_LEN} fields\",\n    );\n\n    // If MESSAGE_EXPANDED_METADATA_LEN is changed, causing the assertion below to fail, then the destructuring of\n    // the message encoding below must be updated as well.\n    std::static_assert(\n        MESSAGE_EXPANDED_METADATA_LEN == 1,\n        \"unexpected value for MESSAGE_EXPANDED_METADATA_LEN\",\n    );\n\n    let msg_expanded_metadata = message.get(0);\n    let (msg_type_id, msg_metadata) = from_expanded_metadata(msg_expanded_metadata);\n    let msg_content = array::subbvec(message, MESSAGE_EXPANDED_METADATA_LEN);\n\n    (msg_type_id, msg_metadata, msg_content)\n}\n\nglobal U64_SHIFT_MULTIPLIER: Field = 2.pow_32(64);\n\nfn to_expanded_metadata(msg_type: u64, msg_metadata: u64) -> Field {\n    // We use multiplication instead of bit shifting operations to shift the type bits as bit shift operations are\n    // expensive in circuits.\n    let type_field: Field = (msg_type as Field) * U64_SHIFT_MULTIPLIER;\n    let msg_metadata_field = msg_metadata as Field;\n\n    type_field + msg_metadata_field\n}\n\nfn from_expanded_metadata(input: Field) -> (u64, u64) {\n    input.assert_max_bit_size::<128>();\n    let msg_metadata = (input as u64);\n    let msg_type = ((input - (msg_metadata as Field)) / U64_SHIFT_MULTIPLIER) as u64;\n    // Use division instead of bit shift since bit shifts are expensive in circuits\n    (msg_type, msg_metadata)\n}\n\nmod tests {\n    use crate::utils::array::subarray::subarray;\n    use super::{\n        decode_message, encode_message, from_expanded_metadata, MAX_MESSAGE_CONTENT_LEN,\n        to_expanded_metadata,\n    };\n\n    global U64_MAX: u64 = (2.pow_32(64) - 1) as u64;\n    global U128_MAX: Field = (2.pow_32(128) - 1);\n\n    #[test]\n    unconstrained fn encode_decode_empty_message(msg_type: u64, msg_metadata: u64) {\n        let encoded = encode_message(msg_type, msg_metadata, []);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_short_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN / 2],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn encode_decode_full_message(\n        msg_type: u64,\n        msg_metadata: u64,\n        msg_content: [Field; MAX_MESSAGE_CONTENT_LEN],\n    ) {\n        let encoded = encode_message(msg_type, msg_metadata, msg_content);\n        let (decoded_msg_type, decoded_msg_metadata, decoded_msg_content) =\n            decode_message(BoundedVec::from_array(encoded));\n\n        assert_eq(decoded_msg_type, msg_type);\n        assert_eq(decoded_msg_metadata, msg_metadata);\n        assert_eq(decoded_msg_content.len(), msg_content.len());\n        assert_eq(subarray(decoded_msg_content.storage(), 0), msg_content);\n    }\n\n    #[test]\n    unconstrained fn to_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let packed = to_expanded_metadata(U64_MAX, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let packed = to_expanded_metadata(U64_MAX, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let packed = to_expanded_metadata(0, U64_MAX);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let packed = to_expanded_metadata(0, 0);\n        let (msg_type, msg_metadata) = from_expanded_metadata(packed);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn from_expanded_metadata_packing() {\n        // Test case 1: All bits set\n        let input = U128_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 2: Only log type bits set\n        let input = (U128_MAX - U64_MAX as Field);\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, U64_MAX);\n        assert_eq(msg_metadata, 0);\n\n        // Test case 3: Only msg_metadata bits set\n        let input = U64_MAX as Field;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, U64_MAX);\n\n        // Test case 4: No bits set\n        let input = 0;\n        let (msg_type, msg_metadata) = from_expanded_metadata(input);\n        assert_eq(msg_type, 0);\n        assert_eq(msg_metadata, 0);\n    }\n\n    #[test]\n    unconstrained fn to_from_expanded_metadata(original_msg_type: u64, original_msg_metadata: u64) {\n        let packed = to_expanded_metadata(original_msg_type, original_msg_metadata);\n        let (unpacked_msg_type, unpacked_msg_metadata) = from_expanded_metadata(packed);\n\n        assert_eq(original_msg_type, unpacked_msg_type);\n        assert_eq(original_msg_metadata, unpacked_msg_metadata);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/encoding.nr"},"120":{"source":"use dep::protocol_types::{\n    constants::{\n        GENERATOR_INDEX__SYMMETRIC_KEY, GENERATOR_INDEX__SYMMETRIC_KEY_2,\n        PRIVATE_LOG_CIPHERTEXT_LEN,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::Point,\n};\n\nuse crate::{\n    keys::{\n        ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        ephemeral::generate_ephemeral_key_pair,\n    },\n    messages::{\n        encryption::log_encryption::{\n            EPH_PK_SIGN_BYTE_SIZE_IN_BYTES, EPH_PK_X_SIZE_IN_FIELDS,\n            HEADER_CIPHERTEXT_SIZE_IN_BYTES, LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS,\n        },\n        logs::arithmetic_generics_utils::{\n            get_arr_of_size__log_bytes__from_PT, get_arr_of_size__log_bytes_padding__from_PT,\n        },\n    },\n    oracle::{aes128_decrypt::aes128_decrypt_oracle, shared_secret::get_shared_secret},\n    prelude::AztecAddress,\n    utils::{\n        array,\n        conversion::{\n            bytes_to_fields::{bytes_from_fields, bytes_to_fields},\n            fields_to_bytes::{fields_from_bytes, fields_to_bytes},\n        },\n        point::{get_sign_of_point, point_from_x_coord_and_sign, point_to_bytes},\n        random::get_random_bytes,\n    },\n};\n\nuse std::aes128::aes128_encrypt;\n\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let rand1: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY,\n    );\n    let rand2: Field = poseidon2_hash_with_separator(\n        [shared_secret.x, shared_secret.y],\n        GENERATOR_INDEX__SYMMETRIC_KEY_2,\n    );\n    let rand1_bytes: [u8; 16] = rand1.to_le_bytes();\n    let rand2_bytes: [u8; 16] = rand2.to_le_bytes();\n    let mut bytes: [u8; 32] = [0; 32];\n    for i in 0..16 {\n        bytes[i] = rand1_bytes[i];\n        bytes[i + 1] = rand2_bytes[i];\n    }\n    bytes\n}\n\n// TODO(#10537): Consider nuking this function.\nfn extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> [u8; 32] {\n    let shared_secret_bytes: [u8; 32] = point_to_bytes(shared_secret);\n\n    let mut shared_secret_bytes_with_separator: [u8; 33] = std::mem::zeroed();\n    for i in 0..shared_secret_bytes.len() {\n        shared_secret_bytes_with_separator[i] = shared_secret_bytes[i];\n    }\n    shared_secret_bytes_with_separator[32] = GENERATOR_INDEX__SYMMETRIC_KEY;\n\n    sha256::digest(shared_secret_bytes_with_separator)\n}\n\nfn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n    shared_secret: Point,\n    randomness_extraction_fn: fn(Point) -> [u8; 32],\n) -> ([u8; 16], [u8; 16]) {\n    let random_256_bits = randomness_extraction_fn(shared_secret);\n    let mut sym_key = [0; 16];\n    let mut iv = [0; 16];\n    for i in 0..16 {\n        sym_key[i] = random_256_bits[i];\n        iv[i] = random_256_bits[i + 16];\n    }\n    (sym_key, iv)\n}\n\n// TODO(#10537): Consider nuking this function.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_sha256,\n    )\n}\n\n// TODO(#10537): This function is currently unused. Consider using it instead of the sha256 one.\npub fn derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_poseidon2(\n    shared_secret: Point,\n) -> ([u8; 16], [u8; 16]) {\n    derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret(\n        shared_secret,\n        extract_close_to_uniformly_random_256_bits_from_ecdh_shared_secret_using_poseidon2,\n    )\n}\n\npub struct AES128 {}\n\nimpl LogEncryption for AES128 {\n    fn encrypt_log<let PLAINTEXT_LEN: u32>(\n        plaintext: [Field; PLAINTEXT_LEN],\n        recipient: AztecAddress,\n    ) -> [Field; PRIVATE_LOG_CIPHERTEXT_LEN] {\n        // AES 128 operates on bytes, not fields, so we need to convert the fields to bytes.\n        // (This process is then reversed when processing the log in `do_process_log`)\n        let plaintext_bytes = fields_to_bytes(plaintext);\n\n        // *****************************************************************************\n        // Compute the shared secret\n        // *****************************************************************************\n\n        let (eph_sk, eph_pk) = generate_ephemeral_key_pair();\n\n        let eph_pk_sign_byte: u8 = get_sign_of_point(eph_pk) as u8;\n\n        // (not to be confused with the tagging shared secret)\n        let ciphertext_shared_secret =\n            derive_ecdh_shared_secret_using_aztec_address(eph_sk, recipient);\n\n        // TODO: also use this shared secret for deriving note randomness.\n\n        // *****************************************************************************\n        // Convert the plaintext into whatever format the encryption function expects\n        // *****************************************************************************\n\n        // Already done for this strategy: AES expects bytes.\n\n        // *****************************************************************************\n        // Encrypt the plaintext\n        // *****************************************************************************\n\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        let ciphertext_bytes = aes128_encrypt(plaintext_bytes, iv, sym_key);\n\n        // |full_pt| = |pt_length| + |pt|\n        // |pt_aes_padding| = 16 - (|full_pt| % 16)\n        // or... since a % b is the same as a - b * (a // b) (integer division), so:\n        // |pt_aes_padding| = 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        // |ct| = |full_pt| + |pt_aes_padding|\n        //      = |full_pt| + 16 - (|full_pt| - 16 * (|full_pt| // 16))\n        //      = 16 + 16 * (|full_pt| // 16)\n        //      = 16 * (1 + |full_pt| // 16)\n        assert(ciphertext_bytes.len() == 16 * (1 + (PLAINTEXT_LEN * 32) / 16));\n\n        // *****************************************************************************\n        // Compute the header ciphertext\n        // *****************************************************************************\n\n        // Header contains only the length of the ciphertext stored in 2 bytes.\n        // TODO: consider nuking the header altogether and just have a fixed-size ciphertext by padding the plaintext.\n        // This would be more costly constraint-wise but cheaper DA-wise.\n        let mut header_plaintext: [u8; 2] = [0 as u8; 2];\n        let ciphertext_bytes_length = ciphertext_bytes.len();\n        header_plaintext[0] = (ciphertext_bytes_length >> 8) as u8;\n        header_plaintext[1] = ciphertext_bytes_length as u8;\n\n        // TODO: this is insecure and wasteful:\n        // \"Insecure\", because the esk shouldn't be used twice (once for the header,\n        // and again for the proper ciphertext) (at least, I never got the\n        // \"go ahead\" that this would be safe, unfortunately).\n        // \"Wasteful\", because the exact same computation is happening further down.\n        // I'm leaving that 2nd computation where it is, because this 1st computation\n        // will be imminently deleted, when the header logic is deleted.\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Note: the aes128_encrypt builtin fn automatically appends bytes to the\n        // input, according to pkcs#7; hence why the output `header_ciphertext_bytes` is 16\n        // bytes larger than the input in this case.\n        let header_ciphertext_bytes = aes128_encrypt(header_plaintext, iv, sym_key);\n        // I recall that converting a slice to an array incurs constraints, so I'll check the length this way instead:\n        assert(header_ciphertext_bytes.len() == HEADER_CIPHERTEXT_SIZE_IN_BYTES);\n\n        // *****************************************************************************\n        // Prepend / append more bytes of data to the ciphertext, before converting back\n        // to fields.\n        // *****************************************************************************\n\n        let mut log_bytes_padding_to_mult_31 =\n            get_arr_of_size__log_bytes_padding__from_PT::<PLAINTEXT_LEN * 32>();\n        // Safety: this randomness won't be constrained to be random. It's in the\n        // interest of the executor of this fn to encrypt with random bytes.\n        log_bytes_padding_to_mult_31 = unsafe { get_random_bytes() };\n\n        let mut log_bytes = get_arr_of_size__log_bytes__from_PT::<PLAINTEXT_LEN * 32>();\n\n        assert(\n            log_bytes.len() % 31 == 0,\n            \"Unexpected error: log_bytes.len() should be divisible by 31, by construction.\",\n        );\n\n        log_bytes[0] = eph_pk_sign_byte;\n        let mut offset = 1;\n        for i in 0..header_ciphertext_bytes.len() {\n            log_bytes[offset + i] = header_ciphertext_bytes[i];\n        }\n        offset += header_ciphertext_bytes.len();\n\n        for i in 0..ciphertext_bytes.len() {\n            log_bytes[offset + i] = ciphertext_bytes[i];\n        }\n        offset += ciphertext_bytes.len();\n\n        for i in 0..log_bytes_padding_to_mult_31.len() {\n            log_bytes[offset + i] = log_bytes_padding_to_mult_31[i];\n        }\n\n        assert(\n            offset + log_bytes_padding_to_mult_31.len() == log_bytes.len(),\n            \"Something has gone wrong\",\n        );\n\n        // *****************************************************************************\n        // Convert bytes back to fields\n        // *****************************************************************************\n\n        // TODO(#12749): As Mike pointed out, we need to make logs produced by different encryption schemes\n        // indistinguishable from each other and for this reason the output here and in the last for-loop of this function\n        // should cover a full field.\n        let log_bytes_as_fields = bytes_to_fields(log_bytes);\n\n        // *****************************************************************************\n        // Prepend / append fields, to create the final log\n        // *****************************************************************************\n\n        let mut ciphertext: [Field; PRIVATE_LOG_CIPHERTEXT_LEN] = [0; PRIVATE_LOG_CIPHERTEXT_LEN];\n\n        ciphertext[0] = eph_pk.x;\n\n        let mut offset = 1;\n        for i in 0..log_bytes_as_fields.len() {\n            ciphertext[offset + i] = log_bytes_as_fields[i];\n        }\n        offset += log_bytes_as_fields.len();\n\n        for i in offset..PRIVATE_LOG_CIPHERTEXT_LEN {\n            // We need to get a random value that fits in 31 bytes to not leak information about the size of the log\n            // (all the \"real\" log fields contain at most 31 bytes because of the way we convert the bytes to fields).\n            // TODO(#12749): Long term, this is not a good solution.\n\n            // Safety: we assume that the sender wants for the log to be private - a malicious one could simply reveal its\n            // contents publicly. It is therefore fine to trust the sender to provide random padding.\n            let field_bytes = unsafe { get_random_bytes::<31>() };\n            ciphertext[i] = Field::from_be_bytes::<31>(field_bytes);\n        }\n\n        ciphertext\n    }\n\n    unconstrained fn decrypt_log(\n        ciphertext: BoundedVec<Field, PRIVATE_LOG_CIPHERTEXT_LEN>,\n        recipient: AztecAddress,\n    ) -> BoundedVec<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS> {\n        let eph_pk_x = ciphertext.get(0);\n\n        let ciphertext_without_eph_pk_x_fields = array::subbvec::<Field, PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS>(\n            ciphertext,\n            EPH_PK_X_SIZE_IN_FIELDS,\n        );\n\n        // Convert the ciphertext represented as fields to a byte representation (its original format)\n        let ciphertext_without_eph_pk_x = bytes_from_fields(ciphertext_without_eph_pk_x_fields);\n\n        // First byte of the ciphertext represents the ephemeral public key sign\n        let eph_pk_sign_bool = ciphertext_without_eph_pk_x.get(0) != 0;\n        // With the sign and the x-coordinate of the ephemeral public key, we can reconstruct the point\n        let eph_pk = point_from_x_coord_and_sign(eph_pk_x, eph_pk_sign_bool);\n\n        // Derive shared secret and symmetric key\n        let ciphertext_shared_secret = get_shared_secret(recipient, eph_pk);\n        let (sym_key, iv) = derive_aes_symmetric_key_and_iv_from_ecdh_shared_secret_using_sha256(\n            ciphertext_shared_secret,\n        );\n\n        // Extract the header ciphertext\n        let header_start = EPH_PK_SIGN_BYTE_SIZE_IN_BYTES; // Skip eph_pk_sign byte\n        let header_ciphertext: [u8; HEADER_CIPHERTEXT_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), header_start);\n        // We need to convert the array to a BoundedVec because the oracle expects a BoundedVec as it's designed to work\n        // with logs with unknown length at compile time. This would not be necessary here as the header ciphertext length\n        // is fixed. But we do it anyway to not have to have duplicate oracles.\n        let header_ciphertext_bvec =\n            BoundedVec::<u8, HEADER_CIPHERTEXT_SIZE_IN_BYTES>::from_array(header_ciphertext);\n\n        // Decrypt header\n        let header_plaintext = aes128_decrypt_oracle(header_ciphertext_bvec, iv, sym_key);\n\n        // Extract ciphertext length from header (2 bytes, big-endian)\n        let ciphertext_length =\n            ((header_plaintext.get(0) as u32) << 8) | (header_plaintext.get(1) as u32);\n\n        // Extract and decrypt main ciphertext\n        let ciphertext_start = header_start + HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n        let ciphertext_with_padding: [u8; (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES] =\n            array::subarray(ciphertext_without_eph_pk_x.storage(), ciphertext_start);\n        let ciphertext: BoundedVec<u8, (PRIVATE_LOG_CIPHERTEXT_LEN - EPH_PK_X_SIZE_IN_FIELDS) * 31 - HEADER_CIPHERTEXT_SIZE_IN_BYTES - EPH_PK_SIGN_BYTE_SIZE_IN_BYTES> =\n            BoundedVec::from_parts(ciphertext_with_padding, ciphertext_length);\n\n        // Decrypt main ciphertext and return it\n        let plaintext_bytes = aes128_decrypt_oracle(ciphertext, iv, sym_key);\n\n        // Each field of the original note log was serialized to 32 bytes so we convert the bytes back to fields.\n        fields_from_bytes(plaintext_bytes)\n    }\n}\n\nmod test {\n    use crate::{\n        keys::ecdh_shared_secret::derive_ecdh_shared_secret_using_aztec_address,\n        messages::encryption::log_encryption::{LogEncryption, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS},\n        test::helpers::test_environment::TestEnvironment,\n    };\n    use super::AES128;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::{embedded_curve_ops::EmbeddedCurveScalar, test::OracleMock};\n\n    #[test]\n    unconstrained fn encrypt_decrypt_log() {\n        let mut env = TestEnvironment::new();\n        // Advance 1 block so we can read historic state from private\n        env.advance_block_by(1);\n\n        let plaintext = [1, 2, 3];\n\n        let recipient = AztecAddress::from_field(\n            0x25afb798ea6d0b8c1618e50fdeafa463059415013d3b7c75d46abf5e242be70c,\n        );\n\n        // Mock random values for deterministic test\n        let eph_sk = 0x1358d15019d4639393d62b97e1588c095957ce74a1c32d6ec7d62fe6705d9538;\n        let _ = OracleMock::mock(\"getRandomField\").returns(eph_sk).times(1);\n\n        let randomness = 0x0101010101010101010101010101010101010101010101010101010101010101;\n        let _ = OracleMock::mock(\"getRandomField\").returns(randomness).times(1000000);\n\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(\n            IndexedTaggingSecret::deserialize([69420, 1337]),\n        );\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        // Encrypt the log\n        let encrypted_log = BoundedVec::from_array(AES128::encrypt_log(plaintext, recipient));\n\n        // Mock shared secret for deterministic test\n        let shared_secret = derive_ecdh_shared_secret_using_aztec_address(\n            EmbeddedCurveScalar::from_field(eph_sk),\n            recipient,\n        );\n        let _ = OracleMock::mock(\"getSharedSecret\").returns(shared_secret);\n\n        // Decrypt the log\n        let decrypted = AES128::decrypt_log(encrypted_log, recipient);\n\n        // The decryption function spits out a BoundedVec because it's designed to work with logs with unknown length\n        // at compile time. For this reason we need to convert the original input to a BoundedVec.\n        let plaintext_bvec =\n            BoundedVec::<Field, PRIVATE_LOG_PLAINTEXT_SIZE_IN_FIELDS>::from_array(plaintext);\n\n        // Verify decryption matches original plaintext\n        assert_eq(decrypted, plaintext_bvec, \"Decrypted bytes should match original plaintext\");\n\n        // The following is a workaround of \"struct is never constructed\" Noir compilation error (we only ever use\n        // static methods of the struct).\n        let _ = AES128 {};\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/encryption/aes128.nr"},"124":{"source":"use crate::messages::encryption::log_encryption::HEADER_CIPHERTEXT_SIZE_IN_BYTES;\n\n/********************************************************/\n// Disgusting arithmetic on generics\n/********************************************************/\n\n// In this section, instead of initialising arrays with very complicated generic\n// arithmetic, such as:\n// let my_arr: [u8; (((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)) + ((((((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1))))] = [0; (((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)) + ((((((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + (HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1))))];\n//... we instead do the arithmetic a little bit at a time, so that the computation\n// can be audited and understood. Now, we can't do arithmetic on generics in the body\n// of a function, so we abusing functions in the following way:\n\n// |full_pt| = |pt| = (N * 32) + 64\nfn get_arr_of_size__full_plaintext<let PT: u32>() -> [u8; PT] {\n    [0; PT]\n}\n\n// |pt_aes_padding| = 16 - (|full_pt| % 16)\nfn get_arr_of_size__plaintext_aes_padding<let FULL_PT: u32>(\n    _full_pt: [u8; FULL_PT],\n) -> [u8; 16 - (FULL_PT % 16)] {\n    [0; 16 - (FULL_PT % 16)]\n}\n\n// |ct| = |full_pt| + |pt_aes_padding|\nfn get_arr_of_size__ciphertext<let FULL_PT: u32, let PT_AES_PADDING: u32>(\n    _full_pt: [u8; FULL_PT],\n    _pt_aes_padding: [u8; PT_AES_PADDING],\n) -> [u8; FULL_PT + PT_AES_PADDING] {\n    [0; FULL_PT + PT_AES_PADDING]\n}\n\n// Ok, so we have the following bytes:\n// eph_pk_sign, header_ciphertext, ciphertext:\n// Let lbwop = 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + |ct| // aka log bytes without padding\nfn get_arr_of_size__log_bytes_without_padding<let CT: u32>(\n    _ct: [u8; CT],\n) -> [u8; 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + CT] {\n    [0; 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + CT]\n}\n\n// Recall:\n//   lbwop := 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + |ct| // aka log bytes without padding\n// We now want to pad b to the next multiple of 31, so as to \"fill\" fields.\n// Let p be that padding.\n// p = 31 * ceil(lbwop / 31) - lbwop\n//   = 31 * ((lbwop + 30) // 31) - lbwop\n//     (because ceil(x / y) = (x + y - 1) // y ).\nfn get_arr_of_size__log_bytes_padding<let LBWOP: u32>(\n    _lbwop: [u8; LBWOP],\n) -> [u8; (31 * ((LBWOP + 30) / 31)) - LBWOP] {\n    [0; (31 * ((LBWOP + 30) / 31)) - LBWOP]\n}\n\n// |log_bytes| = 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + |ct| + p // aka log bytes (with padding)\n// Recall:\n//   lbwop := 1 + HEADER_CIPHERTEXT_SIZE_IN_BYTES + |ct|\n//   p is the padding\nfn get_arr_of_size__log_bytes<let LBWOP: u32, let P: u32>(\n    _lbwop: [u8; LBWOP],\n    _p: [u8; P],\n) -> [u8; LBWOP + P] {\n    [0; LBWOP + P]\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\n// PT is the plaintext length.\npub(crate) fn get_arr_of_size__log_bytes_padding__from_PT<let PT: u32>() -> [u8; ((((((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    p\n}\n\n// The return type is pasted from the LSP's expectation, because it was too difficult\n// to match its weird way of doing algebra. It doesn't know all rules of arithmetic.\npub(crate) fn get_arr_of_size__log_bytes__from_PT<let PT: u32>() -> [u8; (((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1) + ((((((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1) + 30) / 31) * 31) - ((PT + (16 - (PT % 16))) + HEADER_CIPHERTEXT_SIZE_IN_BYTES + 1)))] {\n    let full_pt = get_arr_of_size__full_plaintext::<PT>();\n    let pt_aes_padding = get_arr_of_size__plaintext_aes_padding(full_pt);\n    let ct = get_arr_of_size__ciphertext(full_pt, pt_aes_padding);\n    let lbwop = get_arr_of_size__log_bytes_without_padding(ct);\n    let p = get_arr_of_size__log_bytes_padding(lbwop);\n    let log_bytes = get_arr_of_size__log_bytes(lbwop, p);\n    log_bytes\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/logs/arithmetic_generics_utils.nr"},"125":{"source":"use crate::{\n    event::event_interface::EventInterface,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        msg_type::PRIVATE_EVENT_MSG_TYPE_ID,\n    },\n    oracle::random::random,\n    prelude::AztecAddress,\n};\nuse protocol_types::{\n    constants::PRIVATE_LOG_CIPHERTEXT_LEN,\n    traits::{Serialize, ToField},\n    utils::arrays::array_concat,\n};\n\n/// Creates an encrypted private event message (i.e. one of type `PRIVATE_EVENT_MSG_TYPE_ID`) by encoding the contents\n/// of the event and then encrypting them for `recipient`.\npub fn to_encrypted_private_event_message<Event, let N: u32>(\n    event: Event,\n    recipient: AztecAddress,\n) -> ([Field; PRIVATE_LOG_CIPHERTEXT_LEN], Field)\nwhere\n    Event: EventInterface + Serialize<N>,\n{\n    // In private events, we automatically inject randomness to prevent event commitment preimage attacks and event\n    // commitment collisions (the commitments are included in the nullifier tree and duplicate nullifiers are by\n    // definition not allowed).\n    // Safety: We use the randomness to preserve the privacy of the event recipient by preventing brute-forcing,\n    // so a malicious sender could use non-random values to make the event less private. But they already know\n    // the full event pre-image anyway, and so the recipient already trusts them to not disclose this information.\n    // We can therefore assume that the sender will cooperate in the random value generation.\n    let randomness = unsafe { random() };\n\n    // TODO(#11571): with decryption happening in Noir we can now use the Packable trait instead.\n    let serialized_event_with_randomness = array_concat([randomness], event.serialize());\n\n    // Private events are encoded by placing the event type id (which is expected to fit in 32 bits) in the metadata.\n    let plaintext = encode_message(\n        PRIVATE_EVENT_MSG_TYPE_ID,\n        Event::get_event_type_id().to_field() as u64,\n        serialized_event_with_randomness,\n    );\n\n    (AES128::encrypt_log(plaintext, recipient), randomness)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/logs/event.nr"},"127":{"source":"use crate::{\n    context::PrivateContext,\n    messages::{\n        encoding::encode_message,\n        encryption::{aes128::AES128, log_encryption::LogEncryption},\n        logs::utils::prefix_with_tag,\n        msg_type::{PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID, PRIVATE_NOTE_MSG_TYPE_ID},\n        offchain_messages::emit_offchain_message,\n    },\n    note::{note_emission::NoteEmission, note_interface::NoteType},\n    utils::{array::subarray::subarray, remove_constraints::remove_constraints},\n};\nuse protocol_types::{\n    abis::note_hash::NoteHash,\n    address::AztecAddress,\n    constants::{PRIVATE_LOG_CIPHERTEXT_LEN, PRIVATE_LOG_SIZE_IN_FIELDS},\n    traits::Packable,\n};\n\n// TODO: it feels like this existence check is in the wrong place. In fact, why is it needed at all? Under what circumstances have we found a non-existent note being emitted accidentally?\nfn assert_note_exists(context: PrivateContext, note_hash_counter: u32) {\n    // TODO(#8589): use typesystem to skip this check when not needed\n    let note_exists =\n        context.note_hashes.storage().any(|n: NoteHash| n.counter == note_hash_counter);\n    assert(note_exists, \"Can only emit a note log for an existing note.\");\n}\n\npub fn compute_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PRIVATE_NOTE_MSG_TYPE_ID,\n    )\n}\n\npub fn compute_partial_note_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    compute_log(\n        note,\n        storage_slot,\n        recipient,\n        sender,\n        PARTIAL_NOTE_PRIVATE_MSG_TYPE_ID,\n    )\n}\n\nfn compute_log<Note, let N: u32>(\n    note: Note,\n    storage_slot: Field,\n    recipient: AztecAddress,\n    sender: AztecAddress,\n    msg_type: u64,\n) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let packed_note = note.pack();\n\n    // A note message's content is the storage slot followed by the packed note representation\n    let mut msg_content: [Field; N + 1] = std::mem::zeroed();\n    msg_content[0] = storage_slot;\n    for i in 0..packed_note.len() {\n        msg_content[1 + i] = packed_note[i];\n    }\n\n    // Notes use the note type id for metadata\n    let plaintext = encode_message(msg_type, Note::get_id() as u64, msg_content);\n\n    let ciphertext = AES128::encrypt_log(plaintext, recipient);\n\n    let log = prefix_with_tag(ciphertext, sender, recipient);\n\n    log\n}\n\n/// Sends an encrypted message to `recipient` with the content of the note, which they will discover when processing\n/// private logs.\npub fn encode_and_encrypt_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n        assert_note_exists(*context, note_hash_counter);\n\n        let encrypted_log = compute_note_log(note, storage_slot, recipient, sender);\n        // Regardless of the original note size `N, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_raw_note_log(encrypted_log, length, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note`, except encryption is unconstrained. This means that the sender is free to make\n/// the log contents be whatever they wish, potentially resulting in scenarios in which the recipient is unable to\n/// decrypt and process the payload, **leading to the note being lost**.\n///\n/// Only use this function in scenarios where the recipient not receiving the note is an acceptable outcome.\npub fn encode_and_encrypt_note_unconstrained<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log = unsafe {\n            remove_constraints(|| compute_note_log(note, storage_slot, recipient, sender))\n        };\n        // Regardless of the original note size `N`, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_raw_note_log(encrypted_log, length, note_hash_counter);\n    }\n}\n\n/// Same as `encode_and_encrypt_note_unconstrained`, except the note is emitted as an offchain message instead of a\n/// private log.\n///\n/// Like `encode_and_encrypt_note_unconstrained`, this function uses unconstrained encryption. The sender can set any\n/// message contents, potentially preventing recipient decryption and resulting in note loss. Since offchain messages\n/// inherently lack delivery guarantees, constrained encryption provides no benefit and is not offered.\n///\n/// While delivery is not guaranteed, message integrity is still protected via cryptographic commitments in the note\n/// hash tree. For guaranteed delivery, use `encode_and_encrypt_note` with private logs instead. See\n/// `messages::offchain_message::emit_offchain_message` for more details on delivery guarantees.\npub fn encode_and_encrypt_note_and_emit_as_offchain_message<Note, let N: u32>(\n    context: &mut PrivateContext,\n    recipient: AztecAddress,\n    // We need this because to compute a tagging secret, we require a sender:\n    sender: AztecAddress,\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> ()\nwhere\n    Note: NoteType + Packable<N>,\n{\n    |e: NoteEmission<Note>| {\n        let note = e.note;\n        let storage_slot = e.storage_slot;\n        let note_hash_counter = e.note_hash_counter;\n\n        assert_note_exists(*context, note_hash_counter);\n\n        // Safety: this function does not constrain the encryption of the log, as explained on its description.\n        let encrypted_log = unsafe {\n            remove_constraints(|| compute_note_log(note, storage_slot, recipient, sender))\n        };\n\n        // Remove the tag from the log\n        // TODO: This is a tech debt. We should refactor this file such that the log is by default computed without\n        // the tag.\n        let message_ciphertext: [_; PRIVATE_LOG_CIPHERTEXT_LEN] = subarray(encrypted_log, 1);\n\n        emit_offchain_message(message_ciphertext, recipient);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/logs/note.nr"},"128":{"source":"use crate::{\n    oracle::notes::{get_app_tag_as_sender, increment_app_tagging_secret_index_as_sender},\n    prelude::AztecAddress,\n};\n\npub(crate) fn prefix_with_tag<let L: u32>(\n    log_without_tag: [Field; L],\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) -> [Field; L + 1] {\n    // Safety: we assume that the sender wants for the recipient to find the tagged note, and therefore that they will\n    // cooperate and use the correct tag. Usage of a bad tag will result in the recipient not being able to find the\n    // note automatically.\n    let tag = unsafe { get_app_tag_as_sender(sender, recipient) };\n    increment_app_tagging_secret_index_as_sender(sender, recipient);\n\n    let mut log_with_tag = [0; L + 1];\n\n    log_with_tag[0] = tag;\n    for i in 0..log_without_tag.len() {\n        log_with_tag[i + 1] = log_without_tag[i];\n    }\n\n    log_with_tag\n}\n\nmod test {\n    use super::prefix_with_tag;\n    use protocol_types::{\n        address::AztecAddress,\n        indexed_tagging_secret::IndexedTaggingSecret,\n        traits::{Deserialize, FromField},\n    };\n    use std::test::OracleMock;\n\n    #[test]\n    unconstrained fn prefixing_with_tag() {\n        let sender = AztecAddress::from_field(1);\n        let recipient = AztecAddress::from_field(2);\n\n        let app_tagging_secret = 42;\n        let index = 5;\n\n        // I am using the deserialize trait instead of directly instantiating the IndexedTaggingSecret struct because\n        // direct instantiation functionality is not exposed.\n        let indexed_tagging_secret = IndexedTaggingSecret::deserialize([app_tagging_secret, index]);\n\n        // Mock the tagging oracles\n        let _ = OracleMock::mock(\"getIndexedTaggingSecretAsSender\").returns(indexed_tagging_secret);\n        let _ = OracleMock::mock(\"incrementAppTaggingSecretIndexAsSender\").returns(());\n\n        let log_without_tag = [1, 2, 3];\n        let log_with_tag = prefix_with_tag(log_without_tag, sender, recipient);\n\n        let expected_result = [indexed_tagging_secret.compute_tag(recipient), 1, 2, 3];\n\n        // Check tag was prefixed correctly\n        assert_eq(log_with_tag, expected_result, \"Tag was not prefixed correctly\");\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/logs/utils.nr"},"136":{"source":"pub(crate) mod event_validation_request;\npub mod message_context;\npub(crate) mod note_validation_request;\npub(crate) mod log_retrieval_request;\npub(crate) mod log_retrieval_response;\npub(crate) mod pending_tagged_log;\n\nuse crate::{\n    capsules::CapsuleArray,\n    event::event_selector::EventSelector,\n    messages::{\n        discovery::{\n            partial_notes::DeliveredPendingPartialNote, private_events::MAX_EVENT_SERIALIZED_LEN,\n            private_notes::MAX_NOTE_PACKED_LEN,\n        },\n        processing::{\n            log_retrieval_request::LogRetrievalRequest,\n            log_retrieval_response::LogRetrievalResponse,\n            note_validation_request::NoteValidationRequest, pending_tagged_log::PendingTaggedLog,\n        },\n    },\n    oracle,\n};\nuse event_validation_request::EventValidationRequest;\nuse protocol_types::{address::AztecAddress, hash::sha256_to_field};\n\n// Base slot for the pending tagged log array to which the fetch_tagged_logs oracle inserts found private logs.\nglobal PENDING_TAGGED_LOG_ARRAY_BASE_SLOT: Field =\n    sha256_to_field(\"AZTEC_NR::PENDING_TAGGED_LOG_ARRAY_BASE_SLOT\".as_bytes());\n\nglobal NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\nglobal LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT: Field = sha256_to_field(\n    \"AZTEC_NR::LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT\".as_bytes(),\n);\n\n/// Searches for private logs emitted by `contract_address` that might contain messages for one of the local accounts,\n/// and stores them in a `CapsuleArray` which is then returned.\npub(crate) unconstrained fn get_private_logs(\n    contract_address: AztecAddress,\n) -> CapsuleArray<PendingTaggedLog> {\n    // We will eventually perform log discovery via tagging here, but for now we simply call the `fetchTaggedLogs`\n    // oracle. This makes PXE synchronize tags, download logs and store the pending tagged logs in a capsule array.\n    oracle::message_processing::fetch_tagged_logs(PENDING_TAGGED_LOG_ARRAY_BASE_SLOT);\n\n    CapsuleArray::at(contract_address, PENDING_TAGGED_LOG_ARRAY_BASE_SLOT)\n}\n\n/// Enqueues a note for validation by PXE, so that it becomes aware of a note's existence allowing for later retrieval\n/// via `get_notes` oracle. The note will be scoped to `contract_address`, meaning other contracts will not be able to\n/// access it unless authorized.\n///\n/// In order for the note validation and insertion to occur, `validate_enqueued_notes_and_events` must be later called.\n/// For optimal performance, accumulate as many note validation requests as possible and then validate them all at the\n/// end (which results in PXE minimizing the number of network round-trips).\n///\n/// The `packed_note` is what `getNotes` will later return. PXE indexes notes by `storage_slot`, so this value\n/// is typically used to filter notes that correspond to different state variables. `note_hash` and `nullifier` are\n/// the inner hashes, i.e. the raw hashes returned by `NoteHash::compute_note_hash` and\n/// `NoteHash::compute_nullifier`. PXE will verify that the siloed unique note hash was inserted into the tree\n/// at `tx_hash`, and will store the nullifier to later check for nullification.\n///\n/// `recipient` is the account to which the note was sent to. Other accounts will not be able to access this note (e.g.\n/// other accounts will not be able to see one another's token balance notes, even in the same PXE) unless authorized.\npub(crate) unconstrained fn enqueue_note_for_validation(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_nonce: Field,\n    packed_note: BoundedVec<Field, MAX_NOTE_PACKED_LEN>,\n    note_hash: Field,\n    nullifier: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `NoteValidationRequest`\n    CapsuleArray::at(contract_address, NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        NoteValidationRequest {\n            contract_address,\n            storage_slot,\n            note_nonce,\n            packed_note,\n            note_hash,\n            nullifier,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Enqueues an event for validation by PXE, so that it can be efficiently validated and then inserted into the event\n/// store.\n///\n/// In order for the event validation and insertion to occur, `validate_enqueued_notes_and_events` must be later\n/// called. For optimal performance, accumulate as many event validation requests as possible and then validate them\n/// all at the end (which results in PXE minimizing the number of network round-trips).\npub(crate) unconstrained fn enqueue_event_for_validation(\n    contract_address: AztecAddress,\n    event_type_id: EventSelector,\n    serialized_event: BoundedVec<Field, MAX_EVENT_SERIALIZED_LEN>,\n    event_commitment: Field,\n    tx_hash: Field,\n    recipient: AztecAddress,\n) {\n    // We store requests in a `CapsuleArray`, which PXE will later read from and deserialize into its version of the\n    // Noir `EventValidationRequest`\n    CapsuleArray::at(contract_address, EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT).push(\n        EventValidationRequest {\n            contract_address,\n            event_type_id,\n            serialized_event,\n            event_commitment,\n            tx_hash,\n            recipient,\n        },\n    )\n}\n\n/// Validates all note and event validation requests enqueued via `enqueue_note_for_validation` and\n/// `enqueue_event_for_validation`, inserting them into the note database and event store respectively, making them\n/// queryable via `get_notes` oracle and our TS API (PXE::getPrivateEvents).\n///\n/// This automatically clears both validation request queues, so no further work needs to be done by the caller.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(contract_address: AztecAddress) {\n    oracle::message_processing::validate_enqueued_notes_and_events(\n        contract_address,\n        NOTE_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n        EVENT_VALIDATION_REQUESTS_ARRAY_BASE_SLOT,\n    );\n}\n\n/// Efficiently queries the node for logs that result in the completion of all `DeliveredPendingPartialNote`s stored in\n/// a `CapsuleArray` by performing all node communication concurrently. Returns a second `CapsuleArray` with Options for\n/// the responses that correspond to the pending partial notes at the same index.\n///\n/// For example, given an array with pending partial notes `[ p1, p2, p3 ]`, where `p1` and `p3` have corresponding\n/// completion logs but `p2` does not, the returned `CapsuleArray` will have contents\n/// `[some(p1_log), none(), some(p3_log)]`.\npub(crate) unconstrained fn get_pending_partial_notes_completion_logs(\n    contract_address: AztecAddress,\n    pending_partial_notes: CapsuleArray<DeliveredPendingPartialNote>,\n) -> CapsuleArray<Option<LogRetrievalResponse>> {\n    let log_retrieval_requests =\n        CapsuleArray::at(contract_address, LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT);\n\n    // We create a LogRetrievalRequest for each PendingPartialNote in the CapsuleArray. Because we need the indices in\n    // the request array to match the indices in the partial note array, we can't use CapsuleArray::for_each, as that\n    // function has arbitrary iteration order. Instead, we manually iterate the array from the beginning and push into\n    // the requests array, which we expect to be empty.\n    let mut i = 0;\n    let pending_partial_notes_count = pending_partial_notes.len();\n    while i < pending_partial_notes_count {\n        let pending_partial_note = pending_partial_notes.get(i);\n        log_retrieval_requests.push(\n            LogRetrievalRequest {\n                contract_address,\n                unsiloed_tag: pending_partial_note.note_completion_log_tag,\n            },\n        );\n        i += 1;\n    }\n\n    oracle::message_processing::bulk_retrieve_logs(\n        contract_address,\n        LOG_RETRIEVAL_REQUESTS_ARRAY_BASE_SLOT,\n        LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT,\n    );\n\n    CapsuleArray::at(contract_address, LOG_RETRIEVAL_RESPONSES_ARRAY_BASE_SLOT)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/messages/processing/mod.nr"},"141":{"source":"use crate::context::PrivateContext;\nuse crate::note::{\n    note_emission::NoteEmission,\n    note_interface::{NoteHash, NoteType},\n    retrieved_note::RetrievedNote,\n    utils::{compute_note_hash_for_nullify_from_read_request, compute_note_hash_for_read_request},\n};\nuse crate::oracle::notes::notify_created_note;\nuse protocol_types::traits::Packable;\n\npub fn create_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: Note,\n) -> NoteEmission<Note>\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    let note_hash_counter = context.side_effect_counter;\n\n    let note_hash = note.compute_note_hash(storage_slot);\n\n    let packed_note = Note::pack(note);\n    notify_created_note(\n        storage_slot,\n        Note::get_id(),\n        packed_note,\n        note_hash,\n        note_hash_counter,\n    );\n\n    context.push_note_hash(note_hash);\n\n    NoteEmission::new(note, storage_slot, note_hash_counter)\n}\n\n// Note: This function is currently totally unused.\npub fn destroy_note<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n\n    destroy_note_unsafe(context, retrieved_note, note_hash_for_read_request)\n}\n\npub fn destroy_note_unsafe<Note>(\n    context: &mut PrivateContext,\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n)\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify =\n        compute_note_hash_for_nullify_from_read_request(retrieved_note, note_hash_for_read_request);\n    let nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    let note_hash = if retrieved_note.metadata.is_settled() {\n        // Counter is zero, so we're nullifying a settled note and we don't populate the note_hash with real value.\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a pending note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifying so that it can either squash both\n        // the note and the nullifier if it's an inner note hash, or check that the it matches a pending note if it's\n        // a siloed note hash.\n        note_hash_for_nullify\n    };\n\n    context.push_nullifier_for_note_hash(nullifier, note_hash)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"143":{"source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\npub struct NoteEmission<Note> {\n    pub note: Note,\n    pub storage_slot: Field,\n    pub note_hash_counter: u32, // a note_hash_counter of 0 means settled\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note, storage_slot: Field, note_hash_counter: u32) -> Self {\n        Self { note, storage_slot, note_hash_counter }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(_self: Self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting\n * a change note in a token's transfer function only when there is \"change\" left).\n */\npub struct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(_self: Self) {}\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/note/note_emission.nr"},"146":{"source":"use crate::{\n    context::PrivateContext,\n    note::{\n        note_getter_options::{\n            NoteGetterOptions, NoteStatus, PropertySelector, Select, Sort, SortOrder,\n        },\n        note_interface::{NoteHash, NoteType},\n        note_viewer_options::NoteViewerOptions,\n        retrieved_note::RetrievedNote,\n        utils::compute_note_hash_for_read_request,\n    },\n    oracle,\n    utils::{array, comparison::compare},\n};\n\nuse protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, traits::{Packable, ToField}};\n\npub use crate::note::constants::MAX_NOTES_PER_PAGE;\n\nmod test;\n\nfn extract_property_value_from_selector<let N: u32>(\n    packed_note: [Field; N],\n    selector: PropertySelector,\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the packed note.\n    // This allows easier packing and custom (un)packing schemas. A note property is located\n    // inside the packed note using the index inside the array, a byte offset and a length.\n    let value: [u8; 32] = packed_note[selector.index as u32].to_be_bytes();\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[(31 + offset - i) as u32] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_packed_note<let N: u32>(packed_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len() {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field =\n            extract_property_value_from_selector(packed_note, select.property_selector);\n\n        assert(\n            compare(value_field, select.comparator, select.value.to_field()),\n            \"Mismatch return note field.\",\n        );\n    }\n}\n\nfn check_notes_order<let N: u32>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>,\n) {\n    for i in 0..sorts.len() {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, let N: u32>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n) -> (RetrievedNote<Note>, Field)\nwhere\n    Note: NoteType + NoteHash + Packable<N>,\n{\n    // Safety: Constraining that we got a valid note from the oracle is fairly straightforward: all we need to do\n    // is check that the metadata is correct, and that the note exists.\n    let retrieved_note = unsafe { get_note_internal::<Note, N>(storage_slot) };\n\n    // For settled notes, the contract address is implicitly checked since the hash returned from\n    // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n    // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the contract\n    // address returned from the oracle matches. Since branching in circuits is expensive, we perform this check on all\n    // note types.\n    assert(\n        retrieved_note.contract_address.eq(context.this_address()),\n        \"Note contract address mismatch.\",\n    );\n\n    let note_hash_for_read_request =\n        compute_note_hash_for_read_request(retrieved_note, storage_slot);\n    context.push_note_hash_read_request(note_hash_for_read_request);\n\n    (retrieved_note, note_hash_for_read_request)\n}\n\n/// Returns a BoundedVec of notes that have been proven to have been created by this contract, either in the current or\n/// past transactions (i.e. pending or settled notes). A second BoundedVec contains the note hashes used for the read\n/// requests, which can save constraints when computing the note's nullifiers.\n///\n/// WARNING: recall that notes are never destroyed! Note existence therefore does not imply that the note is _current_\n/// or _valid_ - this typically requires also emitting the note's nullifier to prove that it had not been emitted\n/// before. Because of this, calling this function directly from end-user applications should be discouraged, and safe\n/// abstractions such as aztec-nr's state variables should be used instead.\npub fn get_notes<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // Safety: The notes are constrained below.\n    let opt_notes = unsafe { get_notes_internal(storage_slot, options) };\n\n    // We apply the constraints in a separate function instead of inlining them here to make it easier to test that\n    // these checks correctly reject bad notes.\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nunconstrained fn apply_preprocessor<Note, PREPROCESSOR_ARGS>(\n    notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor: fn([Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL], PREPROCESSOR_ARGS) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    preprocessor_args: PREPROCESSOR_ARGS,\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] {\n    preprocessor(notes, preprocessor_args)\n}\n\nfn constrain_get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> (BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>, BoundedVec<Field, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>)\nwhere\n    Note: NoteType + NoteHash + Eq + Packable<N>,\n{\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the notes (as opposed to simply removing some), the private\n    // kernel will later validate that these note actually exist, so transformations would cause for that check\n    // to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let notes = array::collapse(filtered_notes);\n    let mut note_hashes = BoundedVec::new();\n\n    // We have now collapsed the sparse array of Options into a BoundedVec. This is a more ergonomic type and also\n    // results in reduced gate counts when setting a limit value, since we guarantee that the limit is an upper bound\n    // for the runtime length, and can therefore have fewer loop iterations.\n    assert(notes.len() <= options.limit, \"Got more notes than limit.\");\n\n    let mut prev_packed_note = [0; N];\n    for i in 0..options.limit {\n        if i < notes.len() {\n            let retrieved_note = notes.get_unchecked(i);\n\n            // For settled notes, the contract address is implicitly checked since the hash returned from\n            // `compute_note_hash_for_read_request` is siloed and kernels verify the siloing during note read request\n            // validation. Pending notes however are read with the unsiloed note hash, so we need to check that the\n            // contract address returned from the oracle matches. Since branching in circuits is expensive, we perform\n            // this check on all note types.\n            assert(\n                retrieved_note.contract_address.eq(context.this_address()),\n                \"Note contract address mismatch.\",\n            );\n\n            let packed_note = retrieved_note.note.pack();\n            check_packed_note(packed_note, options.selects);\n            if i != 0 {\n                check_notes_order(prev_packed_note, packed_note, options.sorts);\n            }\n            prev_packed_note = packed_note;\n\n            let note_hash_for_read_request =\n                compute_note_hash_for_read_request(retrieved_note, storage_slot);\n            context.push_note_hash_read_request(note_hash_for_read_request);\n            note_hashes.push(note_hash_for_read_request);\n        };\n    }\n\n    (notes, note_hashes)\n}\n\nunconstrained fn get_note_internal<Note, let N: u32>(storage_slot: Field) -> RetrievedNote<Note>\nwhere\n    Note: NoteType + Packable<N>,\n{\n    let opt_notes: [_; 1] = oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n    );\n\n    opt_notes[0].expect(f\"Failed to get a note\") // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, let N: u32, PREPROCESSOR_ARGS, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]\nwhere\n    Note: NoteType + Packable<N>,\n{\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    apply_preprocessor(opt_notes, options.preprocessor, options.preprocessor_args)\n}\n\n/// Unconstrained variant of `get_notes`, meant to be used in unconstrained execution contexts. Notably only the note\n/// content is returned, and not any of the information used when proving its existence (e.g. note nonce, note hash,\n/// etc.).\npub unconstrained fn view_notes<Note, let N: u32>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>,\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\nwhere\n    Note: NoteType + Packable<N> + Eq,\n{\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) =\n        flatten_options(options.selects, options.sorts);\n\n    // We fetch the notes from the same oracle we use in the constrained case, except we don't bother inspecting the\n    // metadata in order to prove existence.\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n    );\n\n    // Even though we don't expect for the opt_notes array to be sparse, collapse is still useful in this case to\n    // convert it into a BoundedVec.\n    array::collapse(opt_notes).map(\n        // view_notes just returns the actual note, so we drop the metadata\n        |retrieved_note| retrieved_note.note,\n    )\n}\n\nunconstrained fn flatten_options<let N: u32>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len() {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects as u32] =\n                select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects as u32] = select.unwrap_unchecked().value;\n            select_comparators[num_selects as u32] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len() {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values,\n        select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order,\n    )\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"149":{"source":"use protocol_types::traits::Serialize;\n\n// There's temporarily quite a bit of boilerplate here because Noir does not yet support enums. This file will\n// eventually be simplified into something closer to:\n//\n// pub enum NoteMetadata {\n//   PendingSamePhase{ note_hash_counter: u32 },\n//   PendingOtherPhase{ note_hash_counter: u32, note_nonce: Field },\n//   Settled{ note_nonce: Field },\n// }\n//\n// For now, we have `NoteMetadata` acting as a sort of tagged union.\n\nstruct NoteStageEnum {\n    /// A note that was created in the transaction that is currently being executed, during the current execution phase,\n    /// i.e. non-revertible or revertible.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted unless nullified in this transaction\n    /// (becoming a transient note).\n    PENDING_SAME_PHASE: u8,\n    /// A note that was created in the transaction that is currently being executed, during the previous execution\n    /// phase. Because there are only two phases and their order is always the same (first non-revertible and then\n    /// revertible) this implies that the note was created in the non-revertible phase, and that the current phase is\n    /// the revertible phase.\n    ///\n    /// These notes are not yet in the note hash tree, though they will be inserted **even if nullified in this\n    /// transaction**. This means that they must be nullified as if they were settled (i.e. using the unique note hash)\n    /// in order to avoid double spends once they become settled.\n    PENDING_PREVIOUS_PHASE: u8,\n    /// A note that was created in a prior transaction and is therefore already in the note hash tree.\n    SETTLED: u8,\n}\n\nglobal NoteStage: NoteStageEnum =\n    NoteStageEnum { PENDING_SAME_PHASE: 1, PENDING_PREVIOUS_PHASE: 2, SETTLED: 3 };\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a note in any of the three valid stages (pending same phase, pending previous phase, or settled). In\n/// order to access the underlying fields callers must first find the appropriate stage (e.g. via `is_settled()`) and\n/// then convert this into the appropriate type (e.g. via `to_settled()`).\n#[derive(Eq, Serialize)]\npub struct NoteMetadata {\n    stage: u8,\n    maybe_note_nonce: Field,\n}\n\nimpl NoteMetadata {\n    /// Constructs a `NoteMetadata` object from optional note hash counter and nonce. Both a zero note hash counter and\n    /// a zero nonce are invalid, so those are used to signal non-existent values.\n    pub fn from_raw_data(nonzero_note_hash_counter: bool, maybe_note_nonce: Field) -> Self {\n        if nonzero_note_hash_counter {\n            if maybe_note_nonce == 0 {\n                Self { stage: NoteStage.PENDING_SAME_PHASE, maybe_note_nonce }\n            } else {\n                Self { stage: NoteStage.PENDING_PREVIOUS_PHASE, maybe_note_nonce }\n            }\n        } else if maybe_note_nonce != 0 {\n            Self { stage: NoteStage.SETTLED, maybe_note_nonce }\n        } else {\n            panic(\n                f\"Note has a zero note hash counter and no nonce - existence cannot be proven\",\n            )\n        }\n    }\n\n    /// Returns true if the note is pending **and** from the same phase, i.e. if it's been created in the current\n    /// transaction during the current execution phase (either non-revertible or revertible).\n    pub fn is_pending_same_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_SAME_PHASE\n    }\n\n    /// Returns true if the note is pending **and** from the previous phase, i.e. if it's been created in the current\n    /// transaction during an execution phase prior to the current one. Because private execution only has two phases\n    /// with strict ordering, this implies that the note was created in the non-revertible phase, and that the current\n    /// phase is the revertible phase.\n    pub fn is_pending_previous_phase(self) -> bool {\n        self.stage == NoteStage.PENDING_PREVIOUS_PHASE\n    }\n\n    /// Returns true if the note is settled, i.e. if it's been created in a prior transaction and is therefore already\n    /// in the note hash tree.\n    pub fn is_settled(self) -> bool {\n        self.stage == NoteStage.SETTLED\n    }\n\n    /// Asserts that the metadata is that of a pending note from the same phase and converts it accordingly.\n    pub fn to_pending_same_phase(self) -> PendingSamePhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_SAME_PHASE);\n        PendingSamePhaseNoteMetadata::new()\n    }\n\n    /// Asserts that the metadata is that of a pending note from a previous phase and converts it accordingly.\n    pub fn to_pending_previous_phase(self) -> PendingPreviousPhaseNoteMetadata {\n        assert_eq(self.stage, NoteStage.PENDING_PREVIOUS_PHASE);\n        PendingPreviousPhaseNoteMetadata::new(self.maybe_note_nonce)\n    }\n\n    /// Asserts that the metadata is that of a settled note and converts it accordingly.\n    pub fn to_settled(self) -> SettledNoteMetadata {\n        assert_eq(self.stage, NoteStage.SETTLED);\n        SettledNoteMetadata::new(self.maybe_note_nonce)\n    }\n}\n\nimpl From<PendingSamePhaseNoteMetadata> for NoteMetadata {\n    fn from(_value: PendingSamePhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, std::mem::zeroed())\n    }\n}\n\nimpl From<PendingPreviousPhaseNoteMetadata> for NoteMetadata {\n    fn from(value: PendingPreviousPhaseNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(true, value.note_nonce())\n    }\n}\n\nimpl From<SettledNoteMetadata> for NoteMetadata {\n    fn from(value: SettledNoteMetadata) -> Self {\n        NoteMetadata::from_raw_data(false, value.note_nonce())\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending same phase note, i.e. a note that was created in the transaction that is currently being\n/// executed during the current execution phase (either non-revertible or revertible).\npub struct PendingSamePhaseNoteMetadata {\n    // This struct contains no fields since there is no metadata associated with a pending same phase note: it has no\n    // nonce (since it may get squashed by a nullifier emitted in the same phase), and while it does have a note hash\n    // counter we cannot constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingSamePhaseNoteMetadata {\n    pub fn new() -> Self {\n        Self {}\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a pending previous phase note, i.e. a note that was created in the transaction that is currently\n/// being executed, during the previous execution phase. Because there are only two phases and their order is always the\n/// same (first non-revertible and then revertible) this implies that the note was created in the non-revertible phase,\n/// and that the current phase is the revertible phase.\npub struct PendingPreviousPhaseNoteMetadata {\n    note_nonce: Field,\n    // This struct does not contain a note hash counter, even though one exists for this note, because we cannot\n    // constrain its value (and don't need to - only that it is non-zero).\n}\n\nimpl PendingPreviousPhaseNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n\n/// The metadata required to both prove a note's existence and destroy it, by computing the correct note hash for kernel\n/// read requests, as well as the correct nullifier to avoid double-spends.\n///\n/// This represents a settled note, i.e. a note that was created in a prior transaction and is therefore already in the\n/// note hash tree.\npub struct SettledNoteMetadata {\n    note_nonce: Field,\n}\n\nimpl SettledNoteMetadata {\n    pub fn new(note_nonce: Field) -> Self {\n        Self { note_nonce }\n    }\n\n    pub fn note_nonce(self) -> Field {\n        self.note_nonce\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/note/note_metadata.nr"},"151":{"source":"use crate::{note::note_metadata::NoteMetadata, utils::array::subarray::subarray};\nuse protocol_types::{\n    address::AztecAddress,\n    traits::{FromField, Packable, Serialize, ToField},\n    utils::arrays::array_concat,\n};\n\n// Number of fields a RetrievedNote adds to the packed or serialized representation of a note\n// +1 for the contract address\n// +2 for the note metadata\npub global RETRIEVED_NOTE_OVERHEAD: u32 = 1 + 2;\n\n/// A container of a note and the metadata required to prove its existence, regardless of whether the note is\n/// pending (created in the current transaction) or settled (created in a previous transaction).\n#[derive(Eq)]\npub struct RetrievedNote<NOTE> {\n    pub note: NOTE,\n    pub contract_address: AztecAddress,\n    pub metadata: NoteMetadata,\n}\n\nimpl<NOTE, let N: u32> Serialize<N + RETRIEVED_NOTE_OVERHEAD> for RetrievedNote<NOTE>\nwhere\n    NOTE: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + RETRIEVED_NOTE_OVERHEAD] {\n        array_concat(\n            array_concat(self.note.serialize(), [self.contract_address.to_field()]),\n            self.metadata.serialize(),\n        )\n    }\n}\n\n// This function is not part of the Packable trait implementation because in the case of the retrieved note, the pack\n// functionality resides in TS (oracle.ts and txe_service.ts).\npub fn unpack_retrieved_note<NOTE, let N: u32>(\n    packed_retrieved_note: [Field; N + RETRIEVED_NOTE_OVERHEAD],\n) -> RetrievedNote<NOTE>\nwhere\n    NOTE: Packable<N>,\n{\n    let contract_address = AztecAddress::from_field(packed_retrieved_note[0]);\n    let note_nonce = packed_retrieved_note[1];\n    let nonzero_note_hash_counter = (packed_retrieved_note[2] as u1) != 0;\n\n    let packed_note = subarray(packed_retrieved_note, RETRIEVED_NOTE_OVERHEAD);\n    let note = NOTE::unpack(packed_note);\n\n    RetrievedNote {\n        note,\n        contract_address,\n        metadata: NoteMetadata::from_raw_data(nonzero_note_hash_counter, note_nonce),\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/note/retrieved_note.nr"},"152":{"source":"use crate::{\n    context::PrivateContext,\n    note::{note_interface::NoteHash, retrieved_note::RetrievedNote},\n};\n\nuse dep::protocol_types::hash::{\n    compute_siloed_note_hash, compute_siloed_nullifier, compute_unique_note_hash,\n};\n\n/// Returns the note hash that must be used to issue a private kernel read request for a note.\npub fn compute_note_hash_for_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash = retrieved_note.note.compute_note_hash(storage_slot);\n\n    if retrieved_note.metadata.is_settled() {\n        // Settled notes are read by siloing with contract address and nonce (resulting in the final unique note hash,\n        // which is already in the note hash tree).\n        let siloed_note_hash = compute_siloed_note_hash(retrieved_note.contract_address, note_hash);\n        compute_unique_note_hash(\n            retrieved_note.metadata.to_settled().note_nonce(),\n            siloed_note_hash,\n        )\n    } else {\n        // Pending notes (both same phase and previous phase ones)  re read by their non-siloed hash (not even by\n        // contract address), which is what is stored in the new note hashes array (at the position hinted by note hash\n        // counter).\n        note_hash\n    }\n}\n\n/// Returns the note hash that must be used to compute a note's nullifier when calling `NoteHash::compute_nullifier` or\n/// `NoteHash::compute_nullifier_unconstrained`.\npub fn compute_note_hash_for_nullify<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    compute_note_hash_for_nullify_from_read_request(\n        retrieved_note,\n        compute_note_hash_for_read_request(retrieved_note, storage_slot),\n    )\n}\n\n/// Same as `compute_note_hash_for_nullify`, except it takes the note hash used in a read request (i.e. what\n/// `compute_note_hash_for_read_request` would return). This is useful in scenarios where that hash has already been\n/// computed to reduce constraints by reusing this value.\npub fn compute_note_hash_for_nullify_from_read_request<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    note_hash_for_read_request: Field,\n) -> Field {\n    // There is just one instance in which the note hash for nullification does not match the note hash used for a read\n    // request, which is when dealing with pending previous phase notes. These had their existence proven using their\n    // non-siloed note hash along with the note hash counter (like all pending notes), but since they will be\n    // unconditionally inserted in the note hash tree (since they cannot be squashed) they must be nullified using the\n    // *unique* note hash.\n    // If we didn't, it'd be possible to emit a second different nullifier for the same note in a follow up transaction,\n    // once the note is settled, resulting in a double spend.\n\n    if retrieved_note.metadata.is_pending_previous_phase() {\n        let siloed_note_hash =\n            compute_siloed_note_hash(retrieved_note.contract_address, note_hash_for_read_request);\n        let note_nonce = retrieved_note.metadata.to_pending_previous_phase().note_nonce();\n\n        compute_unique_note_hash(note_nonce, siloed_note_hash)\n    } else {\n        note_hash_for_read_request\n    }\n}\n\n/// Computes a note's siloed nullifier, i.e. the one that will be inserted into the nullifier tree.\npub fn compute_siloed_note_nullifier<Note>(\n    retrieved_note: RetrievedNote<Note>,\n    storage_slot: Field,\n    context: &mut PrivateContext,\n) -> Field\nwhere\n    Note: NoteHash,\n{\n    let note_hash_for_nullify = compute_note_hash_for_nullify(retrieved_note, storage_slot);\n    let inner_nullifier = retrieved_note.note.compute_nullifier(context, note_hash_for_nullify);\n\n    compute_siloed_nullifier(retrieved_note.contract_address, inner_nullifier)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"156":{"source":"use dep::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress, utils::reader::Reader,\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n) -> [Field; 2] {}\n\npub unconstrained fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n) -> (u32, Field) {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n    );\n\n    let mut reader = Reader::new(fields);\n    let end_side_effect_counter = reader.read_u32();\n    let returns_hash = reader.read();\n\n    (end_side_effect_counter, returns_hash)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"157":{"source":"use protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}};\n\n/// Stores arbitrary information in a per-contract non-volatile database, which can later be retrieved with `load`. If\n/// data was already stored at this slot, it is overwritten.\npub unconstrained fn store<T, let N: u32>(contract_address: AztecAddress, slot: Field, value: T)\nwhere\n    T: Serialize<N>,\n{\n    let serialized = value.serialize();\n    store_oracle(contract_address, slot, serialized);\n}\n\n/// Returns data previously stored via `storeCapsule` in the per-contract non-volatile database. Returns Option::none() if\n/// nothing was stored at the given slot.\npub unconstrained fn load<T, let N: u32>(contract_address: AztecAddress, slot: Field) -> Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    let serialized_option = load_oracle::<N>(contract_address, slot, N);\n    serialized_option.map(|arr| Deserialize::deserialize(arr))\n}\n\n/// Deletes data in the per-contract non-volatile database. Does nothing if no data was present.\npub unconstrained fn delete(contract_address: AztecAddress, slot: Field) {\n    delete_oracle(contract_address, slot);\n}\n\n/// Copies a number of contiguous entries in the per-contract non-volatile database. This allows for efficient data\n/// structures by avoiding repeated calls to `loadCapsule` and `storeCapsule`.\n/// Supports overlapping source and destination regions (which will result in the overlapped source values being\n/// overwritten). All copied slots must exist in the database (i.e. have been stored and not deleted)\npub unconstrained fn copy(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {\n    copy_oracle(contract_address, src_slot, dst_slot, num_entries);\n}\n\n#[oracle(storeCapsule)]\nunconstrained fn store_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    values: [Field; N],\n) {}\n\n/// We need to pass in `array_len` (the value of N) as a parameter to tell the oracle how many fields the response must\n/// have.\n///\n/// Note that the oracle returns an Option<[Field; N]> because we cannot return an Option<T> directly. That would\n/// require for the oracle resolver to know the shape of T (e.g. if T were a struct of 3 u32 values then the expected\n/// response shape would be 3 single items, whereas it were a struct containing `u32, [Field;10], u32` then the expected\n/// shape would be single, array, single.). Instead, we return the serialization and deserialize in Noir.\n#[oracle(loadCapsule)]\nunconstrained fn load_oracle<let N: u32>(\n    contract_address: AztecAddress,\n    slot: Field,\n    array_len: u32,\n) -> Option<[Field; N]> {}\n\n#[oracle(deleteCapsule)]\nunconstrained fn delete_oracle(contract_address: AztecAddress, slot: Field) {}\n\n#[oracle(copyCapsule)]\nunconstrained fn copy_oracle(\n    contract_address: AztecAddress,\n    src_slot: Field,\n    dst_slot: Field,\n    num_entries: u32,\n) {}\n\nmod test {\n    // These tests are sort of redundant since we already test the oracle implementation directly in TypeScript, but\n    // they are cheap regardless and help ensure both that the TXE implementation works accordingly and that the Noir\n    // oracles are hooked up correctly.\n\n    use crate::{\n        oracle::capsules::{copy, delete, load, store},\n        test::{helpers::test_environment::TestEnvironment, mocks::mock_struct::MockStruct},\n    };\n    use protocol_types::{address::AztecAddress, traits::{FromField, ToField}};\n\n    unconstrained fn setup() -> AztecAddress {\n        let env = TestEnvironment::new();\n        env.contract_address()\n    }\n\n    global SLOT: Field = 1;\n\n    #[test]\n    unconstrained fn stores_and_loads() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), value);\n    }\n\n    #[test]\n    unconstrained fn store_overwrites() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n\n        let new_value = MockStruct::new(7, 8);\n        store(contract_address, SLOT, new_value);\n\n        assert_eq(load(contract_address, SLOT).unwrap(), new_value);\n    }\n\n    #[test]\n    unconstrained fn loads_empty_slot() {\n        let contract_address = setup();\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_stored_value() {\n        let contract_address = setup();\n\n        let value = MockStruct::new(5, 6);\n        store(contract_address, SLOT, value);\n        delete(contract_address, SLOT);\n\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn deletes_empty_slot() {\n        let contract_address = setup();\n\n        delete(contract_address, SLOT);\n        let loaded_value: Option<MockStruct> = load(contract_address, SLOT);\n        assert_eq(loaded_value, Option::none());\n    }\n\n    #[test]\n    unconstrained fn copies_non_overlapping_values() {\n        let contract_address = setup();\n\n        let src = 5;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 10;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_src_ahead() {\n        let contract_address = setup();\n\n        let src = 1;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 2;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[1] and src[2] should have been overwritten since they are also dst[0] and dst[1]\n        assert_eq(load(contract_address, src).unwrap(), values[0]); // src[0] (unchanged)\n        assert_eq(load(contract_address, src + 1).unwrap(), values[0]); // dst[0]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[1]); // dst[1]\n    }\n\n    #[test]\n    unconstrained fn copies_overlapping_values_with_dst_ahead() {\n        let contract_address = setup();\n\n        let src = 2;\n\n        let values = [MockStruct::new(5, 6), MockStruct::new(7, 8), MockStruct::new(9, 10)];\n        store(contract_address, src, values[0]);\n        store(contract_address, src + 1, values[1]);\n        store(contract_address, src + 2, values[2]);\n\n        let dst = 1;\n        copy(contract_address, src, dst, 3);\n\n        assert_eq(load(contract_address, dst).unwrap(), values[0]);\n        assert_eq(load(contract_address, dst + 1).unwrap(), values[1]);\n        assert_eq(load(contract_address, dst + 2).unwrap(), values[2]);\n\n        // src[0] and src[1] should have been overwritten since they are also dst[1] and dst[2]\n        assert_eq(load(contract_address, src).unwrap(), values[1]); // dst[1]\n        assert_eq(load(contract_address, src + 1).unwrap(), values[2]); // dst[2]\n        assert_eq(load(contract_address, src + 2).unwrap(), values[2]); // src[2] (unchanged)\n    }\n\n    #[test(should_fail_with = \"copy empty slot\")]\n    unconstrained fn cannot_copy_empty_values() {\n        let contract_address = setup();\n\n        copy(contract_address, SLOT, SLOT, 1);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_store_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let value = MockStruct::new(5, 6);\n        store(other_contract_address, SLOT, value);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_load_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        let _: Option<MockStruct> = load(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_delete_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        delete(other_contract_address, SLOT);\n    }\n\n    #[test(should_fail_with = \"not allowed to access\")]\n    unconstrained fn cannot_copy_other_contract() {\n        let contract_address = setup();\n        let other_contract_address = AztecAddress::from_field(contract_address.to_field() + 1);\n\n        copy(other_contract_address, SLOT, SLOT, 0);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/capsules.nr"},"158":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(notifyEnqueuedPublicFunctionCall)]\nunconstrained fn notify_enqueued_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_enqueued_public_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_enqueued_public_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_enqueued_public_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a public call has been enqueued, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_enqueued_public_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\n#[oracle(notifySetPublicTeardownFunctionCall)]\nunconstrained fn notify_set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _calldata_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n) {}\n\nunconstrained fn notify_set_public_teardown_function_call_wrapper(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    notify_set_public_teardown_function_call_oracle(\n        contract_address,\n        calldata_hash,\n        side_effect_counter,\n        is_static_call,\n    )\n}\n\npub fn notify_set_public_teardown_function_call(\n    contract_address: AztecAddress,\n    calldata_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n) {\n    // Safety: Notifies the simulator that a teardown call has been set, allowing it to prepare hints for the AVM to process this call.\n    unsafe {\n        notify_set_public_teardown_function_call_wrapper(\n            contract_address,\n            calldata_hash,\n            side_effect_counter,\n            is_static_call,\n        )\n    }\n}\n\npub fn notify_set_min_revertible_side_effect_counter(counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter) };\n}\n\npub unconstrained fn notify_set_min_revertible_side_effect_counter_oracle_wrapper(counter: u32) {\n    notify_set_min_revertible_side_effect_counter_oracle(counter);\n}\n\n#[oracle(notifySetMinRevertibleSideEffectCounter)]\nunconstrained fn notify_set_min_revertible_side_effect_counter_oracle(_counter: u32) {}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"159":{"source":"use dep::protocol_types::address::AztecAddress;\n\n#[oracle(getContractAddress)]\nunconstrained fn get_contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn get_block_number_oracle() -> u32 {}\n\n#[oracle(getTimestamp)]\nunconstrained fn get_timestamp_oracle() -> u64 {}\n\n#[oracle(getChainId)]\nunconstrained fn get_chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn get_version_oracle() -> Field {}\n\npub unconstrained fn get_contract_address() -> AztecAddress {\n    get_contract_address_oracle()\n}\n\npub unconstrained fn get_block_number() -> u32 {\n    get_block_number_oracle()\n}\n\npub unconstrained fn get_timestamp() -> u64 {\n    get_timestamp_oracle()\n}\n\npub unconstrained fn get_chain_id() -> Field {\n    get_chain_id_oracle()\n}\n\npub unconstrained fn get_version() -> Field {\n    get_version_oracle()\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/execution.nr"},"160":{"source":"/// Stores values represented as slice in execution cache to be later obtained by its hash.\npub fn store(values: [Field], hash: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call. When loading the values, however, the caller must check that the values are indeed the preimage.\n    unsafe { store_in_execution_cache_oracle_wrapper(values, hash) };\n}\n\nunconstrained fn store_in_execution_cache_oracle_wrapper(values: [Field], hash: Field) {\n    store_in_execution_cache_oracle(values, hash);\n}\n\npub unconstrained fn load<let N: u32>(hash: Field) -> [Field; N] {\n    load_from_execution_cache_oracle(hash)\n}\n\n#[oracle(storeInExecutionCache)]\nunconstrained fn store_in_execution_cache_oracle(_values: [Field], _hash: Field) {}\n\n#[oracle(loadFromExecutionCache)]\nunconstrained fn load_from_execution_cache_oracle<let N: u32>(_hash: Field) -> [Field; N] {}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/execution_cache.nr"},"161":{"source":"use protocol_types::{\n    address::AztecAddress, contract_class_id::ContractClassId, contract_instance::ContractInstance,\n    traits::FromField,\n};\n\n// NOTE: this is for use in private only\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> ContractInstance {}\n\n// NOTE: this is for use in private only\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> ContractInstance {\n    get_contract_instance_oracle(address)\n}\n\n// NOTE: this is for use in private only\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    // Safety: The to_address function combines all values in the instance object to produce an address,\n    // so by checking that we get the expected address we validate the entire struct.\n    let instance = unsafe { get_contract_instance_internal(address) };\n    assert_eq(instance.to_address(), address);\n\n    instance\n}\n\nstruct GetContractInstanceResult {\n    exists: bool,\n    member: Field,\n}\n\n// These oracles each return a ContractInstance member\n// plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstanceDeployer)]\nunconstrained fn get_contract_instance_deployer_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceClassId)]\nunconstrained fn get_contract_instance_class_id_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n#[oracle(avmOpcodeGetContractInstanceInitializationHash)]\nunconstrained fn get_contract_instance_initialization_hash_oracle_avm(\n    _address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {}\n\nunconstrained fn get_contract_instance_deployer_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_deployer_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_class_id_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_class_id_oracle_avm(address)\n}\nunconstrained fn get_contract_instance_initialization_hash_internal_avm(\n    address: AztecAddress,\n) -> [GetContractInstanceResult; 1] {\n    get_contract_instance_initialization_hash_oracle_avm(address)\n}\n\npub fn get_contract_instance_deployer_avm(address: AztecAddress) -> Option<AztecAddress> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_deployer_internal_avm(address)[0] };\n    if exists {\n        Option::some(AztecAddress::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_class_id_avm(address: AztecAddress) -> Option<ContractClassId> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_class_id_internal_avm(address)[0] };\n    if exists {\n        Option::some(ContractClassId::from_field(member))\n    } else {\n        Option::none()\n    }\n}\npub fn get_contract_instance_initialization_hash_avm(address: AztecAddress) -> Option<Field> {\n    // Safety: AVM opcodes are constrained by the AVM itself\n    let GetContractInstanceResult { exists, member } =\n        unsafe { get_contract_instance_initialization_hash_internal_avm(address)[0] };\n    if exists {\n        Option::some(member)\n    } else {\n        Option::none()\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr"},"166":{"source":"use protocol_types::abis::validation_requests::KeyValidationRequest;\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field,\n) -> KeyValidationRequest {}\n\npub unconstrained fn get_key_validation_request(\n    pk_m_hash: Field,\n    key_index: Field,\n) -> KeyValidationRequest {\n    get_key_validation_request_oracle(pk_m_hash, key_index)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr"},"167":{"source":"use dep::protocol_types::{\n    address::{AztecAddress, PartialAddress},\n    point::Point,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, TpkM},\n};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\npub unconstrained fn get_public_keys_and_partial_address(\n    address: AztecAddress,\n) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle(address);\n\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: result[0], y: result[1], is_infinite: result[2] != 0 } },\n        ivpk_m: IvpkM { inner: Point { x: result[3], y: result[4], is_infinite: result[5] != 0 } },\n        ovpk_m: OvpkM { inner: Point { x: result[6], y: result[7], is_infinite: result[8] != 0 } },\n        tpk_m: TpkM { inner: Point { x: result[9], y: result[10], is_infinite: result[11] != 0 } },\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/keys.nr"},"169":{"source":"use protocol_types::address::AztecAddress;\n\n/// Finds new private logs that may have been sent to all registered accounts in PXE in the current contract and makes\n/// them available for later processing in Noir by storing them in a capsule array.\npub unconstrained fn fetch_tagged_logs(pending_tagged_log_array_base_slot: Field) {\n    fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot);\n}\n\n#[oracle(fetchTaggedLogs)]\nunconstrained fn fetch_tagged_logs_oracle(pending_tagged_log_array_base_slot: Field) {}\n\n// This must be a single oracle and not one for notes and one for events because the entire point is to validate\n// all notes and events in one go, minimizing node round-trips.\npub(crate) unconstrained fn validate_enqueued_notes_and_events(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {\n    validate_enqueued_notes_and_events_oracle(\n        contract_address,\n        note_validation_requests_array_base_slot,\n        event_validation_requests_array_base_slot,\n    );\n}\n\n#[oracle(validateEnqueuedNotesAndEvents)]\nunconstrained fn validate_enqueued_notes_and_events_oracle(\n    contract_address: AztecAddress,\n    note_validation_requests_array_base_slot: Field,\n    event_validation_requests_array_base_slot: Field,\n) {}\n\npub(crate) unconstrained fn bulk_retrieve_logs(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {\n    bulk_retrieve_logs_oracle(\n        contract_address,\n        log_retrieval_requests_array_base_slot,\n        log_retrieval_responses_array_base_slot,\n    );\n}\n\n#[oracle(bulkRetrieveLogs)]\nunconstrained fn bulk_retrieve_logs_oracle(\n    contract_address: AztecAddress,\n    log_retrieval_requests_array_base_slot: Field,\n    log_retrieval_responses_array_base_slot: Field,\n) {}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/message_processing.nr"},"171":{"source":"use crate::note::{\n    note_interface::NoteType,\n    retrieved_note::{RETRIEVED_NOTE_OVERHEAD, RetrievedNote, unpack_retrieved_note},\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress, indexed_tagging_secret::IndexedTaggingSecret, traits::Packable,\n};\n\n/// Notifies the simulator that a note has been created, so that it can be returned in future read requests in the same\n/// transaction. This note should only be added to the non-volatile database if found in an actual block.\npub fn notify_created_note<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        notify_created_note_oracle_wrapper(\n            storage_slot,\n            note_type_id,\n            packed_note,\n            note_hash,\n            counter,\n        )\n    };\n}\n\n/// Notifies the simulator that a note has been nullified, so that it is no longer returned in future read requests in\n/// the same transaction. This note should only be removed to the non-volatile database if its nullifier is found in an\n/// actual block.\npub fn notify_nullified_note(nullifier: Field, note_hash: Field, counter: u32) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_nullified_note_oracle_wrapper(nullifier, note_hash, counter) };\n}\n\n/// Notifies the simulator that a non-note nullifier has been created, so that it can be used for note nonces.\npub fn notify_created_nullifier(nullifier: Field) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe to\n    // call.\n    unsafe { notify_created_nullifier_oracle_wrapper(nullifier) };\n}\n\nunconstrained fn notify_created_note_oracle_wrapper<let N: u32>(\n    storage_slot: Field,\n    note_type_id: Field,\n    packed_note: [Field; N],\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_created_note_oracle(storage_slot, note_type_id, packed_note, note_hash, counter);\n}\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<let N: u32>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _packed_note: [Field; N],\n    _note_hash: Field,\n    _counter: u32,\n) {}\n\nunconstrained fn notify_nullified_note_oracle_wrapper(\n    nullifier: Field,\n    note_hash: Field,\n    counter: u32,\n) {\n    notify_nullified_note_oracle(nullifier, note_hash, counter);\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle(_nullifier: Field, _note_hash: Field, _counter: u32) {}\n\nunconstrained fn notify_created_nullifier_oracle_wrapper(nullifier: Field) {\n    notify_created_nullifier_oracle(nullifier);\n}\n\n#[oracle(notifyCreatedNullifier)]\nunconstrained fn notify_created_nullifier_oracle(_nullifier: Field) {}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; M],\n    _select_by_offsets: [u8; M],\n    _select_by_lengths: [u8; M],\n    _select_values: [Field; M],\n    _select_comparators: [u8; M],\n    _sort_by_indexes: [u8; M],\n    _sort_by_offsets: [u8; M],\n    _sort_by_lengths: [u8; M],\n    _sort_order: [u8; M],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    // This is always set to MAX_NOTES. We need to pass it to TS in order to correctly construct the BoundedVec\n    _max_notes: u32,\n    // This is always set to NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD. We need to pass it to TS in order to be able to\n    // correctly construct the BoundedVec there.\n    _packed_retrieved_note_length: u32,\n) -> BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> {}\n\npub unconstrained fn get_notes<Note, let NOTE_PCKD_LEN: u32, let M: u32, let MAX_NOTES: u32>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n) -> [Option<RetrievedNote<Note>>; MAX_NOTES]\nwhere\n    Note: NoteType + Packable<NOTE_PCKD_LEN>,\n{\n    // N + 3 because of the contract address, note nonce, and note_hash_counter that are stored out of the packed note.\n    let packed_retrieved_notes: BoundedVec<[Field; NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD], MAX_NOTES> = get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        MAX_NOTES,\n        NOTE_PCKD_LEN + RETRIEVED_NOTE_OVERHEAD,\n    );\n\n    let mut notes = BoundedVec::<_, MAX_NOTES>::new();\n    for i in 0..packed_retrieved_notes.len() {\n        let retrieved_note = unpack_retrieved_note(packed_retrieved_notes.get(i));\n        notes.push(retrieved_note);\n    }\n\n    // At last we convert the bounded vector to an array of options. We do this because that is what the filter\n    // function needs to have on the output and we've decided to have the same type on the input and output of\n    // the filter and preprocessor functions.\n    //\n    // We have decided to have the same type on the input and output of the filter and preprocessor functions because\n    // it allows us to chain multiple filters and preprocessors together.\n    //\n    // So why do we want the array of options on the output of the filter function?\n    //\n    // Filter returns an array of options rather than a BoundedVec for performance reasons. Using an array of options\n    // allows setting values at known indices in the output array which is much more efficient than pushing to a\n    // BoundedVec where the write position depends on previous iterations. The array can then be efficiently converted\n    // to a BoundedVec using utils/array/collapse.nr::collapse function from Aztec.nr. This avoids expensive dynamic\n    // memory access patterns that would be required when building up a BoundedVec incrementally. For preprocessor\n    // functions we could use BoundedVec return value as there the optimization does not matter since it is applied in\n    // an unconstrained context. We, however, use the same return value type to be able to use the same function as\n    // both a preprocessor and a filter.\n    let mut notes_array = [Option::none(); MAX_NOTES];\n    for i in 0..notes.len() {\n        if i < notes.len() {\n            notes_array[i] = Option::some(notes.get_unchecked(i));\n        }\n    }\n\n    notes_array\n}\n\n/// Returns true if the nullifier exists. Note that a `true` value can be constrained by proving existence of the\n/// nullifier, but a `false` value should not be relied upon since other transactions may emit this nullifier before the\n/// current transaction is included in a block. While this might seem of little use at first, certain design patterns\n/// benefit from this abstraction (see e.g. `PrivateMutable`).\npub unconstrained fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier)\n}\n\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> bool {}\n\n/// Returns the derived app tagging secret ready to be included in a log for a given sender and recipient pair,\n/// siloed for the current contract address.\npub unconstrained fn get_app_tag_as_sender(sender: AztecAddress, recipient: AztecAddress) -> Field {\n    get_indexed_tagging_secret_as_sender_oracle(sender, recipient).compute_tag(recipient)\n}\n\n#[oracle(getIndexedTaggingSecretAsSender)]\nunconstrained fn get_indexed_tagging_secret_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) -> IndexedTaggingSecret {}\n\n/// Notifies the simulator that a tag has been used in a note, and to therefore increment the associated index so that\n/// future notes get a different tag and can be discovered by the recipient.\n/// This change should only be persisted in a non-volatile database if the tagged log is found in an actual block -\n/// otherwise e.g. a reverting transaction can cause the sender to accidentally skip indices and later produce notes\n/// that are not found by the recipient.\npub fn increment_app_tagging_secret_index_as_sender(sender: AztecAddress, recipient: AztecAddress) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe {\n        increment_app_tagging_secret_index_as_sender_wrapper(sender, recipient);\n    }\n}\n\nunconstrained fn increment_app_tagging_secret_index_as_sender_wrapper(\n    sender: AztecAddress,\n    recipient: AztecAddress,\n) {\n    increment_app_tagging_secret_index_as_sender_oracle(sender, recipient);\n}\n\n#[oracle(incrementAppTaggingSecretIndexAsSender)]\nunconstrained fn increment_app_tagging_secret_index_as_sender_oracle(\n    _sender: AztecAddress,\n    _recipient: AztecAddress,\n) {}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"172":{"source":"use protocol_types::traits::Serialize;\n\n/// Emits data that will be delivered to PXE unaltered. This data can be interpreted freely by a\n/// downstream consumer (such as a wallet).\n///\n/// # Arguments\n///\n/// * `data` - The data to emit.\npub fn emit_offchain_effect<T, let N: u32>(data: T)\nwhere\n    T: Serialize<N>,\n{\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { emit_offchain_effect_oracle_wrapper(data) };\n}\n\nunconstrained fn emit_offchain_effect_oracle_wrapper<T, let N: u32>(data: T)\nwhere\n    T: Serialize<N>,\n{\n    emit_offchain_effect_oracle(data.serialize());\n}\n\n#[oracle(emitOffchainEffect)]\nunconstrained fn emit_offchain_effect_oracle<let N: u32>(data: [Field; N]) {}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/offchain_effect.nr"},"173":{"source":"/// Returns an unconstrained random value. Note that it is not possible to constrain this value to prove that it is\n/// truly random: we assume that the oracle is cooperating and returning random values.\n/// In some applications this behavior might not be acceptable and other techniques might be more suitable, such as\n/// producing pseudo-random values by hashing values outside of user control (like block hashes) or secrets.\npub unconstrained fn random() -> Field {\n    rand_oracle()\n}\n\n#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/random.nr"},"174":{"source":"use protocol_types::{address::aztec_address::AztecAddress, point::Point};\n\n// TODO(#12656): return an app-siloed secret + document this\n#[oracle(getSharedSecret)]\nunconstrained fn get_shared_secret_oracle(address: AztecAddress, ephPk: Point) -> Point {}\n\n/// Returns an app-siloed shared secret between `address` and someone who knows the secret key behind an\n/// ephemeral public key `ephPk`. The app-siloing means that contracts cannot retrieve secrets that belong to\n/// other contracts, and therefore cannot e.g. decrypt their messages. This is an important security consideration\n/// given that both the `address` and `ephPk` are public information.\n///\n/// The shared secret `S` is computed as:\n/// `let S =  (ivsk + h) * ephPk`\n/// where `ivsk + h` is the 'preaddress' i.e. the preimage of the address, also called the address secret.\n/// TODO(#12656): app-silo this secret\npub unconstrained fn get_shared_secret(address: AztecAddress, ephPk: Point) -> Point {\n    get_shared_secret_oracle(address, ephPk)\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/oracle/shared_secret.nr"},"178":{"source":"use crate::state_vars::storage::Storage;\nuse dep::protocol_types::{storage::map::derive_storage_slot_in_map, traits::ToField};\n\n// docs:start:map\npub struct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\n// Map reserves a single storage slot regardless of what it stores because nothing is stored at said slot: it is only\n// used to derive the storage slots of nested state variables, which is expected to never result in collisions or slots\n// being close to one another due to these being hashes. This mirrors the strategy adopted by Solidity mappings.\nimpl<K, T, Context> Storage<1> for Map<K, T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V\n    where\n        K: ToField,\n    {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"184":{"source":"use crate::context::{PrivateContext, UtilityContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE,\n    lifecycle::{create_note, destroy_note_unsafe},\n    note_emission::NoteEmission,\n    note_getter::{get_notes, view_notes},\n    note_getter_options::NoteGetterOptions,\n    note_interface::{NoteHash, NoteType},\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request,\n};\nuse crate::note::retrieved_note::RetrievedNote;\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::{\n    abis::read_request::ReadRequest, constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    traits::Packable,\n};\n\nmod test;\n\n// docs:start:struct\npub struct PrivateSet<Note, Context> {\n    pub context: Context,\n    pub storage_slot: Field,\n}\n// docs:end:struct\n\n// Private storage slots are not really 'slots' but rather a value in the note hash preimage, so there is no notion of a\n// value spilling over multiple slots. For this reason PrivateSet (and all other private state variables) needs just one\n// slot to be reserved, regardless of what it stores.\nimpl<T, Context> Storage<1> for PrivateSet<T, Context> {\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:insert\n    pub fn insert<let N: u32>(self, note: Note) -> NoteEmission<Note>\n    where\n        Note: Packable<N>,\n    {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    pub fn pop_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        let (retrieved_notes, note_hashes) = get_notes(self.context, self.storage_slot, options);\n        // We iterate in a range 0..options.limit instead of 0..notes.len() because options.limit is known at compile\n        // time and hence will result in less constraints when set to a lower value than\n        // MAX_NOTE_HASH_READ_REQUESTS_PER_CALL.\n        for i in 0..options.limit {\n            if i < retrieved_notes.len() {\n                let retrieved_note = retrieved_notes.get_unchecked(i);\n                let note_hash = note_hashes.get_unchecked(i);\n                // We immediately destroy the note without doing any of the read request checks `remove` typically\n                // performs because we know that the `get_notes` call has already placed those constraints.\n                destroy_note_unsafe(self.context, retrieved_note, note_hash);\n            }\n        }\n\n        // Since the notes were already destroyed, we no longer need the additional data in RetrievedNote and can\n        // discard it.\n        retrieved_notes.map(|retrieved_note| retrieved_note.note)\n    }\n\n    /// Note that if you obtained the note via `get_notes` it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding an extra hash and read request check.\n    pub fn remove(self, retrieved_note: RetrievedNote<Note>) {\n        let note_hash = compute_note_hash_for_read_request(retrieved_note, self.storage_slot);\n        let has_been_read =\n            self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note_unsafe(self.context, retrieved_note, note_hash);\n    }\n\n    /// Note that if you later on remove the note it's much better to use `pop_notes` as `pop_notes` results\n    /// in significantly less constrains due to avoiding 1 read request check.\n    pub fn get_notes<PREPROCESSOR_ARGS, FILTER_ARGS, let N: u32>(\n        self,\n        options: NoteGetterOptions<Note, N, PREPROCESSOR_ARGS, FILTER_ARGS>,\n    ) -> BoundedVec<RetrievedNote<Note>, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>\n    where\n        Note: Packable<N>,\n    {\n        get_notes(self.context, self.storage_slot, options).0\n    }\n}\n\nimpl<Note> PrivateSet<Note, UtilityContext>\nwhere\n    Note: NoteType + NoteHash + Eq,\n{\n    // docs:start:view_notes\n    pub unconstrained fn view_notes<let N: u32>(\n        self,\n        options: NoteViewerOptions<Note, N>,\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE>\n    where\n        Note: Packable<N>,\n    {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr"},"186":{"source":"use crate::{\n    context::{PrivateContext, PublicContext, UtilityContext},\n    state_vars::storage::Storage,\n    utils::with_hash::WithHash,\n};\nuse protocol_types::{\n    constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::poseidon2_hash_with_separator,\n    traits::Packable,\n};\n\n/// Stores an immutable value in public state which can be read from public, private and unconstrained execution\n/// contexts.\n///\n/// Leverages `WithHash<T>` to enable efficient private reads of public storage. `WithHash` wrapper allows for\n/// efficient reads by verifying large values through a single hash check and then proving inclusion only of the hash\n/// in the public storage. This reduces the number of required tree inclusion proofs from O(M) to O(1).\n///\n/// This is valuable when T packs to multiple fields, as it maintains \"almost constant\" verification overhead\n/// regardless of the original data size.\n///\n/// # Optimizing private reads in your contract\n/// Given that reading T from public immutable in private has \"almost constant\" constraints cost for different sizes\n/// of T it is recommended to group multiple values into a single struct when they are being read together. This can\n/// typically be some kind of configuration set up during contract initialization. E.g.:\n///\n/// ```noir\n/// use dep::aztec::protocol_types::{address::AztecAddress, traits::Packable};\n/// use std::meta::derive;\n///\n/// #[derive(Eq, Packable)]\n/// pub struct Config \\{\n///     pub address_1: AztecAddress,\n///     pub value_1: u128,\n///     pub value_2: u64,\n///     ...\n/// }\n/// ```\n///\n// docs:start:public_immutable_struct\npub struct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\n/// `WithHash<T>` stores both the packed value (using N fields) and its hash (1 field), requiring N = M + 1 total\n/// fields.\nimpl<T, Context, let M: u32, let N: u32> Storage<N> for PublicImmutable<T, Context>\nwhere\n    WithHash<T, M>: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n\n    pub fn compute_initialization_nullifier(self) -> Field {\n        poseidon2_hash_with_separator(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER,\n        )\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PublicContext> {\n    /// Initializes the value.\n    ///\n    /// # Panics\n    /// Panics if the value is already initialized.\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        // We emit an initialization nullifier to indicate that the struct is initialized. This also prevents\n        // the value from being initialized again as a nullifier can be included only once.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier);\n\n        self.context.storage_write(self.storage_slot, WithHash::new(value));\n    }\n    // docs:end:public_immutable_struct_write\n\n    /// Reads the value.\n    ///\n    /// # Panics\n    /// Panics if the value is not initialized.\n    // docs:start:public_immutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        assert(self.is_initialized(), \"Trying to read from uninitialized PublicImmutable\");\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n\n    /// Reads the value without checking if the value is initialized.\n    pub fn read_unsafe<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::public_storage_read(*self.context, self.storage_slot)\n    }\n\n    fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.nullifier_exists(nullifier, self.context.this_address())\n    }\n}\n\nimpl<T> PublicImmutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::utility_public_storage_read(self.context, self.storage_slot)\n    }\n}\n\nimpl<T> PublicImmutable<T, &mut PrivateContext> {\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN> + Eq,\n    {\n        WithHash::historical_public_storage_read(\n            self.context.get_block_header(),\n            self.context.this_address(),\n            self.storage_slot,\n        )\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr"},"187":{"source":"use crate::context::{PublicContext, UtilityContext};\nuse crate::state_vars::storage::Storage;\nuse dep::protocol_types::traits::Packable;\n\n// docs:start:public_mutable_struct\npub struct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context, let N: u32> Storage<N> for PublicMutable<T, Context>\nwhere\n    T: Packable<N>,\n{\n    fn get_storage_slot(self) -> Field {\n        self.storage_slot\n    }\n}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field,\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<let T_PACKED_LEN: u32>(self, value: T)\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UtilityContext> {\n    pub unconstrained fn read<let T_PACKED_LEN: u32>(self) -> T\n    where\n        T: Packable<T_PACKED_LEN>,\n    {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr"},"201":{"source":"/// Appends two `BoundedVec`s together, returning one that contains all of the elements of the first one followed by all\n/// of the elements of the second one. The resulting `BoundedVec` can have any arbitrary maximum length, but it must be\n/// large enough to fit all of the elements of both the first and second vectors.\npub fn append<T, let A_LEN: u32, let B_LEN: u32, let DST_LEN: u32>(\n    a: BoundedVec<T, A_LEN>,\n    b: BoundedVec<T, B_LEN>,\n) -> BoundedVec<T, DST_LEN> {\n    let mut dst = BoundedVec::new();\n\n    dst.extend_from_bounded_vec(a);\n    dst.extend_from_bounded_vec(b);\n\n    dst\n}\n\nmod test {\n    use super::append;\n\n    #[test]\n    unconstrained fn append_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::new();\n        let b: BoundedVec<_, 14> = BoundedVec::new();\n\n        let result: BoundedVec<Field, 5> = append(a, b);\n\n        assert_eq(result.len(), 0);\n        assert_eq(result.storage(), std::mem::zeroed());\n    }\n\n    #[test]\n    unconstrained fn append_non_empty_vecs() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let result: BoundedVec<Field, 8> = append(a, b);\n\n        assert_eq(result.len(), 6);\n        assert_eq(result.storage(), [1, 2, 3, 4, 5, 6, std::mem::zeroed(), std::mem::zeroed()]);\n    }\n\n    #[test(should_fail_with = \"out of bounds\")]\n    unconstrained fn append_non_empty_vecs_insufficient_max_len() {\n        let a: BoundedVec<_, 3> = BoundedVec::from_array([1, 2, 3]);\n        let b: BoundedVec<_, 14> = BoundedVec::from_array([4, 5, 6]);\n\n        let _: BoundedVec<Field, 5> = append(a, b);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/append.nr"},"202":{"source":"/// Collapses an array of `Option`s with sparse `Some` values into a `BoundedVec`, essentially unwrapping the `Option`s\n/// and removing the `None` values.\n///\n/// For example, given:\n///   `input: [some(3), none(), some(1)]`\n/// this returns\n///   `collapsed: [3, 1]`\npub fn collapse<T, let N: u32>(input: [Option<T>; N]) -> BoundedVec<T, N>\nwhere\n    T: Eq,\n{\n    // Computing the collapsed BoundedVec would result in a very large number of constraints, since we'd need to loop\n    // over the input array and conditionally write to a dynamic vec index, which is a very unfriendly pattern to the\n    // proving backend.\n    // Instead, we use an unconstrained function to produce the final collapsed array, along with some hints, and then\n    // verify that the input and collapsed arrays are equivalent.\n\n    // Safety: The hints are verified by the `verify_collapse_hints` function.\n    let (collapsed, collapsed_to_input_index_mapping) = unsafe { get_collapse_hints(input) };\n    verify_collapse_hints(input, collapsed, collapsed_to_input_index_mapping);\n    collapsed\n}\n\nfn verify_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n    collapsed: BoundedVec<T, N>,\n    collapsed_to_input_index_mapping: BoundedVec<u32, N>,\n)\nwhere\n    T: Eq,\n{\n    // collapsed should be a BoundedVec with all the non-none elements in input, in the same order. We need to lay down\n    // multiple constraints to guarantee this.\n    // First we check that the number of elements is correct\n    let mut count = 0;\n    for i in 0..N {\n        if input[i].is_some() {\n            count += 1;\n        }\n    }\n    assert_eq(count, collapsed.len(), \"Wrong collapsed vec length\");\n\n    // Then we check that all elements exist in the original array, and are in the same order. To do this we use the\n    // auxiliary collapsed_to_input_index_mapping array, which at index n contains the index in the input array that\n    // corresponds to the collapsed entry at index n.\n    // Example:\n    //  - input: [some(3), none(), some(1)]\n    //  - collapsed: [3, 1]\n    //  - collapsed_to_input_index_mapping: [0, 2]\n    // These two arrays should therefore have the same length.\n    assert_eq(\n        collapsed.len(),\n        collapsed_to_input_index_mapping.len(),\n        \"Collapse hint vec length mismatch\",\n    );\n\n    // We now look at each collapsed entry and check that there is a valid equal entry in the input array.\n    let mut last_index = Option::none();\n    for i in 0..N {\n        if i < collapsed.len() {\n            let input_index = collapsed_to_input_index_mapping.get_unchecked(i);\n            assert(input_index < N, \"Out of bounds index hint\");\n\n            assert_eq(\n                collapsed.get_unchecked(i),\n                input[input_index].unwrap(),\n                \"Wrong collapsed vec content\",\n            );\n\n            // By requiring increasing input indices, we both guarantee that we're not looking at the same input\n            // element more than once, and that we're going over them in the original order.\n            if last_index.is_some() {\n                assert(input_index > last_index.unwrap_unchecked(), \"Wrong collapsed vec order\");\n            }\n            last_index = Option::some(input_index);\n        } else {\n            // BoundedVec assumes that the unused parts of the storage are zeroed out (e.g. in the Eq impl), so we make\n            // sure that this property holds.\n            assert_eq(\n                collapsed.get_unchecked(i),\n                std::mem::zeroed(),\n                \"Dirty collapsed vec storage\",\n            );\n        }\n    }\n    // We now know that:\n    //  - all values in the collapsed array exist in the input array\n    //  - the order of the collapsed values is the same as in the input array\n    //  - no input value is present more than once in the collapsed array\n    //  - the number of elements in the collapsed array is the same as in the input array.\n    // Therefore, the collapsed array is correct.\n}\n\nunconstrained fn get_collapse_hints<T, let N: u32>(\n    input: [Option<T>; N],\n) -> (BoundedVec<T, N>, BoundedVec<u32, N>) {\n    let mut collapsed: BoundedVec<T, N> = BoundedVec::new();\n    let mut collapsed_to_input_index_mapping: BoundedVec<u32, N> = BoundedVec::new();\n\n    for i in 0..N {\n        if input[i].is_some() {\n            collapsed.push(input[i].unwrap_unchecked());\n            collapsed_to_input_index_mapping.push(i);\n        }\n    }\n\n    (collapsed, collapsed_to_input_index_mapping)\n}\n\nmod test {\n    use super::{collapse, verify_collapse_hints};\n\n    #[test]\n    unconstrained fn collapse_empty_array() {\n        let original: [Option<Field>; 2] = [Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 0);\n    }\n\n    #[test]\n    unconstrained fn collapse_non_sparse_array() {\n        let original = [Option::some(7), Option::some(3), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_sparse_array() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_front_padding() {\n        let original =\n            [Option::none(), Option::none(), Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn collapse_back_padding() {\n        let original =\n            [Option::some(7), Option::none(), Option::some(3), Option::none(), Option::none()];\n        let collapsed = collapse(original);\n\n        assert_eq(collapsed.len(), 2);\n        assert_eq(collapsed.get(0), 7);\n        assert_eq(collapsed.get(1), 3);\n    }\n\n    #[test]\n    unconstrained fn verify_collapse_hints_good_hints() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec length\")]\n    unconstrained fn verify_collapse_hints_wrong_length() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Collapse hint vec length mismatch\")]\n    unconstrained fn verify_collapse_hints_hint_length_mismatch() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Out of bounds index hint\")]\n    unconstrained fn verify_collapse_hints_out_of_bounds_index_hint() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 3]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 5]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn verify_collapse_hints_hint_to_none() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 0]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 1]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec content\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_content() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([7, 42]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Wrong collapsed vec order\")]\n    unconstrained fn verify_collapse_hints_wrong_vec_order() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n        let collapsed = BoundedVec::from_array([3, 7]);\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([2, 0]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n    #[test(should_fail_with = \"Dirty collapsed vec storage\")]\n    unconstrained fn verify_collapse_hints_dirty_storage() {\n        let original = [Option::some(7), Option::none(), Option::some(3)];\n\n        let mut collapsed: BoundedVec<u32, 3> = BoundedVec::from_array([7, 3]);\n        // We have to use the unchecked setter as we're knowingly writing past the length, breaking its invariants.\n        collapsed.set_unchecked(2, 1);\n\n        let collapsed_to_input_index_mapping = BoundedVec::from_array([0, 2]);\n\n        verify_collapse_hints(original, collapsed, collapsed_to_input_index_mapping);\n    }\n\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/collapse.nr"},"204":{"source":"/// Returns `DST_LEN` elements from a source array, starting at `offset`. `DST_LEN` must not be larger than the number\n/// of elements past `offset`.\n///\n/// Examples:\n/// ```\n/// let foo: [Field; 2] = subarray([1, 2, 3, 4, 5], 2);\n/// assert_eq(foo, [3, 4]);\n///\n/// let bar: [Field; 5] = subarray([1, 2, 3, 4, 5], 2); // fails - we can't return 5 elements since only 3 remain\n/// ```\npub fn subarray<T, let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [T; SRC_LEN],\n    offset: u32,\n) -> [T; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"DST_LEN too large for offset\");\n\n    let mut dst: [T; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\nmod test {\n    use super::subarray;\n\n    #[test]\n    unconstrained fn subarray_into_empty() {\n        // In all of these cases we're setting DST_LEN to be 0, so we always get back an emtpy array.\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 2), []);\n    }\n\n    #[test]\n    unconstrained fn subarray_complete() {\n        assert_eq(subarray::<Field, _, _>([], 0), []);\n        assert_eq(subarray([1, 2, 3, 4, 5], 0), [1, 2, 3, 4, 5]);\n    }\n\n    #[test]\n    unconstrained fn subarray_different_end_sizes() {\n        // We implicitly select how many values to read in the size of the return array\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4, 5]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3, 4]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2, 3]);\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [2]);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subarray_offset_too_large() {\n        // With an offset of 1 we can only request up to 4 elements\n        let _: [_; 5] = subarray([1, 2, 3, 4, 5], 1);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subarray_bad_return_value() {\n        assert_eq(subarray([1, 2, 3, 4, 5], 1), [3, 3, 4, 5]);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/subarray.nr"},"205":{"source":"use crate::utils::array;\n\n/// Returns `DST_MAX_LEN` elements from a source BoundedVec, starting at `offset`. `offset` must not be larger than the\n/// original length, and `DST_LEN` must not be larger than the total number of elements past `offset` (including the\n/// zeroed elements past `len()`).\n///\n/// Only elements at the beginning of the vector can be removed: it is not possible to also remove elements at the end\n/// of the vector by passing a value for `DST_LEN` that is smaller than `len() - offset`.\n///\n/// Examples:\n/// ```\n/// let foo = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n/// assert_eq(subbvec(foo, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n///\n/// let bar: BoundedVec<_, 1> = subbvec(foo, 2); // fails - we can't return just 1 element since 3 remain\n/// let baz: BoundedVec<_, 10> = subbvec(foo, 3); // fails - we can't return 10 elements since only 7 remain\n/// ```\npub fn subbvec<T, let SRC_MAX_LEN: u32, let DST_MAX_LEN: u32>(\n    bvec: BoundedVec<T, SRC_MAX_LEN>,\n    offset: u32,\n) -> BoundedVec<T, DST_MAX_LEN> {\n    // from_parts_unchecked does not verify that the elements past len are zeroed, but that is not an issue in our case\n    // because we're constructing the new storage array as a subarray of the original one (which should have zeroed\n    // storage past len), guaranteeing correctness. This is because `subarray` does not allow extending arrays past\n    // their original length.\n    BoundedVec::from_parts_unchecked(array::subarray(bvec.storage(), offset), bvec.len() - offset)\n}\n\nmod test {\n    use super::subbvec;\n\n    #[test]\n    unconstrained fn subbvec_empty() {\n        let bvec = BoundedVec::<Field, 0>::from_array([]);\n        assert_eq(subbvec(bvec, 0), bvec);\n    }\n\n    #[test]\n    unconstrained fn subbvec_complete() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), bvec);\n\n        let smaller_capacity = BoundedVec::<_, 5>::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 0), smaller_capacity);\n    }\n\n    #[test]\n    unconstrained fn subbvec_partial() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 8>::from_array([3, 4, 5]));\n        assert_eq(subbvec(bvec, 2), BoundedVec::<_, 3>::from_array([3, 4, 5]));\n    }\n\n    #[test]\n    unconstrained fn subbvec_into_empty() {\n        let bvec: BoundedVec<_, 10> = BoundedVec::from_array([1, 2, 3, 4, 5]);\n        assert_eq(subbvec(bvec, 5), BoundedVec::<_, 5>::from_array([]));\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_offset_past_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n        let _: BoundedVec<_, 1> = subbvec(bvec, 6);\n    }\n\n    #[test(should_fail)]\n    unconstrained fn subbvec_insufficient_dst_len() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // We're not providing enough space to hold all of the items inside the original BoundedVec. subbvec can cause\n        // for the capacity to reduce, but not the length (other than by len - offset).\n        let _: BoundedVec<_, 1> = subbvec(bvec, 2);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_causes_enlarge() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // subbvec does not supprt capacity increases\n        let _: BoundedVec<_, 11> = subbvec(bvec, 0);\n    }\n\n    #[test(should_fail_with = \"DST_LEN too large for offset\")]\n    unconstrained fn subbvec_dst_len_too_large_for_offset() {\n        let bvec = BoundedVec::<_, 10>::from_array([1, 2, 3, 4, 5]);\n\n        // This effectively requests a capacity increase, since there'd be just one element plus the 5 empty slots,\n        // which is less than 7.\n        let _: BoundedVec<_, 7> = subbvec(bvec, 4);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/array/subbvec.nr"},"207":{"source":"use std::static_assert;\n\n// These functions are used to facilitate the conversion of log ciphertext between byte and field representations.\n//\n// `bytes_to_fields` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `bytes_from_fields` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between bytes and fields when processing encrypted logs.\n\n/// Converts the input bytes into an array of fields. A Field is ~254 bits meaning that each field can store 31 whole\n/// bytes. Use `bytes_from_fields` to obtain the original bytes array.\n///\n/// The input bytes are chunked into chunks of 31 bytes. Each 31-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (31 bytes) is encoded as [1 * 256^30 + 10 * 256^29 + 3 * 256^28 + ... + 0]\n/// Note: N must be a multiple of 31 bytes\npub fn bytes_to_fields<let N: u32>(bytes: [u8; N]) -> [Field; N / 31] {\n    // Assert that N is a multiple of 31\n    static_assert(N % 31 == 0, \"N must be a multiple of 31\");\n\n    let mut fields = [0; N / 31];\n\n    // Since N is a multiple of 31, we can simply process all chunks fully\n    for i in 0..N / 31 {\n        let mut field = 0;\n        for j in 0..31 {\n            // Shift the existing value left by 8 bits and add the new byte\n            field = field * 256 + bytes[i * 31 + j] as Field;\n        }\n        fields[i] = field;\n    }\n\n    fields\n}\n\n/// Converts an input BoundedVec of fields into a BoundedVec of bytes in big-endian order. Arbitrary Field arrays\n/// are not allowed: this is assumed to be an array obtained via `bytes_to_fields`, i.e. one that actually represents\n/// bytes. To convert a Field array into bytes, use `fields_to_bytes`.\n///\n/// Each input field must contain at most 31 bytes (this is constrained to be so).\n/// Each field is converted into 31 big-endian bytes, and the resulting 31-byte chunks are concatenated\n/// back together in the order of the original fields.\npub fn bytes_from_fields<let N: u32>(fields: BoundedVec<Field, N>) -> BoundedVec<u8, N * 31> {\n    let mut bytes = BoundedVec::new();\n\n    for i in 0..fields.len() {\n        let field = fields.get(i);\n\n        // We expect that the field contains at most 31 bytes of information.\n        field.assert_max_bit_size::<248>();\n\n        // Now we can safely convert the field to 31 bytes.\n        let field_as_bytes: [u8; 31] = field.to_be_bytes();\n\n        for j in 0..31 {\n            bytes.push(field_as_bytes[j]);\n        }\n    }\n\n    bytes\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{bytes_from_fields, bytes_to_fields};\n\n    #[test]\n    unconstrained fn random_bytes_to_fields_and_back(input: [u8; 93]) {\n        let fields = bytes_to_fields(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `bytes_from_fields`\n        // function.\n        let fields_as_bounded_vec = BoundedVec::<_, 6>::from_array(fields);\n\n        let bytes_back = bytes_from_fields(fields_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(bytes_back.len(), input.len());\n        assert_eq(subarray(bytes_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"N must be a multiple of 31\")]\n    unconstrained fn bytes_to_fields_input_length_not_multiple_of_31() {\n        // Try to convert 32 bytes (not a multiple of 31) to fields\n        let _fields = bytes_to_fields([0; 32]);\n    }\n\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/conversion/bytes_to_fields.nr"},"208":{"source":"// These functions are used to facilitate the conversion of log plaintext represented as fields into bytes and back.\n//\n// `fields_to_bytes` uses fixed-size arrays since encryption contexts have compile-time size information.\n// `fields_from_bytes` uses BoundedVec for flexibility in unconstrained contexts where sizes are dynamic.\n//\n// Together they provide bidirectional conversion between fields and bytes.\n\n/// Converts an input array of fields into a single array of bytes. Use `fields_from_bytes` to obtain the original\n/// field array.\n/// Each field is converted to a 32-byte big-endian array.\n///\n/// For example, if you have a field array [123, 456], it will be converted to a 64-byte array:\n/// [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,123,  // First field (32 bytes)\n///  0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,200]  // Second field (32 bytes)\n///\n/// Since a field is ~254 bits, you'll end up with a subtle 2-bit \"gap\" at the big end, every 32 bytes. Be careful\n/// that such a gap doesn't leak information! This could happen if you for example expected the output to be\n/// indistinguishable from random bytes.\npub fn fields_to_bytes<let N: u32>(fields: [Field; N]) -> [u8; 32 * N] {\n    let mut bytes = [0; 32 * N];\n\n    for i in 0..N {\n        let field_as_bytes: [u8; 32] = fields[i].to_be_bytes();\n\n        for j in 0..32 {\n            bytes[i * 32 + j] = field_as_bytes[j];\n        }\n    }\n\n    bytes\n}\n\n/// Converts an input BoundedVec of bytes into a BoundedVec of fields. Arbitrary byte arrays are not allowed: this\n/// is assumed to be an array obtained via `fields_to_bytes`, i.e. one that actually represents fields. To convert\n/// a byte array into Fields, use `bytes_to_fields`.\n///\n/// The input bytes are chunked into chunks of 32 bytes. Each 32-byte chunk is viewed as big-endian, and is converted\n/// into a Field.\n/// For example, [1, 10, 3, ..., 0] (32 bytes) is encoded as [1 * 256^31 + 10 * 256^30 + 3 * 256^29 + ... + 0]\n/// Note 1: N must be a multiple of 32 bytes\n/// Note 2: The max value check code was taken from std::field::to_be_bytes function.\npub fn fields_from_bytes<let N: u32>(bytes: BoundedVec<u8, N>) -> BoundedVec<Field, N / 32> {\n    // Assert that input length is a multiple of 32\n    assert(bytes.len() % 32 == 0, \"Input length must be a multiple of 32\");\n\n    let mut fields = BoundedVec::new();\n\n    let p = std::field::modulus_be_bytes();\n\n    // Since input length is a multiple of 32, we can simply process all chunks fully\n    for i in 0..bytes.len() / 32 {\n        let mut field = 0;\n\n        // Process each byte in the 32-byte chunk\n        let mut ok = false;\n\n        for j in 0..32 {\n            let next_byte = bytes.get(i * 32 + j);\n            field = field * 256 + next_byte as Field;\n\n            if !ok {\n                if next_byte != p[j] {\n                    assert(next_byte < p[j], \"Value does not fit in field\");\n                    ok = true;\n                }\n            }\n        }\n        assert(ok, \"Value does not fit in field\");\n\n        fields.push(field);\n    }\n\n    fields\n}\n\nmod tests {\n    use crate::utils::array::subarray;\n    use super::{fields_from_bytes, fields_to_bytes};\n\n    #[test]\n    unconstrained fn random_fields_to_bytes_and_back(input: [Field; 3]) {\n        // Convert to bytes\n        let bytes = fields_to_bytes(input);\n\n        // At this point in production, the log flies through the system and we get a BoundedVec on the other end.\n        // So we need to convert the field array to a BoundedVec to be able to feed it to the `fields_from_bytes`\n        // function.\n        // 113 is an arbitrary max length that is larger than the input length of 96.\n        let bytes_as_bounded_vec = BoundedVec::<_, 113>::from_array(bytes);\n\n        // Convert back to fields\n        let fields_back = fields_from_bytes(bytes_as_bounded_vec);\n\n        // Compare the original input with the round-tripped result\n        assert_eq(fields_back.len(), input.len());\n        assert_eq(subarray(fields_back.storage(), 0), input);\n    }\n\n    #[test(should_fail_with = \"Input length must be a multiple of 32\")]\n    unconstrained fn to_fields_assert() {\n        // 143 is an arbitrary max length that is larger than 33\n        let input = BoundedVec::<_, 143>::from_array([\n            1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n            25, 26, 27, 28, 29, 30, 31, 32, 33,\n        ]);\n\n        // This should fail since 33 is not a multiple of 32\n        let _fields = fields_from_bytes(input);\n    }\n\n    #[test]\n    unconstrained fn fields_from_bytes_max_value() {\n        let max_field_as_bytes: [u8; 32] = (-1).to_be_bytes();\n        let input = BoundedVec::<_, 32>::from_array(max_field_as_bytes);\n\n        let fields = fields_from_bytes(input);\n\n        // The result should be a largest value storable in a field (-1 since we are modulo-ing)\n        assert_eq(fields.get(0), -1);\n    }\n\n    // In this test we verify that overflow check works by taking the max allowed value, bumping a random byte\n    // and then feeding it to `fields_from_bytes` as input.\n    #[test(should_fail_with = \"Value does not fit in field\")]\n    unconstrained fn fields_from_bytes_overflow(random_value: u8) {\n        let index_of_byte_to_bump = random_value % 32;\n\n        // Obtain the byte representation of the maximum field value\n        let max_field_value_as_bytes: [u8; 32] = (-1).to_be_bytes();\n\n        let byte_to_bump = max_field_value_as_bytes[index_of_byte_to_bump as u32];\n\n        // Skip test execution if the selected byte is already at maximum value (255).\n        // This is acceptable since we are using fuzz testing to generate many test cases.\n        if byte_to_bump != 255 {\n            let mut input = BoundedVec::<_, 32>::from_array(max_field_value_as_bytes);\n\n            // Increment the selected byte to exceed the field's maximum value\n            input.set(index_of_byte_to_bump as u32, byte_to_bump + 1);\n\n            // Attempt the conversion, which should fail due to the value exceeding the field's capacity\n            let _fields = fields_from_bytes(input);\n        }\n    }\n\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/conversion/fields_to_bytes.nr"},"210":{"source":"use std::option::Option;\n\nglobal KNOWN_NON_RESIDUE: Field = 5; // This is a non-residue in Noir's native Field.\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\n// Power function of two Field arguments of arbitrary size.\n// Adapted from std::field::pow_32.\npub fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Boolean indicating whether Field element is a square, i.e. whether there exists a y in Field s.t. x = y*y.\nunconstrained fn is_square(x: Field) -> bool {\n    let v = pow(x, -1 / 2);\n    v * (v - 1) == 0\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\nunconstrained fn tonelli_shanks_sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n// NB: this doesn't return an option, because in the case of there _not_ being a square root, we still want to return a field element that allows us to then assert in the _constrained_ sqrt function that there is no sqrt.\npub unconstrained fn __sqrt(x: Field) -> (bool, Field) {\n    let is_sq = is_square(x);\n    if is_sq {\n        let sqrt = tonelli_shanks_sqrt(x);\n        (true, sqrt)\n    } else {\n        // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n        // Facts:\n        // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n        // - If x is a square, LS(x) = 1\n        // - If x is not a square, LS(x) = -1\n        // - If x = 0, LS(x) = 0.\n        //\n        // Hence:\n        // sq * sq = sq // 1 * 1 = 1\n        // non-sq * non-sq = sq // -1 * -1 = 1\n        // sq * non-sq = non-sq // -1 * 1 = -1\n        //\n        // See: https://en.wikipedia.org/wiki/Legendre_symbol\n        let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n        let not_sqrt = tonelli_shanks_sqrt(demo_x_not_square);\n        (false, not_sqrt)\n    }\n}\n\n// Returns (false, 0) if there is no square root.\n// Returns (true, sqrt) if there is a square root.\npub fn sqrt(x: Field) -> Option<Field> {\n    // Safety: if the hint returns the square root of x, then we simply square it\n    // check the result equals x. If x is not square, we return a value that\n    // enables us to prove that fact (see the `else` clause below).\n    let (is_sq, maybe_sqrt) = unsafe { __sqrt(x) };\n\n    if is_sq {\n        let sqrt = maybe_sqrt;\n        validate_sqrt_hint(x, sqrt);\n        Option::some(sqrt)\n    } else {\n        let not_sqrt_hint = maybe_sqrt;\n        validate_not_sqrt_hint(x, not_sqrt_hint);\n        Option::none()\n    }\n}\n\nfn validate_sqrt_hint(x: Field, hint: Field) {\n    assert(hint * hint == x, f\"The claimed_sqrt {hint} is not the sqrt of x {x}\");\n}\n\nfn validate_not_sqrt_hint(x: Field, hint: Field) {\n    // We need this assertion, because x = 0 would pass the other assertions in this\n    // function, and we don't want people to be able to prove that 0 is not square!\n    assert(x != 0, \"0 has a square root; you cannot claim it is not square\");\n    // Demonstrate that x is not a square (a.k.a. a \"quadratic non-residue\").\n    //\n    // Facts:\n    // The Legendre symbol (\"LS\") of x, is x^((p-1)/2) (mod p).\n    // - If x is a square, LS(x) = 1\n    // - If x is not a square, LS(x) = -1\n    // - If x = 0, LS(x) = 0.\n    //\n    // Hence:\n    // 1. sq * sq = sq // 1 * 1 = 1\n    // 2. non-sq * non-sq = sq // -1 * -1 = 1\n    // 3. sq * non-sq = non-sq // -1 * 1 = -1\n    //\n    // See: https://en.wikipedia.org/wiki/Legendre_symbol\n    //\n    // We want to demonstrate that this below multiplication falls under bullet-point (2):\n    let demo_x_not_square = x * KNOWN_NON_RESIDUE;\n    // I.e. we want to demonstrate that `demo_x_not_square` has Legendre symbol 1\n    // (i.e. that it is a square), so we prove that it is square below.\n    // Why do we want to prove that it has LS 1?\n    // Well, since it was computed with a known-non-residue, its squareness implies we're\n    // in case 2 (something multiplied by a known-non-residue yielding a result which\n    // has a LS of 1), which implies that x must be a non-square. The unconstrained\n    // function gave us the sqrt of demo_x_not_square, so all we need to do is\n    // assert its squareness:\n    assert(\n        hint * hint == demo_x_not_square,\n        f\"The hint {hint} does not demonstrate that {x} is not a square\",\n    );\n}\n\n#[test]\nfn test_sqrt() {\n    let x = 9;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_some());\n    let sqrt = maybe_sqrt.unwrap_unchecked();\n    assert((sqrt == 3) | (sqrt == -3));\n}\n\n#[test]\nfn test_non_square() {\n    let x = 5;\n    let maybe_sqrt = sqrt(x);\n    assert(maybe_sqrt.is_none());\n}\n\n#[test]\nunconstrained fn test_known_non_residue_is_actually_a_non_residue_in_the_field() {\n    assert(!is_square(KNOWN_NON_RESIDUE));\n}\n\n#[test]\nfn test_sqrt_0() {\n    let x = 0;\n    let sqrt = sqrt(x).unwrap();\n    assert(sqrt == 0);\n}\n\n#[test]\nfn test_sqrt_1() {\n    let x = 1;\n    let sqrt = sqrt(x).unwrap();\n    assert((sqrt == 1) | (sqrt == -1));\n}\n\n#[test(should_fail_with = \"The claimed_sqrt 0x04 is not the sqrt of x 0x09\")]\nfn test_bad_sqrt_hint_fails() {\n    validate_sqrt_hint(9, 4);\n}\n\n#[test(should_fail_with = \"The hint 0x04 does not demonstrate that 0x0a is not a square\")]\nfn test_bad_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(10, 4);\n}\n\n#[test(should_fail_with = \"0 has a square root; you cannot claim it is not square\")]\nfn test_0_not_sqrt_hint_fails() {\n    validate_not_sqrt_hint(0, 0);\n}\n\n#[test]\nunconstrained fn test_is_square() {\n    assert(is_square(25));\n}\n\n#[test]\nunconstrained fn test_is_not_square() {\n    assert(!is_square(10));\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/field.nr"},"212":{"source":"use crate::utils::field::sqrt;\nuse dep::protocol_types::point::Point;\n\n// I am storing the modulus minus 1 divided by 2 here because full modulus would throw \"String literal too large\" error\n// Full modulus is 21888242871839275222246405745257275088548364400416034343698204186575808495617\nglobal BN254_FR_MODULUS_DIV_2: Field =\n    10944121435919637611123202872628637544274182200208017171849102093287904247808;\n\n/// Converts a point to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn point_to_bytes(p: Point) -> [u8; 32] {\n    // Note that there is 1 more free bit in the 32 bytes (254 bits currently occupied by the x coordinate, 1 bit for\n    // the \"sign\") so it's possible to use that last bit as an \"is_infinite\" flag if desired in the future.\n    assert(!p.is_infinite, \"Cannot serialize point at infinity as bytes.\");\n\n    let mut result: [u8; 32] = p.x.to_be_bytes();\n\n    if get_sign_of_point(p) {\n        // y is <= (modulus - 1) / 2 so we set the sign bit to 1\n        // Here we leverage that field fits into 254 bits (log2(Fr.MODULUS) < 254) and given that we serialize Fr to 32\n        // bytes and we use big-endian the 2 most significant bits are never populated. Hence we can use one of\n        // the bits as a sign bit.\n        result[0] += 128;\n    }\n\n    result\n}\n\n/**\n * Returns: true if p.y <= MOD_DIV_2, else false.\n */\npub fn get_sign_of_point(p: Point) -> bool {\n    // We store only a \"sign\" of the y coordinate because the rest can be derived from the x coordinate. To get\n    // the sign we check if the y coordinate is less or equal than the curve's order minus 1 divided by 2.\n    // Ideally we'd do `y <= MOD_DIV_2`, but there's no `lte` function, so instead we do `!(y > MOD_DIV_2)`, which is\n    // equivalent, and then rewrite that as `!(MOD_DIV_2 < y)`, since we also have no `gt` function.\n    !BN254_FR_MODULUS_DIV_2.lt(p.y)\n}\n\npub fn point_from_x_coord(x: Field) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n    Point { x, y, is_infinite: false }\n}\n\n/// Uses the x coordinate and sign flag (+/-) to reconstruct the point.\n/// The y coordinate can be derived from the x coordinate and the \"sign\" flag by solving the grumpkin curve\n/// equation for y.\n/// @param x - The x coordinate of the point\n/// @param sign - The \"sign\" of the y coordinate - determines whether y <= (Fr.MODULUS - 1) / 2\npub fn point_from_x_coord_and_sign(x: Field, sign: bool) -> Point {\n    // y ^ 2 = x ^ 3 - 17\n    let rhs = x * x * x - 17;\n    let y = sqrt(rhs).unwrap();\n\n    // If y > MOD_DIV_2 and we want positive sign (or vice versa), negate y\n    let y_is_positive = !BN254_FR_MODULUS_DIV_2.lt(y);\n    let final_y = if y_is_positive == sign { y } else { -y };\n\n    Point { x, y: final_y, is_infinite: false }\n}\n\nmod test {\n    use crate::utils::point::{point_from_x_coord_and_sign, point_to_bytes};\n    use dep::protocol_types::point::Point;\n\n    #[test]\n    unconstrained fn test_point_to_bytes_positive_sign() {\n        let p = Point {\n            x: 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73,\n            y: 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_positive_sign = [\n            154, 244, 31, 93, 233, 100, 70, 220, 55, 118, 161, 235, 45, 152, 187, 149, 107, 122,\n            205, 153, 121, 166, 120, 84, 190, 198, 250, 124, 41, 115, 189, 115,\n        ];\n        assert_eq(expected_compressed_point_positive_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_to_bytes_negative_sign() {\n        let p = Point {\n            x: 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5,\n            y: 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0,\n            is_infinite: false,\n        };\n\n        let compressed_point = point_to_bytes(p);\n\n        let expected_compressed_point_negative_sign = [\n            36, 115, 113, 101, 46, 85, 221, 116, 201, 175, 141, 190, 159, 180, 73, 49, 186, 41, 169,\n            34, 153, 148, 56, 75, 215, 7, 119, 150, 193, 78, 226, 181,\n        ];\n\n        assert_eq(expected_compressed_point_negative_sign, compressed_point);\n    }\n\n    #[test]\n    unconstrained fn test_point_from_x_coord_and_sign() {\n        // Test positive y coordinate\n        let x = 0x1af41f5de96446dc3776a1eb2d98bb956b7acd9979a67854bec6fa7c2973bd73;\n        let sign = true;\n        let p = point_from_x_coord_and_sign(x, sign);\n\n        assert_eq(p.x, x);\n        assert_eq(p.y, 0x07fc22c7f2c7057571f137fe46ea9c95114282bc95d37d71ec4bfb88de457d4a);\n        assert_eq(p.is_infinite, false);\n\n        // Test negative y coordinate\n        let x2 = 0x247371652e55dd74c9af8dbe9fb44931ba29a9229994384bd7077796c14ee2b5;\n        let sign2 = false;\n        let p2 = point_from_x_coord_and_sign(x2, sign2);\n\n        assert_eq(p2.x, x2);\n        assert_eq(p2.y, 0x26441aec112e1ae4cee374f42556932001507ad46e255ffb27369c7e3766e5c0);\n        assert_eq(p2.is_infinite, false);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/point.nr"},"213":{"source":"use crate::oracle::random::random;\n\n/// Returns as many random bytes as specified through N.\npub unconstrained fn get_random_bytes<let N: u32>() -> [u8; N] {\n    let mut bytes = [0; N];\n    let mut idx = 32;\n    let mut randomness = [0; 32];\n    for i in 0..N {\n        if idx == 32 {\n            randomness = random().to_be_bytes();\n            idx = 1; // Skip the first byte as it's always 0.\n        }\n        bytes[i] = randomness[idx];\n        idx += 1;\n    }\n    bytes\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/random.nr"},"214":{"source":"/// Calls a function and returns its return value, but removes any constraints associated with calling the function,\n/// behaving as if the function was unconstrained.\npub unconstrained fn remove_constraints<Env, T>(f: fn[Env]() -> T) -> T {\n    f()\n}\n\n/// Calls a function and returns its return value, removing any constraints associated with calling the function if\n/// `condition` is true, behaving as if the function was unconstrained.\n///\n/// Requires `condition` to be a compile time constant.\npub fn remove_constraints_if<Env, T>(condition: bool, f: fn[Env]() -> T) -> T {\n    // If `condition` is not a compile-time constant, then the compiler won't optimize away the branch not taken in the\n    // if statement below, and we may end up with constraints for `f` regardless of the runtime value of `condition`.\n    assert_constant(condition);\n\n    if condition {\n        // Safety: the purpose of this function is to execute `f` with no constraints when `condition` is true.\n        unsafe {\n            remove_constraints(f)\n        }\n    } else {\n        f()\n    }\n}\n\nmod test {\n    use super::remove_constraints;\n\n    fn return_unit() -> () {\n        ()\n    }\n\n    fn return_field() -> Field {\n        5\n    }\n\n    #[test]\n    fn returns_unit() {\n        let expected = return_unit();\n        // Safety: this is a test\n        let actual = unsafe { remove_constraints(|| return_unit()) };\n        assert_eq(actual, expected);\n    }\n\n    #[test]\n    fn returns_original_value() {\n        let expected = return_field();\n        // Safety: this is a test\n        let actual = unsafe { remove_constraints(|| return_field()) };\n        assert_eq(actual, expected);\n    }\n\n    #[test]\n    unconstrained fn returns_unit_unconstrained() {\n        let expected = return_unit();\n        let actual = remove_constraints(|| return_unit());\n        assert_eq(actual, expected);\n    }\n\n    #[test]\n    unconstrained fn returns_original_value_unconstrained() {\n        let expected = return_field();\n        let actual = remove_constraints(|| return_field());\n        assert_eq(actual, expected);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/remove_constraints.nr"},"217":{"source":"use crate::{\n    context::{PublicContext, UtilityContext},\n    history::public_storage::PublicStorageHistoricalRead,\n    oracle,\n};\nuse dep::protocol_types::{\n    address::AztecAddress, block_header::BlockHeader, hash::poseidon2_hash, traits::Packable,\n};\n\n/// A struct that allows for efficient reading of value `T` from public storage in private.\n///\n/// The efficient reads are achieved by verifying large values through a single hash check\n/// and then proving inclusion only of the hash in public storage. This reduces the number\n/// of required tree inclusion proofs from `N` to 1.\n///\n/// # Type Parameters\n/// - `T`: The underlying type being wrapped, must implement `Packable<N>`\n/// - `N`: The number of field elements required to pack values of type `T`\npub struct WithHash<T, let N: u32> {\n    value: T,\n    packed: [Field; N],\n    hash: Field,\n}\n\nimpl<T, let N: u32> WithHash<T, N>\nwhere\n    T: Packable<N> + Eq,\n{\n    pub fn new(value: T) -> Self {\n        let packed = value.pack();\n        Self { value, packed, hash: poseidon2_hash(packed) }\n    }\n\n    pub fn get_value(self) -> T {\n        self.value\n    }\n\n    pub fn get_hash(self) -> Field {\n        self.hash\n    }\n\n    pub fn public_storage_read(context: PublicContext, storage_slot: Field) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub unconstrained fn utility_public_storage_read(\n        context: UtilityContext,\n        storage_slot: Field,\n    ) -> T {\n        context.storage_read(storage_slot)\n    }\n\n    pub fn historical_public_storage_read(\n        header: BlockHeader,\n        address: AztecAddress,\n        storage_slot: Field,\n    ) -> T {\n        let historical_block_number = header.global_variables.block_number;\n\n        // We could simply produce historical inclusion proofs for each field in `packed`, but that would require one\n        // full sibling path per storage slot (since due to kernel siloing the storage is not contiguous). Instead, we\n        // get an oracle to provide us the values, and instead we prove inclusion of their hash, which is both a much\n        // smaller proof (a single slot), and also independent of the size of T (except in that we need to pack and hash T).\n        let hint = WithHash::new(\n            // Safety: We verify that a hash of the hint/packed data matches the stored hash.\n            unsafe {\n                oracle::storage::storage_read(address, storage_slot, historical_block_number)\n            },\n        );\n\n        let hash = header.public_storage_historical_read(storage_slot + N as Field, address);\n\n        if hash != 0 {\n            assert_eq(hash, hint.get_hash(), \"Hint values do not match hash\");\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized. Therefore, the hints must then be zero\n            // (i.e. the default value for public storage) as well.\n            assert_eq(\n                hint.get_value(),\n                T::unpack(std::mem::zeroed()),\n                \"Non-zero hint for zero hash\",\n            );\n        };\n\n        hint.get_value()\n    }\n}\n\nimpl<T, let N: u32> Packable<N + 1> for WithHash<T, N>\nwhere\n    T: Packable<N>,\n{\n    fn pack(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n        for i in 0..N {\n            result[i] = self.packed[i];\n        }\n        result[N] = self.hash;\n\n        result\n    }\n\n    fn unpack(packed: [Field; N + 1]) -> Self {\n        let mut value_packed: [Field; N] = std::mem::zeroed();\n        for i in 0..N {\n            value_packed[i] = packed[i];\n        }\n        let hash = packed[N];\n\n        Self { value: T::unpack(value_packed), packed: value_packed, hash }\n    }\n}\n\nmod test {\n    use crate::{\n        oracle::random::random,\n        test::{\n            helpers::{cheatcodes, test_environment::TestEnvironment},\n            mocks::mock_struct::MockStruct,\n        },\n        utils::with_hash::WithHash,\n    };\n    use dep::protocol_types::hash::poseidon2_hash;\n    use dep::protocol_types::traits::{Packable, ToField};\n    use dep::std::{mem, test::OracleMock};\n\n    global storage_slot: Field = 47;\n\n    #[test]\n    unconstrained fn create_and_recover() {\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n        let recovered = WithHash::unpack(value_with_hash.pack());\n\n        assert_eq(recovered.value, value);\n        assert_eq(recovered.packed, value.pack());\n        assert_eq(recovered.hash, poseidon2_hash(value.pack()));\n    }\n\n    #[test]\n    unconstrained fn read_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n\n        // We should get zeroed value\n        let expected: MockStruct = mem::zeroed();\n        assert_eq(result, expected);\n    }\n\n    #[test]\n    unconstrained fn read_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value = MockStruct { a: 5, b: 3 };\n        let value_with_hash = WithHash::new(value);\n\n        // We write the value with hash to storage\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            storage_slot,\n            value_with_hash.pack(),\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let result = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n\n        assert_eq(result, value);\n    }\n\n    #[test(should_fail_with = \"Non-zero hint for zero hash\")]\n    unconstrained fn test_bad_hint_uninitialized_value() {\n        let mut env = TestEnvironment::new();\n\n        env.advance_block_to(6);\n\n        let value_packed = MockStruct { a: 1, b: 1 }.pack();\n\n        let block_header = env.private().historical_header;\n        let address = env.contract_address();\n\n        // Mock the oracle to return a non-zero hint/packed value\n        let _ = OracleMock::mock(\"storageRead\")\n            .with_params((\n                address.to_field(), storage_slot, block_header.global_variables.block_number,\n                value_packed.len(),\n            ))\n            .returns(value_packed)\n            .times(1);\n\n        // This should revert because the hint value is non-zero and the hash is zero (default value of storage)\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            block_header,\n            address,\n            storage_slot,\n        );\n    }\n\n    #[test(should_fail_with = \"Hint values do not match hash\")]\n    unconstrained fn test_bad_hint_initialized_value() {\n        let mut env = TestEnvironment::new();\n\n        let value_packed = MockStruct { a: 5, b: 3 }.pack();\n\n        // We write the value to storage\n        cheatcodes::direct_storage_write(env.contract_address(), storage_slot, value_packed);\n\n        // Now we write incorrect hash to the hash storage slot\n        let incorrect_hash = random();\n        let hash_storage_slot = storage_slot + (value_packed.len() as Field);\n        cheatcodes::direct_storage_write(\n            env.contract_address(),\n            hash_storage_slot,\n            [incorrect_hash],\n        );\n\n        // We advance block by 1 because env.private() currently returns context at latest_block - 1\n        env.advance_block_by(1);\n\n        let _ = WithHash::<MockStruct, _>::historical_public_storage_read(\n            env.private().historical_header,\n            env.contract_address(),\n            storage_slot,\n        );\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/aztec/src/utils/with_hash.nr"},"224":{"source":"use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/noir-lang/poseidon/v0.1.1/src/poseidon2.nr"},"242":{"source":"use crate::traits::{Deserialize, Empty, FromField, Serialize, ToField};\n\npub struct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    pub inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self { inner: fields[0] as u32 }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<let N: u32>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = crate::hash::poseidon2_hash_bytes(bytes);\n\n        // `hash` is automatically truncated to fit within 32 bits.\n        FunctionSelector::from_field(hash)\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n\n#[test]\nfn test_is_valid_selector() {\n    let selector = FunctionSelector::from_signature(\"IS_VALID()\");\n    assert_eq(selector.to_field(), 0x73cdda47);\n}\n\n#[test]\nfn test_long_selector() {\n    let selector =\n        FunctionSelector::from_signature(\"foo_and_bar_and_baz_and_foo_bar_baz_and_bar_foo\");\n    assert_eq(selector.to_field(), 0x7590a997);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr"},"285":{"source":"use crate::{\n    address::{\n        partial_address::PartialAddress, salted_initialization_hash::SaltedInitializationHash,\n    },\n    constants::{\n        AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1, MAX_FIELD_VALUE,\n        MAX_PROTOCOL_CONTRACTS,\n    },\n    contract_class_id::ContractClassId,\n    hash::poseidon2_hash_with_separator,\n    public_keys::{IvpkM, NpkM, OvpkM, PublicKeys, ToPoint, TpkM},\n    traits::{Deserialize, Empty, FromField, Packable, Serialize, ToField},\n    utils::field::{pow, sqrt},\n};\n\n// We do below because `use crate::point::Point;` does not work\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\n\nuse crate::public_keys::AddressPoint;\nuse std::{\n    embedded_curve_ops::{EmbeddedCurveScalar, fixed_base_scalar_mul as derive_public_key},\n    ops::Add,\n};\n\n// Aztec address\npub struct AztecAddress {\n    pub inner: Field,\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other: Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self { inner: 0 }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\n/// We implement the Packable trait for AztecAddress because it can be stored in contract's storage (and there\n/// the implementation of Packable is required).\nimpl Packable<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn pack(self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        Self::deserialize(fields)\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn to_address_point(self) -> AddressPoint {\n        // We compute the address point by taking our address, setting it to x, and then solving for y in the\n        // equation which defines our bn curve:\n        // y^2 = x^3 - 17; x = address\n        let x = self.inner;\n        let y_squared = pow(x, 3) - 17;\n\n        // TODO (#8970): Handle cases where we cannot recover a point from an address\n        let mut y = sqrt(y_squared);\n\n        // If we get a negative y coordinate (any y where y > MAX_FIELD_VALUE / 2), we pin it to the\n        // positive one (any value where y <= MAX_FIELD_VALUE / 2) by subtracting it from the Field modulus\n        // note: The field modulus is MAX_FIELD_VALUE + 1\n        if (!(y.lt(MAX_FIELD_VALUE / 2) | y.eq(MAX_FIELD_VALUE / 2))) {\n            y = (MAX_FIELD_VALUE + 1) - y;\n        }\n\n        AddressPoint { inner: Point { x: self.inner, y, is_infinite: false } }\n    }\n\n    pub fn compute(public_keys: PublicKeys, partial_address: PartialAddress) -> AztecAddress {\n        let public_keys_hash = public_keys.hash();\n\n        let pre_address = poseidon2_hash_with_separator(\n            [public_keys_hash.to_field(), partial_address.to_field()],\n            GENERATOR_INDEX__CONTRACT_ADDRESS_V1,\n        );\n\n        let address_point = derive_public_key(EmbeddedCurveScalar::from_field(pre_address)).add(\n            public_keys.ivpk_m.to_point(),\n        );\n\n        // Note that our address is only the x-coordinate of the full address_point. This is okay because when people want to encrypt something and send it to us\n        // they can recover our full point using the x-coordinate (our address itself). To do this, they recompute the y-coordinate according to the equation y^2 = x^3 - 17.\n        // When they do this, they may get a positive y-coordinate (a value that is less than or equal to MAX_FIELD_VALUE / 2) or\n        // a negative y-coordinate (a value that is more than MAX_FIELD_VALUE), and we cannot dictate which one they get and hence the recovered point may sometimes be different than the one\n        // our secret can decrypt. Regardless though, they should and will always encrypt using point with the positive y-coordinate by convention.\n        // This ensures that everyone encrypts to the same point given an arbitrary x-coordinate (address). This is allowed because even though our original point may not have a positive y-coordinate,\n        // with our original secret, we will be able to derive the secret to the point with the flipped (and now positive) y-coordinate that everyone encrypts to.\n        AztecAddress::from_field(address_point.x)\n    }\n\n    pub fn compute_from_class_id(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash,\n        public_keys: PublicKeys,\n    ) -> Self {\n        let partial_address = PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            salted_initialization_hash,\n        );\n\n        AztecAddress::compute(public_keys, partial_address)\n    }\n\n    pub fn is_protocol_contract(self) -> bool {\n        self.inner.lt(MAX_PROTOCOL_CONTRACTS as Field)\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys() {\n    let public_keys = PublicKeys {\n        npk_m: NpkM {\n            inner: Point {\n                x: 0x22f7fcddfa3ce3e8f0cc8e82d7b94cdd740afa3e77f8e4a63ea78a239432dcab,\n                y: 0x0471657de2b6216ade6c506d28fbc22ba8b8ed95c871ad9f3e3984e90d9723a7,\n                is_infinite: false,\n            },\n        },\n        ivpk_m: IvpkM {\n            inner: Point {\n                x: 0x111223493147f6785514b1c195bb37a2589f22a6596d30bb2bb145fdc9ca8f1e,\n                y: 0x273bbffd678edce8fe30e0deafc4f66d58357c06fd4a820285294b9746c3be95,\n                is_infinite: false,\n            },\n        },\n        ovpk_m: OvpkM {\n            inner: Point {\n                x: 0x09115c96e962322ffed6522f57194627136b8d03ac7469109707f5e44190c484,\n                y: 0x0c49773308a13d740a7f0d4f0e6163b02c5a408b6f965856b6a491002d073d5b,\n                is_infinite: false,\n            },\n        },\n        tpk_m: TpkM {\n            inner: Point {\n                x: 0x00d3d81beb009873eb7116327cf47c612d5758ef083d4fda78e9b63980b2a762,\n                y: 0x2f567d22d2b02fe1f4ad42db9d58a36afd1983e7e2909d1cab61cafedad6193a,\n                is_infinite: false,\n            },\n        },\n    };\n\n    let partial_address = PartialAddress::from_field(\n        0x0a7c585381b10f4666044266a02405bf6e01fa564c8517d4ad5823493abd31de,\n    );\n\n    let address = AztecAddress::compute(public_keys, partial_address);\n\n    // The following value was generated by `derivation.test.ts`.\n    // --> Run the test with AZTEC_GENERATE_TEST_DATA=1 flag to update test data.\n    let expected_computed_address_from_partial_and_pubkeys =\n        0x24e4646f58b9fbe7d38e317db8d5636c423fbbdfbe119fc190fe9c64747e0c62;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkeys);\n}\n\n#[test]\nfn compute_preaddress_from_partial_and_pub_keys() {\n    let pre_address = poseidon2_hash_with_separator([1, 2], GENERATOR_INDEX__CONTRACT_ADDRESS_V1);\n    let expected_computed_preaddress_from_partial_and_pubkey =\n        0x23ce9be3fa3c846b0f9245cc796902e731d04f086e8a42473bb29e405fc98075;\n    assert(pre_address == expected_computed_preaddress_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr"},"302":{"source":"/// Utility function to console.log data in the acir simulator.\n/// Example:\n///   debug_log(\"blah blah this is a debug string\");\npub fn debug_log<let N: u32>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n\n/// Utility function to console.log data in the acir simulator. This variant receives a format string in which the\n/// `${k}` tokens will be replaced with the k-eth value in the `args` array.\n/// Examples:\n///   debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n///   debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\npub fn debug_log_format<let M: u32, let N: u32>(msg: str<M>, args: [Field; N]) {\n    // Safety: This oracle call returns nothing: we only call it for its side effects. It is therefore always safe\n    // to call.\n    unsafe { debug_log_oracle_wrapper(msg, args) };\n}\n\npub unconstrained fn debug_log_oracle_wrapper<let M: u32, let N: u32>(\n    msg: str<M>,\n    args: [Field; N],\n) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<let M: u32>(_msg: str<M>, args: [Field]) {}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr"},"303":{"source":"use crate::{\n    abis::{\n        contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n        function_selector::FunctionSelector,\n        note_hash::ScopedNoteHash,\n        nullifier::ScopedNullifier,\n        private_log::{PrivateLog, PrivateLogData},\n        side_effect::{OrderedValue, scoped::Scoped},\n    },\n    address::{AztecAddress, EthAddress},\n    constants::{\n        CONTRACT_CLASS_LOG_SIZE_IN_FIELDS, FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__NOTE_HASH_NONCE,\n        GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__SILOED_NOTE_HASH,\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH, TWO_POW_64,\n    },\n    merkle_tree::root::root_from_sibling_path,\n    messaging::l2_to_l1_message::L2ToL1Message,\n    poseidon2::Poseidon2Sponge,\n    traits::{FromField, Hash, ToField},\n    utils::{arrays::array_concat, field::{field_from_bytes, field_from_bytes_32_trunc}},\n};\nuse std::embedded_curve_ops::EmbeddedCurveScalar;\n\npub fn sha256_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256::digest(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT],\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(\n        function_leaf,\n        function_leaf_index,\n        function_leaf_sibling_path,\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier_in_tx: Field, note_index_in_tx: u32) -> Field {\n    // Hashing the first nullifier with note index in tx is guaranteed to be unique (because all nullifiers are also\n    // unique).\n    poseidon2_hash_with_separator(\n        [first_nullifier_in_tx, note_index_in_tx as Field],\n        GENERATOR_INDEX__NOTE_HASH_NONCE,\n    )\n}\n\npub fn compute_unique_note_hash(note_nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [note_nonce, siloed_note_hash];\n    poseidon2_hash_with_separator(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_nonce_and_unique_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    let note_nonce = compute_note_hash_nonce(first_nullifier, note_index_in_tx);\n    compute_unique_note_hash(note_nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, note_hash: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), note_hash],\n        GENERATOR_INDEX__SILOED_NOTE_HASH,\n    )\n}\n\n/// Computes unique note hashes from siloed note hashes\npub fn compute_unique_siloed_note_hash(\n    siloed_note_hash: Field,\n    first_nullifier: Field,\n    note_index_in_tx: u32,\n) -> Field {\n    if siloed_note_hash == 0 {\n        0\n    } else {\n        compute_nonce_and_unique_note_hash(siloed_note_hash, first_nullifier, note_index_in_tx)\n    }\n}\n\n/// Siloing in the context of Aztec refers to the process of hashing a note hash with a contract address (this way\n/// the note hash is scoped to a specific contract). This is used to prevent intermingling of notes between contracts.\npub fn silo_note_hash(note_hash: ScopedNoteHash) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_note_hash(note_hash.contract_address, note_hash.value())\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    poseidon2_hash_with_separator(\n        [app.to_field(), nullifier],\n        GENERATOR_INDEX__OUTER_NULLIFIER,\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_private_log_field(contract_address: AztecAddress, field: Field) -> Field {\n    poseidon2_hash([contract_address.to_field(), field])\n}\n\npub fn silo_private_log(private_log: Scoped<PrivateLogData>) -> PrivateLog {\n    if private_log.contract_address.is_zero() {\n        private_log.inner.log\n    } else {\n        let mut fields = private_log.inner.log.fields;\n        fields[0] = compute_siloed_private_log_field(private_log.contract_address, fields[0]);\n        PrivateLog::new(fields, private_log.inner.log.length)\n    }\n}\n\npub fn compute_contract_class_log_hash(log: [Field; CONTRACT_CLASS_LOG_SIZE_IN_FIELDS]) -> Field {\n    poseidon2_hash(log)\n}\n\npub fn compute_app_secret_key(\n    master_secret_key: EmbeddedCurveScalar,\n    app_address: AztecAddress,\n    app_secret_generator: Field,\n) -> Field {\n    poseidon2_hash_with_separator(\n        [master_secret_key.hi, master_secret_key.lo, app_address.to_field()],\n        app_secret_generator,\n    )\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    poseidon2_hash([left, right])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    let contract_address_bytes: [u8; 32] = contract_address.to_field().to_be_bytes();\n    let recipient_bytes: [u8; 20] = recipient.to_be_bytes();\n    let content_bytes: [u8; 32] = content.to_be_bytes();\n    let rollup_version_id_bytes: [u8; 32] = rollup_version_id.to_be_bytes();\n    let chain_id_bytes: [u8; 32] = chain_id.to_be_bytes();\n\n    let mut bytes: [u8; 148] = std::mem::zeroed();\n    for i in 0..32 {\n        bytes[i] = contract_address_bytes[i];\n        bytes[i + 32] = rollup_version_id_bytes[i];\n        // 64 - 84 are for recipient.\n        bytes[i + 84] = chain_id_bytes[i];\n        bytes[i + 116] = content_bytes[i];\n    }\n\n    for i in 0..20 {\n        bytes[64 + i] = recipient_bytes[i];\n    }\n\n    sha256_to_field(bytes)\n}\n\npub fn silo_l2_to_l1_message(\n    msg: Scoped<L2ToL1Message>,\n    rollup_version_id: Field,\n    chain_id: Field,\n) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.inner.recipient,\n            msg.inner.content,\n            rollup_version_id,\n            chain_id,\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a u128.\n    // 4 Field elements when converted to bytes will usually\n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field\n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes: [u8; 32] = input[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n#[inline_always]\npub fn pedersen_hash<let N: u32>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    poseidon::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[no_predicates]\npub fn poseidon2_hash_with_separator<let N: u32, T>(inputs: [Field; N], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let inputs_with_separator = array_concat([separator.to_field()], inputs);\n    poseidon2_hash(inputs_with_separator)\n}\n\n// Performs a fixed length hash with a subarray of the given input.\n// Useful for SpongeBlob in which we aborb M things and want to check it vs a hash of M elts of an N-len array.\n// Using stdlib poseidon, this will always absorb an extra 1 as a 'variable' hash, and not match spongeblob.squeeze()\n// or any ts implementation. Also checks that any remaining elts not hashed are empty.\n#[no_predicates]\npub fn poseidon2_hash_subarray<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, false);\n    sponge.squeeze()\n}\n\n// NB the below is the same as poseidon::poseidon2::Poseidon2::hash(), but replacing a range check with a bit check,\n// and absorbing in chunks of 3 below.\n#[no_predicates]\npub fn poseidon2_cheaper_variable_hash<let N: u32>(input: [Field; N], in_len: u32) -> Field {\n    let mut sponge = poseidon2_absorb_chunks(input, in_len, true);\n    // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n    // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n    // fixed-length and variable-length hashes do not collide)\n    if in_len != N {\n        sponge.absorb(1);\n    }\n    sponge.squeeze()\n}\n\n// The below fn reduces gates of a conditional poseidon2 hash by approx 3x (thank you ~* Giant Brain Dev @IlyasRidhuan *~ for the idea)\n// Why? Because when we call stdlib poseidon, we call absorb for each item. When absorbing is conditional, it seems the compiler does not know\n// what cache_size will be when calling absorb, so it assigns the permutation gates for /each i/ rather than /every 3rd i/, which is actually required.\n// The below code forces the compiler to:\n//  - absorb normally up to 2 times to set cache_size to 1\n//  - absorb in chunks of 3 to ensure perm. only happens every 3rd absorb\n//  - absorb normally up to 2 times to add any remaining values to the hash\n// In fixed len hashes, the compiler is able to tell that it will only need to perform the permutation every 3 absorbs.\n// NB: it also replaces unnecessary range checks (i < thing) with a bit check (&= i != thing), which alone reduces the gates of a var. hash by half.\n\n#[no_predicates]\nfn poseidon2_absorb_chunks<let N: u32>(\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n) -> Poseidon2Sponge {\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    // Even though shift is always 1 here, if we input in_len = 0 we get an underflow\n    // since we cannot isolate computation branches. The below is just to avoid that.\n    let shift = if in_len == 0 { 0 } else { 1 };\n    if in_len != 0 {\n        // cache_size = 0, init absorb\n        sponge.cache[0] = input[0];\n        sponge.cache_size = 1;\n        // shift = num elts already added to make cache_size 1 = 1 for a fresh sponge\n        // M = max_chunks = (N - 1 - (N - 1) % 3) / 3: (must be written as a fn of N to compile)\n        // max_remainder = (N - 1) % 3;\n        // max_chunks = (N - 1 - max_remainder) / 3;\n        sponge = poseidon2_absorb_chunks_loop::<N, (N - 1 - (N - 1) % 3) / 3>(\n            sponge,\n            input,\n            in_len,\n            variable,\n            shift,\n        );\n    }\n    sponge\n}\n\n// NB: If it's not required to check that the non-absorbed elts of 'input' are 0s, set skip_0_check=true\n#[no_predicates]\npub fn poseidon2_absorb_chunks_existing_sponge<let N: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    skip_0_check: bool,\n) -> Poseidon2Sponge {\n    let mut sponge = in_sponge;\n    // 'shift' is to account for already added inputs\n    let mut shift = 0;\n    // 'stop' is to avoid an underflow when inputting in_len = 0\n    let mut stop = false;\n    for i in 0..3 {\n        if shift == in_len {\n            stop = true;\n        }\n        if (sponge.cache_size != 1) & (!stop) {\n            sponge.absorb(input[i]);\n            shift += 1;\n        }\n    }\n    sponge = if stop {\n        sponge\n    } else {\n        // max_chunks = (N - (N % 3)) / 3;\n        poseidon2_absorb_chunks_loop::<N, (N - (N % 3)) / 3>(\n            sponge,\n            input,\n            in_len,\n            skip_0_check,\n            shift,\n        )\n    };\n    sponge\n}\n\n// The below is the loop to absorb elts into a poseidon sponge in chunks of 3\n// shift - the num of elts already absorbed to ensure the sponge's cache_size = 1\n// M - the max number of chunks required to absorb N things (must be comptime to compile)\n// NB: The 0 checks ('Found non-zero field...') are messy, but having a separate loop over N to check\n// for 0s costs 3N gates. Current approach is approx 2N gates.\n#[no_predicates]\nfn poseidon2_absorb_chunks_loop<let N: u32, let M: u32>(\n    in_sponge: Poseidon2Sponge,\n    input: [Field; N],\n    in_len: u32,\n    variable: bool,\n    shift: u32,\n) -> Poseidon2Sponge {\n    assert(in_len <= N, \"Given in_len to absorb is larger than the input array len\");\n    // When we have an existing sponge, we may have a shift of 0, and the final 'k+2' below = N\n    // The below avoids an overflow\n    let skip_last = 3 * M == N;\n    // Writing in_sponge: &mut does not compile\n    let mut sponge = in_sponge;\n    let mut should_add = true;\n    // The num of things left over after absorbing in 3s\n    let remainder = (in_len - shift) % 3;\n    // The num of chunks of 3 to absorb (maximum M)\n    let chunks = (in_len - shift - remainder) / 3;\n    for i in 0..M {\n        // Now we loop through cache size = 1 -> 3\n        should_add &= i != chunks;\n        // This is the index at the start of the chunk (for readability)\n        let k = 3 * i + shift;\n        if should_add {\n            // cache_size = 1, 2 => just assign\n            sponge.cache[1] = input[k];\n            sponge.cache[2] = input[k + 1];\n            // cache_size = 3 => duplex + perm\n            for j in 0..3 {\n                sponge.state[j] += sponge.cache[j];\n            }\n            sponge.state = std::hash::poseidon2_permutation(sponge.state, 4);\n            sponge.cache[0] = input[k + 2];\n            // cache_size is now 1 again, repeat loop\n        } else if (!variable) & (i != chunks) {\n            // if we are hashing a fixed len array which is a subarray, we check the remaining elts are 0\n            // NB: we don't check at i == chunks, because that chunk contains elts to be absorbed or checked below\n            let last_0 = if (i == M - 1) & (skip_last) {\n                0\n            } else {\n                input[k + 2]\n            };\n            let all_0 = (input[k] == 0) & (input[k + 1] == 0) & (last_0 == 0);\n            assert(all_0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    // we have 'remainder' num of items left to absorb\n    should_add = true;\n    // below is to avoid overflows (i.e. if inlen is close to N)\n    let mut should_check = !variable;\n    for i in 0..3 {\n        should_add &= i != remainder;\n        should_check &= in_len - remainder + i != N;\n        if should_add {\n            // we want to absorb the final 'remainder' items\n            sponge.absorb(input[in_len - remainder + i]);\n        } else if should_check {\n            assert(input[in_len - remainder + i] == 0, \"Found non-zero field after breakpoint\");\n        }\n    }\n    sponge\n}\n\npub fn poseidon2_hash_with_separator_slice<T>(inputs: [Field], separator: T) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs[i]);\n    }\n\n    sponge.squeeze()\n}\n\n// This function is  unconstrained because it is intended to be used in unconstrained context only as\n// in constrained contexts it would be too inefficient.\npub unconstrained fn poseidon2_hash_with_separator_bounded_vec<let N: u32, T>(\n    inputs: BoundedVec<Field, N>,\n    separator: T,\n) -> Field\nwhere\n    T: ToField,\n{\n    let in_len = inputs.len() + 1;\n    let iv: Field = (in_len as Field) * TWO_POW_64;\n    let mut sponge = Poseidon2Sponge::new(iv);\n    sponge.absorb(separator.to_field());\n\n    for i in 0..inputs.len() {\n        sponge.absorb(inputs.get(i));\n    }\n\n    sponge.squeeze()\n}\n\n#[no_predicates]\npub fn poseidon2_hash_bytes<let N: u32>(inputs: [u8; N]) -> Field {\n    let mut fields = [0; (N + 30) / 31];\n    let mut field_index = 0;\n    let mut current_field = [0; 31];\n    for i in 0..inputs.len() {\n        let index = i % 31;\n        current_field[index] = inputs[i];\n        if index == 30 {\n            fields[field_index] = field_from_bytes(current_field, false);\n            current_field = [0; 31];\n            field_index += 1;\n        }\n    }\n    if field_index != fields.len() {\n        fields[field_index] = field_from_bytes(current_field, false);\n    }\n    poseidon2_hash(fields)\n}\n\n#[test]\nfn poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let sub_chunk_hash = poseidon2_hash_subarray(input, in_len);\n    let fixed_len_hash = poseidon::poseidon2::Poseidon2::hash(fixed_input, fixed_input.len());\n    assert(sub_chunk_hash == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_matches_variable() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    let variable_chunk_hash = poseidon2_cheaper_variable_hash(input, in_len);\n    let variable_len_hash = poseidon::poseidon2::Poseidon2::hash(input, in_len);\n    assert(variable_chunk_hash == variable_len_hash);\n}\n\n#[test]\nfn existing_sponge_poseidon_chunks_matches_fixed() {\n    let in_len = 501;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut fixed_input = [3; 501];\n    assert(in_len == fixed_input.len()); // sanity check\n    for i in 0..in_len {\n        input[i] = 3;\n    }\n    // absorb 250 of the 501 things\n    let empty_sponge = Poseidon2Sponge::new((in_len as Field) * TWO_POW_64);\n    let first_sponge = poseidon2_absorb_chunks_existing_sponge(empty_sponge, input, 250, true);\n    // now absorb the final 251 (since they are all 3s, im being lazy and not making a new array)\n    let mut final_sponge = poseidon2_absorb_chunks_existing_sponge(first_sponge, input, 251, true);\n    let fixed_len_hash = Poseidon2Sponge::hash(fixed_input, fixed_input.len());\n    assert(final_sponge.squeeze() == fixed_len_hash);\n}\n\n#[test]\nfn poseidon_chunks_empty_inputs() {\n    let in_len = 0;\n    let mut input: [Field; 4096] = [0; 4096];\n    let mut constructed_empty_sponge = poseidon2_absorb_chunks(input, in_len, true);\n    let mut first_sponge =\n        poseidon2_absorb_chunks_existing_sponge(constructed_empty_sponge, input, in_len, true);\n    assert(first_sponge.squeeze() == constructed_empty_sponge.squeeze());\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24,\n        25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,\n        48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,\n        71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93,\n        94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112,\n        113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130,\n        131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148,\n        149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159,\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256::digest(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result =\n        compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0x3b18c58c739716e76429634a61375c45b3b5cd470c22ab6d3e14cee23dd992);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(\n        AztecAddress::from_field(1),\n        EthAddress::from_field(3),\n        5,\n        2,\n        4,\n    );\n    assert(hash_result == 0xaab2a5828156782b12a1dc6f336e2bc627eb1b9514b02d511f66296990c050);\n}\n\n#[test]\nfn silo_l2_to_l1_message_matches_typescript() {\n    let version = 4;\n    let chainId = 5;\n\n    let hash = silo_l2_to_l1_message(\n        L2ToL1Message { recipient: EthAddress::from_field(1), content: 2 }.scope(\n            AztecAddress::from_field(3),\n        ),\n        version,\n        chainId,\n    );\n\n    // The following value was generated by `yarn-project/stdlib/src/hash/hash.test.ts`\n    let hash_from_typescript = 0x0081edf209e087ad31b3fd24263698723d57190bd1d6e9fe056fc0c0a68ee661;\n\n    assert_eq(hash, hash_from_typescript);\n}\n\n#[test]\nunconstrained fn poseidon2_hash_with_separator_bounded_vec_matches_non_bounded_vec_version() {\n    let inputs = BoundedVec::<Field, 4>::from_array([1, 2, 3]);\n    let separator = 42;\n\n    // Hash using bounded vec version\n    let bounded_result = poseidon2_hash_with_separator_bounded_vec(inputs, separator);\n\n    // Hash using regular version\n    let regular_result = poseidon2_hash_with_separator([1, 2, 3], separator);\n\n    // Results should match\n    assert_eq(bounded_result, regular_result);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr"},"304":{"source":"use crate::traits::{Deserialize, Serialize, ToField};\nuse super::{address::aztec_address::AztecAddress, hash::poseidon2_hash};\nuse std::meta::derive;\n\npub global INDEXED_TAGGING_SECRET_LENGTH: u32 = 2;\n\n#[derive(Serialize, Deserialize)]\npub struct IndexedTaggingSecret {\n    app_tagging_secret: Field,\n    index: u32,\n}\n\nimpl IndexedTaggingSecret {\n    pub fn compute_tag(self, recipient: AztecAddress) -> Field {\n        poseidon2_hash(\n            [self.app_tagging_secret, recipient.to_field(), self.index as Field],\n        )\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/indexed_tagging_secret.nr"},"317":{"source":"use super::traits::{Deserialize, Packable, Serialize};\n\n/// Returns the typed expression of a trait method implementation.\n///\n/// This helper function is preferred over directly inlining with `$typ::target_method()` in a quote,\n/// as direct inlining would result in missing import warnings in the generated code (specifically,\n/// warnings that the trait implementation is not in scope).\n///\n/// # Note\n/// A copy of this function exists in `aztec-nr/aztec/src/macros/utils.nr`. We maintain separate copies\n/// because importing it there from here would cause the `target_trait` to be interpreted in the context\n/// of this crate, making it impossible to compile code for traits from that crate (e.g. NoteType).\ncomptime fn get_trait_impl_method(\n    typ: Type,\n    target_trait: Quoted,\n    target_method: Quoted,\n) -> TypedExpr {\n    let trait_constraint = target_trait.as_trait_constraint();\n    typ\n        .get_trait_impl(trait_constraint)\n        .expect(f\"Could not find impl for {target_trait} for type {typ}\")\n        .methods()\n        .filter(|m| m.name() == target_method)[0]\n        .as_typed_expr()\n}\n\n/// Generates code that deserializes a struct, primitive type, array or string from a field array.\n///\n/// # Parameters\n/// - `name`: The name of the current field being processed, used to identify fields for replacement.\n/// - `typ`: The type of the struct or field being deserialized (e.g., a custom struct, array, or primitive).\n/// - `field_array_name`: The name of the field array containing serialized field data (e.g., `\"values\"`).\n/// - `num_already_consumed`: The number of fields already processed in previous recursion calls.\n/// - `should_unpack`: A boolean indicating whether the type should be unpacked (see description of `Packable`\n/// and `Serialize` trait for more information about the difference between packing and serialization).\n///\n/// # Returns\n/// A tuple containing:\n/// - `Quoted`: A code that deserializes a given struct, primitive type, array, or string from the field array.\n/// - `u32`: The total number of fields consumed during deserialization (used for recursion).\n///\n/// # Nested Struct Example\n/// Given the following setup:\n/// ```\n/// struct UintNote {\n///     value: u128,\n///     owner: AztecAddress,\n///     randomness: Field,\n/// }\n///\n/// struct AztecAddress {\n///     inner: Field,\n/// }\n/// ```\n///\n/// If `UintNote` is the input type, the function will generate the following deserialization code:\n/// ```\n/// UintNote {\n///     value: fields[0] as u128,\n///     owner: AztecAddress {\n///         inner: fields[1],\n///     },\n///     randomness: fields[2],\n/// }\n/// ```\n/// # Nested Struct Example with Unpacking\n/// - given the same setup as above and given that u128, AztecAddress and Field implement the `Packable` trait\n///   the result we get is:\n/// ```\n/// UintNote {\n///     value: aztec::protocol_types::traits::Packable::unpack([fields[0]]),\n///     owner: aztec::protocol_types::traits::Packable::unpack([fields[1]]),\n///     randomness: aztec::protocol_types::traits::Packable::unpack([fields[2]]),\n/// }\n/// ```\n///\n/// # Panics\n/// - If the deserialization logic encounters a type it does not support.\n/// - If an incorrect number of fields are consumed when deserializing a string.\npub comptime fn generate_deserialize_from_fields(\n    name: Quoted,\n    typ: Type,\n    field_array_name: Quoted,\n    num_already_consumed: u32,\n    should_unpack: bool,\n) -> (Quoted, u32) {\n    let mut result = quote {};\n    // Counter for the number of fields consumed\n    let mut consumed_counter: u32 = 0;\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint = quote { Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_unpack & typ.implements(packable_constraint)) {\n        // Unpacking is enabled and the given type implements the `Packable` trait so we call the `unpack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We copy the packed fields into a new array and pass that to the unpack function in a quote\n        let mut packed_fields_quotes = &[];\n        for i in 0..packed_len {\n            let index_in_field_array = i + num_already_consumed;\n            packed_fields_quotes =\n                packed_fields_quotes.push_back(quote { $field_array_name[$index_in_field_array] });\n        }\n        let packed_fields = packed_fields_quotes.join(quote {,});\n\n        // Now we call unpack on the type\n        let unpack_method = get_trait_impl_method(typ, quote { Packable<_> }, quote { unpack });\n        result = quote { $unpack_method([ $packed_fields ]) };\n\n        consumed_counter = packed_len;\n    } else if typ.is_bool() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] != 0 };\n        consumed_counter = 1;\n    } else if typ.is_field() | typ.as_integer().is_some() {\n        // The field is a primitive so we just reference it in the field array\n        result = quote { $field_array_name[$num_already_consumed] as $typ };\n        consumed_counter = 1;\n    } else if typ.as_data_type().is_some() {\n        // The field is a struct so we iterate over each struct field and recursively call\n        // `generate_deserialize_from_fields`\n        let (nested_def, generics) = typ.as_data_type().unwrap();\n        let nested_name = nested_def.name();\n        let mut deserialized_fields_list = &[];\n\n        // Iterate over each field in the struct\n        for field in nested_def.fields(generics) {\n            let (field_name, field_type, _) = field;\n            // Recursively call `generate_deserialize_from_fields` for each field in the struct\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                field_name,\n                field_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `value: u128 { lo: fields[0], hi: fields[1] }`\n            deserialized_fields_list =\n                deserialized_fields_list.push_back(quote { $field_name: $deserialized_field });\n        }\n\n        // We can construct the struct from the deserialized fields\n        let deserialized_fields = deserialized_fields_list.join(quote {,});\n        result = quote {\n                $nested_name {\n                    $deserialized_fields\n                }\n            };\n    } else if typ.as_array().is_some() {\n        // The field is an array so we iterate over each element and recursively call\n        // `generate_deserialize_from_fields`\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        let mut array_fields_list = &[];\n\n        // Iterate over each element in the array\n        for _ in 0..array_len {\n            // Recursively call `generate_deserialize_from_fields` for each element in the array\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                element_type,\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n            // We increment the consumed counter by the number of fields consumed in the recursion\n            consumed_counter += num_consumed_in_recursion;\n            // We add the deserialized field to the list of deserialized fields.\n            array_fields_list = array_fields_list.push_back(deserialized_field);\n        }\n\n        // We can construct the array from the deserialized fields\n        let array_fields = array_fields_list.join(quote {,});\n        result = quote { [ $array_fields ] };\n    } else if typ.as_str().is_some() {\n        // The field is a string and we expect each byte of the string to be represented as 1 field in the field\n        // array. So we iterate over the string length and deserialize each character as u8 in the recursive call\n        // to `generate_deserialize_from_fields`.\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let mut byte_list = &[];\n\n        // Iterate over each character in the string\n        for _ in 0..str_len {\n            // Recursively call `generate_deserialize_from_fields` for each character in the string\n            let (deserialized_field, num_consumed_in_recursion) = generate_deserialize_from_fields(\n                name,\n                quote {u8}.as_type(),\n                field_array_name,\n                consumed_counter + num_already_consumed,\n                should_unpack,\n            );\n\n            // We should consume just one field in the recursion so we sanity check that\n            assert_eq(\n                num_consumed_in_recursion,\n                1,\n                \"Incorrect number of fields consumed in string deserialization\",\n            );\n\n            // We increment the consumed counter by 1 as we have consumed one field\n            consumed_counter += 1;\n\n            // We add the deserialized field to the list of deserialized fields.\n            // E.g. `fields[6] as u8`\n            byte_list = byte_list.push_back(deserialized_field);\n        }\n\n        // We construct the string from the deserialized fields\n        let bytes = byte_list.join(quote {,});\n        result = quote { [ $bytes ].as_str_unchecked() };\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (result, consumed_counter)\n}\n\n/// Generates code that serializes a type into an array of fields. Also generates auxiliary variables if necessary\n/// for serialization. If `should_pack` is true, we check if the type implements the `Packable` trait and pack it\n/// if it does.\n///\n/// # Parameters\n/// - `name`: The base identifier (e.g., `self`, `some_var`).\n/// - `typ`: The type being serialized (e.g., a custom struct, array, or primitive type).\n/// - `should_pack`: A boolean indicating whether the type should be packed.\n///\n/// # Returns\n/// A tuple containing:\n/// - A flattened array of `Quoted` field references representing the serialized fields.\n/// - An array of `Quoted` auxiliary variables needed for serialization, such as byte arrays for strings.\n///\n/// # Examples\n///\n/// ## Struct\n/// Given the following struct:\n/// ```rust\n/// struct MockStruct {\n///     a: Field,\n///     b: Field,\n/// }\n/// ```\n///\n/// Serializing the struct:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_mock_struct }, MockStruct, false)\n/// // Returns:\n/// // ([`my_mock_struct.a`, `my_mock_struct.b`], [])\n/// ```\n///\n/// ## Nested Struct\n/// For a more complex struct:\n/// ```rust\n/// struct NestedStruct {\n///     m1: MockStruct,\n///     m2: MockStruct,\n/// }\n/// ```\n///\n/// Serialization output:\n/// ```rust\n/// generate_serialize_to_fields(quote { self }, NestedStruct, false)\n/// // Returns:\n/// // ([`self.m1.a`, `self.m1.b`, `self.m2.a`, `self.m2.b`], [])\n/// ```\n///\n/// ## Array\n/// For an array type:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_array }, [Field; 3], false)\n/// // Returns:\n/// // ([`my_array[0]`, `my_array[1]`, `my_array[2]`], [])\n/// ```\n///\n/// ## String\n/// For a string field, where each character is serialized as a `Field`:\n/// ```rust\n/// generate_serialize_to_fields(quote { my_string }, StringType, false)\n/// // Returns:\n/// // ([`my_string_as_bytes[0] as Field`, `my_string_as_bytes[1] as Field`, ...],\n/// // [`let my_string_as_bytes = my_string.as_bytes()`])\n/// ```\n///\n/// ## Nested Struct with packing enabled\n/// - u128 has a `Packable` implementation hence it will be packed.\n///\n/// For a more complex struct:\n/// ```rust\n/// struct MyStruct {\n///     value: u128,\n///     value2: Field,\n/// }\n/// ```\n///\n/// # Panics\n/// - If the type is unsupported for serialization.\n/// - If the provided `typ` contains invalid constants or incompatible structures.\npub comptime fn generate_serialize_to_fields(\n    name: Quoted,\n    typ: Type,\n    should_pack: bool,\n) -> ([Quoted], [Quoted]) {\n    let mut fields = &[];\n    let mut aux_vars = &[];\n\n    // If the type implements `Packable`, its length will be assigned to the `maybe_packed_len_typ` variable.\n    let maybe_packed_len_typ = std::meta::typ::fresh_type_variable();\n    let packable_constraint =\n        quote { crate::traits::Packable<$maybe_packed_len_typ> }.as_trait_constraint();\n\n    if (should_pack & typ.implements(packable_constraint)) {\n        // Packing is enabled and the given type implements the `Packable` trait so we call the `pack()`\n        // method, add the resulting field array to `aux_vars` and each field to `fields`.\n        let packed_len = maybe_packed_len_typ.as_constant().unwrap();\n\n        // We collapse the name to a one that gets tokenized as a single token (e.g. \"self.value\" -> \"self_value\").\n        let name_at_one_token = collapse_to_one_token(name);\n        let packed_struct_name = f\"{name_at_one_token}_aux_var\".quoted_contents();\n\n        // We add the individual fields to the fields array\n        let pack_method = get_trait_impl_method(\n            typ,\n            quote { crate::traits::Packable<$packed_len> },\n            quote { pack },\n        );\n        let packed_struct = quote { let $packed_struct_name = $pack_method($name) };\n        for i in 0..packed_len {\n            fields = fields.push_back(quote { $packed_struct_name[$i] });\n        }\n\n        // We add the new auxiliary variable to the aux_vars array\n        aux_vars = aux_vars.push_back(packed_struct);\n    } else if typ.is_field() {\n        // For field we just add the value to fields\n        fields = fields.push_back(name);\n    } else if typ.as_integer().is_some() | typ.is_bool() {\n        // For integer and bool we just cast to Field and add the value to fields\n        fields = fields.push_back(quote { $name as Field });\n    } else if typ.as_data_type().is_some() {\n        // For struct we pref\n        let nested_struct = typ.as_data_type().unwrap();\n        let params = nested_struct.0.fields(nested_struct.1);\n        let struct_flattened = params.map(|(param_name, param_type, _)| {\n            let maybe_prefixed_name = if name == quote {} {\n                // Triggered when the param name is of a value available in the current scope (e.g. a function\n                // argument) --> then we don't prefix the name with anything.\n                param_name\n            } else {\n                // Triggered when we want to prefix the param name with the `name` from function input. This\n                // can typically be `self` when implementing a method on a struct.\n                quote { $name.$param_name }\n            };\n            generate_serialize_to_fields(quote {$maybe_prefixed_name}, param_type, should_pack)\n        });\n        let struct_flattened_fields = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (fields, _): (_, [Quoted])| acc.append(fields),\n        );\n        let struct_flattened_aux_vars = struct_flattened.fold(\n            &[],\n            |acc: [Quoted], (_, aux_vars): ([Quoted], _)| acc.append(aux_vars),\n        );\n        fields = fields.append(struct_flattened_fields);\n        aux_vars = aux_vars.append(struct_flattened_aux_vars);\n    } else if typ.as_array().is_some() {\n        // For array we recursively call `generate_serialize_to_fields(...)` for each element\n        let (element_type, array_len) = typ.as_array().unwrap();\n        let array_len = array_len.as_constant().unwrap();\n        for i in 0..array_len {\n            let (element_fields, element_aux_vars) =\n                generate_serialize_to_fields(quote { $name[$i] }, element_type, should_pack);\n            fields = fields.append(element_fields);\n            aux_vars = aux_vars.append(element_aux_vars);\n        }\n    } else if typ.as_str().is_some() {\n        // For string we convert the value to bytes, we store the `as_bytes` in an auxiliary variables and\n        // then we add each byte to fields as a Field\n        let length_type = typ.as_str().unwrap();\n        let str_len = length_type.as_constant().unwrap();\n        let as_member = name.as_expr().unwrap().as_member_access();\n        let var_name = if as_member.is_some() {\n            as_member.unwrap().1\n        } else {\n            name\n        };\n        let as_bytes_name = f\"{var_name}_as_bytes\".quoted_contents();\n        let as_bytes = quote { let $as_bytes_name = $name.as_bytes() };\n        for i in 0..str_len {\n            fields = fields.push_back(quote { $as_bytes_name[$i] as Field });\n        }\n        aux_vars = aux_vars.push_back(as_bytes);\n    } else {\n        panic(\n            f\"Unsupported type for serialization of argument {name} and type {typ}\",\n        )\n    }\n\n    (fields, aux_vars)\n}\n\n/// From a quote that gets tokenized to a multiple tokens we collapse it to a single token by replacing all `.` with `_`.\n/// E.g. \"self.values[0]\" -> \"self_values_0_\"\ncomptime fn collapse_to_one_token(q: Quoted) -> Quoted {\n    let tokens = q.tokens();\n\n    let mut single_token = quote {};\n    for token in tokens {\n        let new_token = if ((token == quote {.}) | (token == quote {[}) | (token == quote {]})) {\n            quote {_}\n        } else {\n            token\n        };\n        single_token = f\"{single_token}{new_token}\".quoted_contents();\n    }\n    single_token\n}\n\npub comptime fn derive_serialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, false);\n    let aux_vars_for_serialization = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let field_serializations = fields.join(quote {,});\n    let serialized_len = fields.len();\n    let serialize_trait: TraitConstraint =\n        quote { Serialize<$serialized_len> }.as_trait_constraint();\n    quote {\n        impl $serialize_trait for $typ {\n            #[inline_always]\n            fn serialize(self) -> [Field; $serialized_len] {\n                $aux_vars_for_serialization\n                [ $field_serializations ]\n            }\n        }\n    }\n}\n\npub(crate) comptime fn derive_deserialize(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let (fields, _) = generate_serialize_to_fields(quote { self }, typ, false);\n    let serialized_len = fields.len();\n    let (deserialized, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { serialized }, 0, false);\n    quote {\n        impl Deserialize<$serialized_len> for $typ {\n            #[inline_always]\n            fn deserialize(serialized: [Field; $serialized_len]) -> Self {\n                $deserialized\n            }\n        }\n    }\n}\n\n/// Generates `Packable` implementation for a given struct and returns the packed length.\n///\n/// Note: We are having this function separate from `derive_packable` because we use this in the note macros to get\n/// the packed length of a note as well as the `Packable` implementation. We need the length to be able to register\n/// the note in the global `NOTES` map. There the length is used to generate partial note helper functions.\npub comptime fn derive_packable_and_get_packed_len(s: TypeDefinition) -> (Quoted, u32) {\n    let packing_enabled = true;\n\n    let typ = s.as_type();\n    let (fields, aux_vars) = generate_serialize_to_fields(quote { self }, typ, packing_enabled);\n    let aux_vars_for_packing = if aux_vars.len() > 0 {\n        let joint = aux_vars.join(quote {;});\n        quote { $joint; }\n    } else {\n        quote {}\n    };\n\n    let (unpacked, _) =\n        generate_deserialize_from_fields(quote { self }, typ, quote { packed }, 0, packing_enabled);\n\n    let field_packings = fields.join(quote {,});\n    let packed_len = fields.len();\n    let packable_trait: TraitConstraint = quote { Packable<$packed_len> }.as_trait_constraint();\n    (\n        quote {\n        impl $packable_trait for $typ {\n            fn pack(self) -> [Field; $packed_len] {\n                $aux_vars_for_packing\n                [ $field_packings ]\n            }\n\n            fn unpack(packed: [Field; $packed_len]) -> Self {\n                $unpacked\n            }\n        }\n    },\n        packed_len,\n    )\n}\n\npub(crate) comptime fn derive_packable(s: TypeDefinition) -> Quoted {\n    let (packable_impl, _) = derive_packable_and_get_packed_len(s);\n    packable_impl\n}\n\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct Smol {\n    a: Field,\n    b: Field,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct HasArray {\n    a: [Field; 2],\n    b: bool,\n}\n\n#[derive(Serialize, Deserialize, Eq)]\npub struct Fancier {\n    a: Smol,\n    b: [Field; 2],\n    c: [u8; 3],\n    d: str<16>,\n}\n\nfn main() {\n    assert(false);\n}\n\n#[test]\nfn smol_test() {\n    let smol = Smol { a: 1, b: 2 };\n    let serialized = smol.serialize();\n    assert(serialized == [1, 2], serialized);\n    let deserialized = Smol::deserialize(serialized);\n    assert(deserialized == smol);\n\n    // None of the struct members implements the `Packable` trait so the packed and serialized data should be the same\n    let packed = smol.pack();\n    assert_eq(packed, serialized, \"Packed does not match serialized\");\n}\n\n#[test]\nfn has_array_test() {\n    let has_array = HasArray { a: [1, 2], b: true };\n    let serialized = has_array.serialize();\n    assert(serialized == [1, 2, 1], serialized);\n    let deserialized = HasArray::deserialize(serialized);\n    assert(deserialized == has_array);\n}\n\n#[test]\nfn fancier_test() {\n    let fancier =\n        Fancier { a: Smol { a: 1, b: 2 }, b: [0, 1], c: [1, 2, 3], d: \"metaprogramming!\" };\n    let serialized = fancier.serialize();\n    assert(\n        serialized\n            == [\n                1, 2, 0, 1, 1, 2, 3, 0x6d, 0x65, 0x74, 0x61, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61,\n                0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x21,\n            ],\n        serialized,\n    );\n    let deserialized = Fancier::deserialize(serialized);\n    assert(deserialized == fancier);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/meta/mod.nr"},"319":{"source":"pub use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{hash::poseidon2_hash, traits::{Deserialize, Empty, Hash, Packable, Serialize}};\n\npub global POINT_LENGTH: u32 = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point { x: 0, y: 0, is_infinite: false }\n    }\n}\n\nimpl Deserialize<POINT_LENGTH> for Point {\n    fn deserialize(serialized: [Field; POINT_LENGTH]) -> Point {\n        Point { x: serialized[0], y: serialized[1], is_infinite: serialized[2] != 0 }\n    }\n}\n// TODO(#11356): use compact representation here.\nimpl Packable<POINT_LENGTH> for Point {\n    fn pack(self) -> [Field; POINT_LENGTH] {\n        self.serialize()\n    }\n\n    fn unpack(packed: [Field; POINT_LENGTH]) -> Self {\n        Self::deserialize(packed)\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/point.nr"},"320":{"source":"use crate::constants::TWO_POW_64;\n\n// NB: This is a clone of noir/noir-repo/noir_stdlib/src/hash/poseidon2.nr\n// It exists as we sometimes need to perform custom absorption, but the stdlib version\n// has a private absorb() method (it's also designed to just be a hasher)\n// Can be removed when standalone noir poseidon lib exists: See noir#6679\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2Sponge {\n    pub cache: [Field; 3],\n    pub state: [Field; 4],\n    pub cache_size: u32,\n    pub squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2Sponge {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2Sponge::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2Sponge {\n        let mut result =\n            Poseidon2Sponge { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = std::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    pub fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    pub fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let iv: Field = (in_len as Field) * TWO_POW_64;\n        let mut sponge = Poseidon2Sponge::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/poseidon2.nr"},"330":{"source":"use crate::{\n    address::public_keys_hash::PublicKeysHash,\n    constants::{\n        DEFAULT_IVPK_M_X, DEFAULT_IVPK_M_Y, DEFAULT_NPK_M_X, DEFAULT_NPK_M_Y, DEFAULT_OVPK_M_X,\n        DEFAULT_OVPK_M_Y, DEFAULT_TPK_M_X, DEFAULT_TPK_M_Y, GENERATOR_INDEX__PUBLIC_KEYS_HASH,\n    },\n    hash::poseidon2_hash_with_separator,\n    point::POINT_LENGTH,\n    traits::{Deserialize, Hash, Serialize},\n};\n\nuse dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse std::default::Default;\n\npub global PUBLIC_KEYS_LENGTH: u32 = 12;\n\npub struct PublicKeys {\n    pub npk_m: NpkM,\n    pub ivpk_m: IvpkM,\n    pub ovpk_m: OvpkM,\n    pub tpk_m: TpkM,\n}\n\npub trait ToPoint {\n    fn to_point(self) -> Point;\n}\n\npub struct NpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for NpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for NpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\n// Note: If we store npk_m_hash directly we can remove this trait implementation. See #8091\nimpl Hash for NpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\npub struct IvpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for IvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for IvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct OvpkM {\n    pub inner: Point,\n}\n\nimpl Hash for OvpkM {\n    fn hash(self) -> Field {\n        self.inner.hash()\n    }\n}\n\nimpl ToPoint for OvpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for OvpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\npub struct TpkM {\n    pub inner: Point,\n}\n\nimpl ToPoint for TpkM {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\nimpl Serialize<POINT_LENGTH> for TpkM {\n    fn serialize(self) -> [Field; POINT_LENGTH] {\n        self.inner.serialize()\n    }\n}\n\nimpl Default for PublicKeys {\n    fn default() -> Self {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point { x: DEFAULT_NPK_M_X, y: DEFAULT_NPK_M_Y, is_infinite: false },\n            },\n            ivpk_m: IvpkM {\n                inner: Point { x: DEFAULT_IVPK_M_X, y: DEFAULT_IVPK_M_Y, is_infinite: false },\n            },\n            ovpk_m: OvpkM {\n                inner: Point { x: DEFAULT_OVPK_M_X, y: DEFAULT_OVPK_M_Y, is_infinite: false },\n            },\n            tpk_m: TpkM {\n                inner: Point { x: DEFAULT_TPK_M_X, y: DEFAULT_TPK_M_Y, is_infinite: false },\n            },\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        (self.npk_m.inner == other.npk_m.inner)\n            & (self.ivpk_m.inner == other.ivpk_m.inner)\n            & (self.ovpk_m.inner == other.ovpk_m.inner)\n            & (self.tpk_m.inner == other.tpk_m.inner)\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(poseidon2_hash_with_separator(\n            self.serialize(),\n            GENERATOR_INDEX__PUBLIC_KEYS_HASH as Field,\n        ))\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.inner.x,\n            self.npk_m.inner.y,\n            self.npk_m.inner.is_infinite as Field,\n            self.ivpk_m.inner.x,\n            self.ivpk_m.inner.y,\n            self.ivpk_m.inner.is_infinite as Field,\n            self.ovpk_m.inner.x,\n            self.ovpk_m.inner.y,\n            self.ovpk_m.inner.is_infinite as Field,\n            self.tpk_m.inner.x,\n            self.tpk_m.inner.y,\n            self.tpk_m.inner.is_infinite as Field,\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: NpkM {\n                inner: Point {\n                    x: serialized[0],\n                    y: serialized[1],\n                    is_infinite: serialized[2] != 0,\n                },\n            },\n            ivpk_m: IvpkM {\n                inner: Point {\n                    x: serialized[3],\n                    y: serialized[4],\n                    is_infinite: serialized[5] != 0,\n                },\n            },\n            ovpk_m: OvpkM {\n                inner: Point {\n                    x: serialized[6],\n                    y: serialized[7],\n                    is_infinite: serialized[8] != 0,\n                },\n            },\n            tpk_m: TpkM {\n                inner: Point {\n                    x: serialized[9],\n                    y: serialized[10],\n                    is_infinite: serialized[11] != 0,\n                },\n            },\n        }\n    }\n}\n\npub struct AddressPoint {\n    pub inner: Point,\n}\n\nimpl ToPoint for AddressPoint {\n    fn to_point(self) -> Point {\n        self.inner\n    }\n}\n\n#[test]\nunconstrained fn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash =\n        0x0fecd9a32db731fec1fded1b9ff957a1625c069245a3613a2538bd527068b0ad;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nunconstrained fn compute_default_hash() {\n    let keys = PublicKeys::default();\n\n    let actual = keys.hash();\n    let test_data_default_hash = 0x1d3bf1fb93ae0e9cda83b203dd91c3bfb492a9aecf30ec90e1057eced0f0e62d;\n\n    assert(actual.to_field() == test_data_default_hash);\n}\n\n#[test]\nunconstrained fn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: NpkM { inner: Point { x: 1, y: 2, is_infinite: false } },\n        ivpk_m: IvpkM { inner: Point { x: 3, y: 4, is_infinite: false } },\n        ovpk_m: OvpkM { inner: Point { x: 5, y: 6, is_infinite: false } },\n        tpk_m: TpkM { inner: Point { x: 7, y: 8, is_infinite: false } },\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.inner.x, deserialized.npk_m.inner.x);\n    assert_eq(keys.npk_m.inner.y, deserialized.npk_m.inner.y);\n    assert_eq(keys.ivpk_m.inner.x, deserialized.ivpk_m.inner.x);\n    assert_eq(keys.ivpk_m.inner.y, deserialized.ivpk_m.inner.y);\n    assert_eq(keys.ovpk_m.inner.x, deserialized.ovpk_m.inner.x);\n    assert_eq(keys.ovpk_m.inner.y, deserialized.ovpk_m.inner.y);\n    assert_eq(keys.tpk_m.inner.x, deserialized.tpk_m.inner.x);\n    assert_eq(keys.tpk_m.inner.y, deserialized.tpk_m.inner.y);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/public_keys.nr"},"341":{"source":"use crate::{hash::poseidon2_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field\nwhere\n    K: ToField,\n{\n    poseidon2_hash([storage_slot, key.to_field()])\n}\n\nmod test {\n    use crate::{address::AztecAddress, storage::map::derive_storage_slot_in_map, traits::FromField};\n\n    #[test]\n    fn test_derive_storage_slot_in_map_matches_typescript() {\n        let map_slot = 0x132258fb6962c4387ba659d9556521102d227549a386d39f0b22d1890d59c2b5;\n        let key = AztecAddress::from_field(\n            0x302dbc2f9b50a73283d5fb2f35bc01eae8935615817a0b4219a057b2ba8a5a3f,\n        );\n\n        let slot = derive_storage_slot_in_map(map_slot, key);\n\n        // The following value was generated by `map_slot.test.ts`\n        let slot_from_typescript =\n            0x15b9fe39449affd8b377461263e9d2b610b9ad40580553500b4e41d9cbd887ac;\n\n        assert_eq(slot, slot_from_typescript);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr"},"355":{"source":"use crate::meta::{derive_deserialize, derive_packable, derive_serialize};\nuse crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic\n// if a value can actually be zero. In a future refactor, we can\n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\npub trait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl Empty for u1 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u8 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u32 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u64 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\nimpl Empty for u128 {\n    #[inline_always]\n    fn empty() -> Self {\n        0\n    }\n}\n\nimpl<T, let N: u32> Empty for [T; N]\nwhere\n    T: Empty,\n{\n    #[inline_always]\n    fn empty() -> Self {\n        [T::empty(); N]\n    }\n}\n\nimpl<T> Empty for Option<T> {\n    #[inline_always]\n    fn empty() -> Self {\n        Option::none()\n    }\n}\n\npub fn is_empty<T>(item: T) -> bool\nwhere\n    T: Empty + Eq,\n{\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, let N: u32>(array: [T; N]) -> bool\nwhere\n    T: Empty + Eq,\n{\n    array.all(|elem| is_empty(elem))\n}\n\npub trait Hash {\n    fn hash(self) -> Field;\n}\n\npub trait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u1 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u8 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u32 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u64 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl ToField for u128 {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        self as Field\n    }\n}\nimpl<let N: u32> ToField for str<N> {\n    #[inline_always]\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\npub trait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value != 0\n    }\n}\nimpl FromField for u1 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u1\n    }\n}\nimpl FromField for u8 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u8\n    }\n}\nimpl FromField for u32 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u32\n    }\n}\nimpl FromField for u64 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u64\n    }\n}\nimpl FromField for u128 {\n    #[inline_always]\n    fn from_field(value: Field) -> Self {\n        value as u128\n    }\n}\n\n// docs:start:serialize\n/// Trait for serializing Noir types into arrays of Fields.\n///\n/// An implementation of the Serialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait (and Deserialize) are\n/// typically used to communicate between Noir and TypeScript (via oracles and function arguments).\n///\n/// # On Following Noir's Intrinsic Serialization\n/// When calling a Noir function from TypeScript (TS), first the function arguments are serialized into an array\n/// of fields. This array is then included in the initial witness. Noir's intrinsic serialization is then used\n/// to deserialize the arguments from the witness. When the same Noir function is called from Noir this Serialize trait\n/// is used instead of the serialization in TS. For this reason we need to have a match between TS serialization,\n/// Noir's intrinsic serialization and the implementation of this trait. If there is a mismatch, the function calls\n/// fail with an arguments hash mismatch error message.\n///\n/// # Type Parameters\n/// * `N` - The length of the output Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Serialize<N> for str<N> {\n///     fn serialize(self) -> [Field; N] {\n///         let bytes = self.as_bytes();\n///         let mut fields = [0; N];\n///         for i in 0..bytes.len() {\n///             fields[i] = bytes[i] as Field;  // Each byte gets its own Field\n///         }\n///         fields\n///     }\n/// }\n/// ```\n#[derive_via(derive_serialize)]\npub trait Serialize<let N: u32> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<let N: u32> Serialize<N> for str<N> {\n    #[inline_always]\n    fn serialize(self) -> [Field; N] {\n        let bytes = self.as_bytes();\n        let mut fields = [0; N];\n        for i in 0..bytes.len() {\n            fields[i] = bytes[i] as Field;\n        }\n        fields\n    }\n}\n\n// T = type of item in BoundedVec\n// M = max length of BoundedVec\n// O = field length of T\n// O * M + 1 = total serialized length of BoundedVec<T, M> (the +1 is for length of the BoundedVec)\nimpl<T, let M: u32, let O: u32> Deserialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Deserialize<O>,\n{\n    #[inline_always]\n    fn deserialize(fields: [Field; O * M + 1]) -> Self {\n        let mut new_bounded_vec: BoundedVec<T, M> = BoundedVec::new();\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        let len = fields[O * M] as u32;\n\n        for i in 0..len {\n            let mut nested_fields = [0; O];\n            for j in 0..O {\n                nested_fields[j] = fields[i * O + j];\n            }\n\n            let item = T::deserialize(nested_fields);\n            new_bounded_vec.push(item);\n        }\n\n        new_bounded_vec\n    }\n}\n\n// This may cause issues if used as program input, because noir disallows empty arrays for program input.\n// I think this is okay because I don't foresee a unit type being used as input. But leaving this comment as a hint\n// if someone does run into this in the future.\nimpl<let N: u32> Deserialize<0> for () {\n    fn deserialize(_fields: [Field; 0]) -> Self {\n        ()\n    }\n}\n\nimpl<T, let M: u32, let O: u32> Serialize<O * M + 1> for BoundedVec<T, M>\nwhere\n    T: Serialize<O>,\n{\n    #[inline_always]\n    fn serialize(self) -> [Field; O * M + 1] {\n        let mut fields = [0; O * M + 1];\n\n        let storage = self.storage();\n\n        for i in 0..M {\n            let serialized_item = storage[i].serialize();\n\n            for j in 0..O {\n                fields[i * O + j] = serialized_item[j];\n            }\n        }\n\n        // Length is stored in the last field as we need to match intrinsic Noir serialization and the `len` struct\n        // field is after `storage` struct field (see `bounded_vec.nr` in noir-stdlib)\n        fields[O * M] = self.len() as Field;\n\n        fields\n    }\n}\n\n// docs:start:deserialize\n/// Trait for deserializing Noir types from arrays of Fields.\n///\n/// An implementation of the Deserialize trait has to follow Noir's intrinsic serialization (each member of a struct\n/// converted directly into one or more Fields without any packing or compression). This trait is typically used when\n/// deserializing return values from function calls in Noir. Since the same function could be called from TypeScript\n/// (TS), in which case the TS deserialization would get used, we need to have a match between the 2.\n///\n/// # Type Parameters\n/// * `N` - The length of the input Field array, known at compile time\n///\n/// # Example\n/// ```\n/// impl<let N: u32> Deserialize<N> for str<N> {\n///     fn deserialize(fields: [Field; N]) -> Self {\n///         str<N>::from(fields.map(|value| value as u8))\n///     }\n/// }\n/// ```\n#[derive_via(derive_deserialize)]\npub trait Deserialize<let N: u32> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<let N: u32> Deserialize<N> for str<N> {\n    #[inline_always]\n    fn deserialize(fields: [Field; N]) -> Self {\n        str::<N>::from(fields.map(|value| value as u8))\n    }\n}\n\n/// Trait for efficiently packing and unpacking Noir types into and from arrays of Fields.\n///\n/// The `Packable` trait allows types to be serialized and deserialized with a focus on minimizing the size of\n/// the resulting Field array. This trait is used when storage efficiency is critical (e.g. when storing data\n/// in the contract's public storage).\n///\n/// # Type Parameters\n/// * `N` - The length of the Field array, known at compile time.\n#[derive_via(derive_packable)]\npub trait Packable<let N: u32> {\n    /// Packs the current value into a compact array of `Field` elements.\n    fn pack(self) -> [Field; N];\n\n    /// Unpacks a compact array of `Field` elements into the original value.\n    fn unpack(fields: [Field; N]) -> Self;\n}\n\n#[test]\nunconstrained fn bounded_vec_serialization() {\n    // Test empty BoundedVec\n    let empty_vec: BoundedVec<Field, 3> = BoundedVec::from_array([]);\n    let serialized = empty_vec.serialize();\n    let deserialized = BoundedVec::<Field, 3>::deserialize(serialized);\n    assert_eq(empty_vec, deserialized);\n    assert_eq(deserialized.len(), 0);\n\n    // Test partially filled BoundedVec\n    let partial_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2]]);\n    let serialized = partial_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(partial_vec, deserialized);\n    assert_eq(deserialized.len(), 1);\n    assert_eq(deserialized.get(0), [1, 2]);\n\n    // Test full BoundedVec\n    let full_vec: BoundedVec<[u32; 2], 3> = BoundedVec::from_array([[1, 2], [3, 4], [5, 6]]);\n    let serialized = full_vec.serialize();\n    let deserialized = BoundedVec::<[u32; 2], 3>::deserialize(serialized);\n    assert_eq(full_vec, deserialized);\n    assert_eq(deserialized.len(), 3);\n    assert_eq(deserialized.get(0), [1, 2]);\n    assert_eq(deserialized.get(1), [3, 4]);\n    assert_eq(deserialized.get(2), [5, 6]);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr"},"360":{"source":"use crate::traits::Packable;\n\nglobal BOOL_PACKED_LEN: u32 = 1;\nglobal U8_PACKED_LEN: u32 = 1;\nglobal U16_PACKED_LEN: u32 = 1;\nglobal U32_PACKED_LEN: u32 = 1;\nglobal U64_PACKED_LEN: u32 = 1;\nglobal U128_PACKED_LEN: u32 = 1;\nglobal FIELD_PACKED_LEN: u32 = 1;\nglobal I8_PACKED_LEN: u32 = 1;\nglobal I16_PACKED_LEN: u32 = 1;\nglobal I32_PACKED_LEN: u32 = 1;\nglobal I64_PACKED_LEN: u32 = 1;\n\nimpl Packable<BOOL_PACKED_LEN> for bool {\n    fn pack(self) -> [Field; BOOL_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; BOOL_PACKED_LEN]) -> bool {\n        (fields[0] as u1) != 0\n    }\n}\n\nimpl Packable<U8_PACKED_LEN> for u8 {\n    fn pack(self) -> [Field; U8_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U8_PACKED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Packable<U16_PACKED_LEN> for u16 {\n    fn pack(self) -> [Field; U16_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U16_PACKED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Packable<U32_PACKED_LEN> for u32 {\n    fn pack(self) -> [Field; U32_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U32_PACKED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Packable<U64_PACKED_LEN> for u64 {\n    fn pack(self) -> [Field; U64_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U64_PACKED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Packable<U128_PACKED_LEN> for u128 {\n    fn pack(self) -> [Field; U128_PACKED_LEN] {\n        [self as Field]\n    }\n\n    fn unpack(fields: [Field; U128_PACKED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Packable<FIELD_PACKED_LEN> for Field {\n    fn pack(self) -> [Field; FIELD_PACKED_LEN] {\n        [self]\n    }\n\n    fn unpack(fields: [Field; FIELD_PACKED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Packable<I8_PACKED_LEN> for i8 {\n    fn pack(self) -> [Field; I8_PACKED_LEN] {\n        [self as u8 as Field]\n    }\n\n    fn unpack(fields: [Field; I8_PACKED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Packable<I16_PACKED_LEN> for i16 {\n    fn pack(self) -> [Field; I16_PACKED_LEN] {\n        [self as u16 as Field]\n    }\n\n    fn unpack(fields: [Field; I16_PACKED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Packable<I32_PACKED_LEN> for i32 {\n    fn pack(self) -> [Field; I32_PACKED_LEN] {\n        [self as u32 as Field]\n    }\n\n    fn unpack(fields: [Field; I32_PACKED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Packable<I64_PACKED_LEN> for i64 {\n    fn pack(self) -> [Field; I64_PACKED_LEN] {\n        [self as u64 as Field]\n    }\n\n    fn unpack(fields: [Field; I64_PACKED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Packable<N * M> for [T; N]\nwhere\n    T: Packable<M>,\n{\n    fn pack(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].pack();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n\n    fn unpack(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Packable::unpack, result)\n    }\n}\n\n#[test]\nfn test_u16_packing() {\n    let a: u16 = 10;\n    assert_eq(a, u16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i8_packing() {\n    let a: i8 = -10;\n    assert_eq(a, i8::unpack(a.pack()));\n}\n\n#[test]\nfn test_i16_packing() {\n    let a: i16 = -10;\n    assert_eq(a, i16::unpack(a.pack()));\n}\n\n#[test]\nfn test_i32_packing() {\n    let a: i32 = -10;\n    assert_eq(a, i32::unpack(a.pack()));\n}\n\n#[test]\nfn test_i64_packing() {\n    let a: i64 = -10;\n    assert_eq(a, i64::unpack(a.pack()));\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/type_packing.nr"},"361":{"source":"use crate::traits::{Deserialize, Serialize};\n\nglobal BOOL_SERIALIZED_LEN: u32 = 1;\nglobal U8_SERIALIZED_LEN: u32 = 1;\nglobal U16_SERIALIZED_LEN: u32 = 1;\nglobal U32_SERIALIZED_LEN: u32 = 1;\nglobal U64_SERIALIZED_LEN: u32 = 1;\nglobal U128_SERIALIZED_LEN: u32 = 1;\nglobal FIELD_SERIALIZED_LEN: u32 = 1;\nglobal I8_SERIALIZED_LEN: u32 = 1;\nglobal I16_SERIALIZED_LEN: u32 = 1;\nglobal I32_SERIALIZED_LEN: u32 = 1;\nglobal I64_SERIALIZED_LEN: u32 = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] != 0\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U8_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U16_SERIALIZED_LEN> for u16 {\n    fn serialize(self) -> [Field; U16_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U16_SERIALIZED_LEN> for u16 {\n    fn deserialize(fields: [Field; U16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for u128 {\n    fn serialize(self) -> [Field; U128_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for u128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        fields[0] as u128\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; FIELD_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n\nimpl Serialize<I8_SERIALIZED_LEN> for i8 {\n    fn serialize(self) -> [Field; I8_SERIALIZED_LEN] {\n        [self as u8 as Field]\n    }\n}\n\nimpl Deserialize<I8_SERIALIZED_LEN> for i8 {\n    fn deserialize(fields: [Field; I8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8 as i8\n    }\n}\n\nimpl Serialize<I16_SERIALIZED_LEN> for i16 {\n    fn serialize(self) -> [Field; I16_SERIALIZED_LEN] {\n        [self as u16 as Field]\n    }\n}\n\nimpl Deserialize<I16_SERIALIZED_LEN> for i16 {\n    fn deserialize(fields: [Field; I16_SERIALIZED_LEN]) -> Self {\n        fields[0] as u16 as i16\n    }\n}\n\nimpl Serialize<I32_SERIALIZED_LEN> for i32 {\n    fn serialize(self) -> [Field; I32_SERIALIZED_LEN] {\n        [self as u32 as Field]\n    }\n}\n\nimpl Deserialize<I32_SERIALIZED_LEN> for i32 {\n    fn deserialize(fields: [Field; I32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32 as i32\n    }\n}\n\nimpl Serialize<I64_SERIALIZED_LEN> for i64 {\n    fn serialize(self) -> [Field; I64_SERIALIZED_LEN] {\n        [self as u64 as Field]\n    }\n}\n\nimpl Deserialize<I64_SERIALIZED_LEN> for i64 {\n    fn deserialize(fields: [Field; I64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64 as i64\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Serialize<N * M> for [T; N]\nwhere\n    T: Serialize<M>,\n{\n    fn serialize(self) -> [Field; N * M] {\n        let mut result: [Field; N * M] = std::mem::zeroed();\n        let mut serialized: [Field; M] = std::mem::zeroed();\n        for i in 0..N {\n            serialized = self[i].serialize();\n            for j in 0..M {\n                result[i * M + j] = serialized[j];\n            }\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32, let M: u32> Deserialize<N * M> for [T; N]\nwhere\n    T: Deserialize<M>,\n{\n    fn deserialize(fields: [Field; N * M]) -> Self {\n        let mut reader = crate::utils::reader::Reader::new(fields);\n        let mut result: [T; N] = std::mem::zeroed();\n        reader.read_struct_array::<T, M, N>(Deserialize::deserialize, result)\n    }\n}\n\nimpl<T, let N: u32> Serialize<N + 1> for Option<T>\nwhere\n    T: Serialize<N>,\n{\n    fn serialize(self) -> [Field; N + 1] {\n        let mut result: [Field; N + 1] = std::mem::zeroed();\n\n        result[0] = if self.is_some() { 1 } else { 0 };\n\n        let value_serialized = self.unwrap_unchecked().serialize();\n        for i in 0..N {\n            result[1 + i] = value_serialized[i];\n        }\n\n        result\n    }\n}\n\nimpl<T, let N: u32> Deserialize<N + 1> for Option<T>\nwhere\n    T: Deserialize<N>,\n{\n    fn deserialize(fields: [Field; N + 1]) -> Self {\n        if fields[0] == 1 {\n            let mut value_serialized: [Field; N] = std::mem::zeroed();\n            for i in 0..N {\n                value_serialized[i] = fields[1 + i];\n            }\n\n            Option::some(T::deserialize(value_serialized))\n        } else {\n            Option::none()\n        }\n    }\n}\n\nmod test {\n    use crate::traits::{Deserialize, Serialize};\n\n    #[test]\n    fn u16_serialization() {\n        let a: u16 = 10;\n        assert_eq(a, u16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i8_serialization() {\n        let a: i8 = -10;\n        assert_eq(a, i8::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i16_serialization() {\n        let a: i16 = -10;\n        assert_eq(a, i16::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i32_serialization() {\n        let a: i32 = -10;\n        assert_eq(a, i32::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn i64_serialization() {\n        let a: i64 = -10;\n        assert_eq(a, i64::deserialize(a.serialize()));\n    }\n\n    #[test]\n    fn option_field_serialization() {\n        let opt_some = Option::some(5);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n\n    #[test]\n    fn option_array_serialization() {\n        let opt_some = Option::some([2, 5]);\n        assert_eq(Option::<_>::deserialize(opt_some.serialize()), opt_some);\n\n        let opt_none = Option::none();\n        assert_eq(Option::<Field>::deserialize(opt_none.serialize()), opt_none);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr"},"379":{"source":"pub mod assert_array_appended;\npub mod assert_array_prepended;\npub mod assert_combined_array;\npub mod assert_combined_transformed_array;\npub mod assert_exposed_sorted_transformed_value_array;\npub mod assert_sorted_array;\npub mod assert_sorted_transformed_padded_array;\npub mod assert_sorted_transformed_value_array;\npub mod assert_split_sorted_transformed_value_arrays;\npub mod assert_split_transformed_padded_arrays;\npub mod assert_split_transformed_value_arrays;\npub mod get_sorted_result;\npub mod get_sorted_tuple;\npub mod sort_by;\npub mod sort_by_counter;\n\n// Re-exports.\npub use assert_array_appended::{\n    assert_array_appended, assert_array_appended_and_scoped, assert_array_appended_reversed,\n    assert_array_appended_scoped,\n};\npub use assert_array_prepended::assert_array_prepended;\npub use assert_combined_array::{assert_combined_array, combine_arrays};\npub use assert_combined_transformed_array::{\n    assert_combined_transformed_array, combine_and_transform_arrays,\n};\npub use assert_exposed_sorted_transformed_value_array::{\n    assert_exposed_sorted_transformed_value_array,\n    get_order_hints::{get_order_hints_asc, OrderHint},\n};\npub use assert_sorted_array::assert_sorted_array;\npub use assert_sorted_transformed_padded_array::{\n    assert_sorted_transformed_i_padded_array_capped_size,\n    assert_sorted_transformed_padded_array_capped_size, validate_padded_items,\n};\npub use assert_split_sorted_transformed_value_arrays::{\n    assert_split_sorted_transformed_value_arrays_asc,\n    get_split_order_hints::{get_split_order_hints_asc, SplitOrderHints},\n};\npub use assert_split_transformed_padded_arrays::assert_split_transformed_padded_arrays;\npub use get_sorted_result::{get_sorted_result, SortedResult};\npub use sort_by_counter::sort_by_counter_asc;\n\nuse crate::traits::{Empty, is_empty};\n\npub fn subarray<let SRC_LEN: u32, let DST_LEN: u32>(\n    src: [Field; SRC_LEN],\n    offset: u32,\n) -> [Field; DST_LEN] {\n    assert(offset + DST_LEN <= SRC_LEN, \"offset too large\");\n\n    let mut dst: [Field; DST_LEN] = std::mem::zeroed();\n    for i in 0..DST_LEN {\n        dst[i] = src[i + offset];\n    }\n\n    dst\n}\n\n// Helper function to convert a validated array to BoundedVec.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub unconstrained fn array_to_bounded_vec<T, let N: u32>(array: [T; N]) -> BoundedVec<T, N>\nwhere\n    T: Empty + Eq,\n{\n    let len = array_length(array);\n    BoundedVec::from_parts_unchecked(array, len)\n}\n\n// Helper function to find the index of the first element in an array that satisfies a given predicate. If the element\n// is not found, the function returns N as the index.\npub unconstrained fn find_index_hint<T, let N: u32, Env>(\n    array: [T; N],\n    find: fn[Env](T) -> bool,\n) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays where validate_array(array) returns true,\n// which ensures that:\n// 1. All elements before the first empty element are non-empty\n// 2. All elements after and including the first empty element are empty\n// 3. The array forms a contiguous sequence of non-empty elements followed by empty elements\npub fn array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // We get the length by checking the index of the first empty element.\n\n    // Safety: This is safe because we have validated the array (see function doc above) and the emptiness\n    // of the element and non-emptiness of the previous element is checked below.\n    let length = unsafe { find_index_hint(array, |elem: T| is_empty(elem)) };\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Returns the number of consecutive elements at the start of the array for which the predicate returns false.\n// This function ensures that any element after the first matching element (predicate returns true) also matches the predicate.\npub fn array_length_until<T, let N: u32, Env>(array: [T; N], predicate: fn[Env](T) -> bool) -> u32 {\n    let mut length = 0;\n    let mut stop = false;\n    for i in 0..N {\n        if predicate(array[i]) {\n            stop = true;\n        } else {\n            assert(\n                stop == false,\n                \"matching element found after already encountering a non-matching element\",\n            );\n            length += 1;\n        }\n    }\n    length\n}\n\npub fn array_concat<T, let N: u32, let M: u32>(array1: [T; N], array2: [T; M]) -> [T; N + M] {\n    let mut result = [array1[0]; N + M];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\n/// This function assumes that `array1` and `array2` contain no more than N non-empty elements between them,\n/// if this is not the case then elements from the end of `array2` will be dropped.\npub fn array_merge<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    // Safety: we constrain this array below\n    let result = unsafe { array_merge_helper(array1, array2) };\n    // We assume arrays have been validated. The only use cases so far are with previously validated arrays.\n    let array1_len = array_length(array1);\n    let mut add_from_left = true;\n    for i in 0..N {\n        add_from_left &= i != array1_len;\n        if add_from_left {\n            assert_eq(result[i], array1[i]);\n        } else {\n            assert_eq(result[i], array2[i - array1_len]);\n        }\n    }\n    result\n}\n\nunconstrained fn array_merge_helper<T, let N: u32>(array1: [T; N], array2: [T; N]) -> [T; N]\nwhere\n    T: Empty + Eq,\n{\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\n// Helper fn to create a subarray from a given array\npub fn array_splice<T, let N: u32, let M: u32>(array: [T; N], offset: u32) -> [T; M]\nwhere\n    T: Empty,\n{\n    assert(M + offset <= N, \"Subarray length larger than array length\");\n    let mut result: [T; M] = [T::empty(); M];\n    for i in 0..M {\n        result[i] = array[offset + i];\n    }\n    result\n}\n\npub fn check_permutation<T, let N: u32>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N],\n)\nwhere\n    T: Eq + Empty,\n{\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\n// Helper function to find the index of the last element in an array, allowing empty elements.\n// e.g. useful for removing trailing 0s from [1, 0, 2, 0, 0, 0] -> [1, 0, 2]\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn find_last_value_index<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let mut index = N;\n    for i in 0..N {\n        let j = N - i - 1;\n        // We check `index == N` to ensure that we only update the index if we haven't found a match yet.\n        if (index == N) & !is_empty(array[j]) {\n            index = j;\n        }\n    }\n    index\n}\n\n// Routine which returns the length of an array right padded by empty elements\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\n// See smoke_validate_array_trailing for examples.\n// Nothing to do with validated arrays. Correctness constrained by padded_array_length.\npub unconstrained fn unsafe_padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    let index = find_last_value_index(array);\n    if index == N {\n        0\n    } else {\n        index + 1\n    }\n}\n\n// Routine which validates that zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where * is any value (zeroes allowed).\npub fn padded_array_length<T, let N: u32>(array: [T; N]) -> u32\nwhere\n    T: Empty + Eq,\n{\n    // Safety: this value is constrained in the below loop.\n    let length = unsafe { unsafe_padded_array_length(array) };\n    // Check the elt just before length is non-zero:\n    if length != 0 {\n        assert(!is_empty(array[length - 1]), \"invalid right padded array\");\n    }\n    // Check all beyond length are zero:\n    let mut check_zero = false;\n    for i in 0..N {\n        check_zero |= i == length;\n        if check_zero {\n            assert(is_empty(array[i]), \"invalid right padded array\");\n        }\n    }\n    length\n}\n\n// Helper function to check if an array is padded with a given value from a given index.\n// Different to padded_array_length in that it allows the elements before the given index to be the same as the padded value.\npub fn array_padded_with<T, let N: u32>(array: [T; N], from_index: u32, padded_with: T) -> bool\nwhere\n    T: Eq,\n{\n    let mut is_valid = true;\n    let mut should_check = false;\n    for i in 0..N {\n        should_check |= i == from_index;\n        is_valid &= !should_check | (array[i] == padded_with);\n    }\n    is_valid\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test]\nfn smoke_validate_array_trailing() {\n    let valid_array: [Field; 0] = [];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(padded_array_length(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(padded_array_length(valid_array) == 1);\n\n    let valid_array = [1, 0, 3];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 0, 3, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n\n    let valid_array = [0, 0, 3, 0, 0];\n    assert(padded_array_length(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn test_array_length_until() {\n    let array = [11, 22, 33, 44, 55];\n    assert_eq(array_length_until(array, |x| x == 55), 4);\n    assert_eq(array_length_until(array, |x| x == 56), 5);\n    assert_eq(array_length_until(array, |x| x > 40), 3);\n    assert_eq(array_length_until(array, |x| x > 10), 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_non_consecutive_fails() {\n    let array = [1, 1, 0, 1, 0];\n    let _ = array_length_until(array, |x| x == 0);\n}\n\n#[test(should_fail_with = \"matching element found after already encountering a non-matching element\")]\nfn test_array_length_until_first_non_matching_fails() {\n    let array = [1, 0, 0, 0, 0];\n    let _ = array_length_until(array, |x| x == 1);\n}\n\n#[test]\nunconstrained fn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nunconstrained fn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index_hint(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concatenated = array_concat(array0, array1);\n    assert_eq(concatenated, [1, 2, 3, 4, 5]);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test]\nfn test_array_padded_with() {\n    let array = [11, 22, 33, 44, 44];\n    assert_eq(array_padded_with(array, 0, 44), false);\n    assert_eq(array_padded_with(array, 1, 44), false);\n    assert_eq(array_padded_with(array, 2, 44), false);\n    assert_eq(array_padded_with(array, 3, 44), true);\n    assert_eq(array_padded_with(array, 4, 44), true);\n    assert_eq(array_padded_with(array, 4, 33), false);\n    assert_eq(array_padded_with(array, 5, 44), true); // Index out of bounds.\n    assert_eq(array_padded_with(array, 0, 11), false);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr"},"380":{"source":"pub fn field_from_bytes<let N: u32>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO: This currently only exists to aid point compression in compress_to_blob_commitment().\n// Once compression is part of BigCurve it can either be removed or optimised to be used elsewhere.\npub fn byte_to_bits_be(byte: u8) -> [u1; 8] {\n    let mut mut_byte = byte;\n    let mut bits: [u1; 8] = [0; 8];\n    for i in 0..8 {\n        bits[7 - i] = (mut_byte & 1) as u1;\n        mut_byte >>= 1;\n    }\n    bits\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\npub fn min(f1: Field, f2: Field) -> Field {\n    if f1.lt(f2) {\n        f1\n    } else {\n        f2\n    }\n}\n\nglobal C1: u32 = 28;\nglobal C3: Field = 40770029410420498293352137776570907027550720424234931066070132305055;\nglobal C5: Field = 19103219067921713944291392827692070036145651957329286315305642004821462161904;\n\npub(crate) fn pow(x: Field, y: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 254] = y.to_le_bits();\n\n    for i in 0..254 {\n        r *= r;\n        r *= (b[254 - 1 - i] as Field) * x + (1 - b[254 - 1 - i] as Field);\n    }\n\n    r\n}\n\n// Tonelli-Shanks algorithm for computing the square root of a Field element.\n// Requires C1 = max{c: 2^c divides (p-1)}, where p is the order of Field\n// as well as C3 = (C2 - 1)/2, where C2 = (p-1)/(2^c1),\n// and C5 = ZETA^C2, where ZETA is a non-square element of Field.\n// These are pre-computed above as globals.\npub(crate) fn sqrt(x: Field) -> Field {\n    let mut z = pow(x, C3);\n    let mut t = z * z * x;\n    z *= x;\n    let mut b = t;\n    let mut c = C5;\n\n    for i in 0..(C1 - 1) {\n        for _j in 1..(C1 - i - 1) {\n            b *= b;\n        }\n\n        z *= if b == 1 { 1 } else { c };\n\n        c *= c;\n\n        t *= if b == 1 { 1 } else { c };\n\n        b = t;\n    }\n\n    z\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167,\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes: [u8; 31] = field.to_be_bytes();\n    assert_eq(inputs, return_bytes);\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28,\n        151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158,\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2: [u8; 31] = field.to_be_bytes();\n\n    assert_eq(return_bytes2, return_bytes);\n    assert_eq(field2, field);\n}\n\n#[test]\nunconstrained fn max_field_test() {\n    // Tests the hardcoded value in constants.nr vs underlying modulus\n    // NB: We can't use 0-1 in constants.nr as it will be transpiled incorrectly to ts and sol constants files\n    let max_value = crate::constants::MAX_FIELD_VALUE;\n    assert_eq(max_value, 0 - 1);\n    // modulus == 0 is tested elsewhere, so below is more of a sanity check\n    let max_bytes: [u8; 32] = max_value.to_be_bytes();\n    let mod_bytes = std::field::modulus_be_bytes();\n    for i in 0..31 {\n        assert_eq(max_bytes[i], mod_bytes[i]);\n    }\n    assert_eq(max_bytes[31], mod_bytes[31] - 1);\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr"},"382":{"source":"pub struct Reader<let N: u32> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<let N: u32> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() != 0\n    }\n\n    pub fn read_array<let K: u32>(&mut self) -> [Field; K] {\n        let mut result = [0; K];\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    pub fn read_struct<T, let K: u32>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array());\n        result\n    }\n\n    pub fn read_struct_array<T, let K: u32, let C: u32>(\n        &mut self,\n        deserialise: fn([Field; K]) -> T,\n        mut result: [T; C],\n    ) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr"},"392":{"source":"use std::hash::sha256_compression;\nuse std::runtime::is_unconstrained;\n\nuse constants::{\n    BLOCK_BYTE_PTR, BLOCK_SIZE, HASH, INITIAL_STATE, INT_BLOCK, INT_BLOCK_SIZE, INT_SIZE,\n    INT_SIZE_PTR, MSG_BLOCK, MSG_SIZE_PTR, STATE, TWO_POW_16, TWO_POW_24, TWO_POW_32, TWO_POW_8,\n};\n\nmod constants;\nmod tests;\n\n// Implementation of SHA-256 mapping a byte array of variable length to\n// 32 bytes.\n\n// Deprecated in favour of `sha256_var`\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> HASH\n// docs:end:sha256\n{\n    digest(input)\n}\n\n// SHA-256 hash function\n#[no_predicates]\npub fn digest<let N: u32>(msg: [u8; N]) -> HASH {\n    sha256_var(msg, N as u64)\n}\n\n// Variable size SHA-256 hash\npub fn sha256_var<let N: u32>(msg: [u8; N], message_size: u64) -> HASH {\n    let message_size = message_size as u32;\n    assert(message_size <= N);\n\n    if std::runtime::is_unconstrained() {\n        // Safety: SHA256 is running as an unconstrained function.\n        unsafe {\n            __sha256_var(msg, message_size)\n        }\n    } else {\n        let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n        // Intermediate hash, starting with the canonical initial value\n        let mut h: STATE = INITIAL_STATE;\n        // Pointer into msg_block on a 64 byte scale\n        let mut msg_byte_ptr = 0;\n        let num_blocks = N / BLOCK_SIZE;\n        for i in 0..num_blocks {\n            let msg_start = BLOCK_SIZE * i;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            // Verify the block we are compressing was appropriately constructed\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n            }\n\n            // If the block is filled, compress it.\n            // An un-filled block is handled after this loop.\n            if (msg_start < message_size) & (msg_byte_ptr == BLOCK_SIZE) {\n                h = sha256_compression(msg_block, h);\n            }\n        }\n\n        let modulo = N % BLOCK_SIZE;\n        // Handle setup of the final msg block.\n        // This case is only hit if the msg is less than the block size,\n        // or our message cannot be evenly split into blocks.\n        if modulo != 0 {\n            let msg_start = BLOCK_SIZE * num_blocks;\n            let (new_msg_block, new_msg_byte_ptr) =\n                unsafe { build_msg_block(msg, message_size, msg_start) };\n\n            if msg_start < message_size {\n                msg_block = new_msg_block;\n            }\n\n            let new_msg_byte_ptr = verify_msg_block(msg, message_size, msg_block, msg_start);\n            if msg_start < message_size {\n                msg_byte_ptr = new_msg_byte_ptr;\n                verify_msg_block_padding(msg_block, msg_byte_ptr);\n            }\n        }\n\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        if msg_byte_ptr == BLOCK_SIZE {\n            msg_byte_ptr = 0;\n        }\n\n        // Pad the rest such that we have a [u32; 2] block at the end representing the length\n        // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n        // Here we rely on the fact that everything beyond the available input is set to 0.\n        let index = msg_byte_ptr / INT_SIZE;\n        msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n        msg_byte_ptr = msg_byte_ptr + 1;\n        let last_block = msg_block;\n\n        // If we don't have room to write the size, compress the block and reset it.\n        if msg_byte_ptr > MSG_SIZE_PTR {\n            h = sha256_compression(msg_block, h);\n            // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n            msg_byte_ptr = 0;\n        }\n\n        msg_block = unsafe { attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size) };\n\n        verify_msg_len(msg_block, last_block, msg_byte_ptr, message_size);\n\n        hash_final_block(msg_block, h)\n    }\n}\n\n// Variable size SHA-256 hash\nunconstrained fn __sha256_var<let N: u32>(msg: [u8; N], message_size: u32) -> HASH {\n    let num_full_blocks = message_size / BLOCK_SIZE;\n    // Intermediate hash, starting with the canonical initial value\n    let mut h: STATE = INITIAL_STATE;\n    // Pointer into msg_block on a 64 byte scale\n    for i in 0..num_full_blocks {\n        let (msg_block, _) = build_msg_block(msg, message_size, BLOCK_SIZE * i);\n        h = sha256_compression(msg_block, h);\n    }\n\n    // Handle setup of the final msg block.\n    // This case is only hit if the msg is less than the block size,\n    // or our message cannot be evenly split into blocks.\n    let modulo = message_size % BLOCK_SIZE;\n    let (mut msg_block, mut msg_byte_ptr): (INT_BLOCK, u32) = if modulo != 0 {\n        let msg_start = BLOCK_SIZE * num_full_blocks;\n        let (new_msg_block, new_msg_byte_ptr) = build_msg_block(msg, message_size, msg_start);\n\n        (new_msg_block, new_msg_byte_ptr)\n    } else {\n        // If we had modulo == 0 then it means the last block was full,\n        // and we can reset the pointer to zero to overwrite it.\n        ([0; INT_BLOCK_SIZE], 0)\n    };\n\n    // Pad the rest such that we have a [u32; 2] block at the end representing the length\n    // of the message, and a block of 1 0 ... 0 following the message (i.e. [1 << 7, 0, ..., 0]).\n    // Here we rely on the fact that everything beyond the available input is set to 0.\n    let index = msg_byte_ptr / INT_SIZE;\n    msg_block[index] = set_item_byte_then_zeros(msg_block[index], msg_byte_ptr, 1 << 7);\n\n    // If we don't have room to write the size, compress the block and reset it.\n    let (h, mut msg_byte_ptr): (STATE, u32) = if msg_byte_ptr >= MSG_SIZE_PTR {\n        // `attach_len_to_msg_block` will zero out everything after the `msg_byte_ptr`.\n        (sha256_compression(msg_block, h), 0)\n    } else {\n        (h, msg_byte_ptr + 1)\n    };\n    msg_block = attach_len_to_msg_block(msg_block, msg_byte_ptr, message_size);\n\n    hash_final_block(msg_block, h)\n}\n\n// Take `BLOCK_SIZE` number of bytes from `msg` starting at `msg_start`.\n// Returns the block and the length that has been copied rather than padded with zeros.\nunconstrained fn build_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_start: u32,\n) -> (MSG_BLOCK, BLOCK_BYTE_PTR) {\n    let mut msg_block: MSG_BLOCK = [0; INT_BLOCK_SIZE];\n\n    // We insert `BLOCK_SIZE` bytes (or up to the end of the message)\n    let block_input = if message_size < msg_start {\n        // This function is sometimes called with `msg_start` past the end of the message.\n        // In this case we return an empty block and zero pointer to signal that the result should be ignored.\n        0\n    } else if message_size < msg_start + BLOCK_SIZE {\n        message_size - msg_start\n    } else {\n        BLOCK_SIZE\n    };\n\n    // Figure out the number of items in the int array that we have to pack.\n    // e.g. if the input is [0,1,2,3,4,5] then we need to pack it as 2 items: [0123, 4500]\n    let mut int_input = block_input / INT_SIZE;\n    if block_input % INT_SIZE != 0 {\n        int_input = int_input + 1;\n    };\n\n    for i in 0..int_input {\n        let mut msg_item: u32 = 0;\n        // Always construct the integer as 4 bytes, even if it means going beyond the input.\n        for j in 0..INT_SIZE {\n            let k = i * INT_SIZE + j;\n            let msg_byte = if k < block_input {\n                msg[msg_start + k]\n            } else {\n                0\n            };\n            msg_item = lshift8(msg_item, 1) + msg_byte as u32;\n        }\n        msg_block[i] = msg_item;\n    }\n\n    // Returning the index as if it was a 64 byte array.\n    // We have to project it down to 16 items and bit shifting to get a byte back if we need it.\n    (msg_block, block_input)\n}\n\n// Verify the block we are compressing was appropriately constructed by `build_msg_block`\n// and matches the input data. Returns the index of the first unset item.\n// If `message_size` is less than `msg_start` then this is called with the old non-empty block;\n// in that case we can skip verification, ie. no need to check that everything is zero.\nfn verify_msg_block<let N: u32>(\n    msg: [u8; N],\n    message_size: u32,\n    msg_block: MSG_BLOCK,\n    msg_start: u32,\n) -> BLOCK_BYTE_PTR {\n    let mut msg_byte_ptr = 0;\n    let mut msg_end = msg_start + BLOCK_SIZE;\n    if msg_end > N {\n        msg_end = N;\n    }\n    // We might have to go beyond the input to pad the fields.\n    if msg_end % INT_SIZE != 0 {\n        msg_end = msg_end + INT_SIZE - msg_end % INT_SIZE;\n    }\n\n    // Reconstructed packed item.\n    let mut msg_item: u32 = 0;\n\n    // Inclusive at the end so that we can compare the last item.\n    let mut i: u32 = 0;\n    for k in msg_start..=msg_end {\n        if k % INT_SIZE == 0 {\n            // If we consumed some input we can compare against the block.\n            if (msg_start < message_size) & (k > msg_start) {\n                assert_eq(msg_block[i], msg_item as u32);\n                i = i + 1;\n                msg_item = 0;\n            }\n        }\n        // Shift the accumulator\n        msg_item = lshift8(msg_item, 1);\n        // If we have input to consume, add it at the rightmost position.\n        if k < message_size & k < msg_end {\n            msg_item = msg_item + msg[k] as u32;\n            msg_byte_ptr = msg_byte_ptr + 1;\n        }\n    }\n\n    msg_byte_ptr\n}\n\n// Verify the block we are compressing was appropriately padded with zeros by `build_msg_block`.\n// This is only relevant for the last, potentially partially filled block.\nfn verify_msg_block_padding(msg_block: MSG_BLOCK, msg_byte_ptr: BLOCK_BYTE_PTR) {\n    // Check all the way to the end of the block.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_BLOCK_SIZE);\n}\n\n// Verify that a region of ints in the message block are (partially) zeroed,\n// up to an (exclusive) maximum which can either be the end of the block\n// or just where the size is to be written.\nfn verify_msg_block_zeros(\n    msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    max_int_byte_ptr: u32,\n) {\n    // This variable is used to get around the compiler under-constrained check giving a warning.\n    // We want to check against a constant zero, but if it does not come from the circuit inputs\n    // or return values the compiler check will issue a warning.\n    let zero = msg_block[0] - msg_block[0];\n\n    // First integer which is supposed to be (partially) zero.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        let zeros = INT_SIZE - modulo;\n        let mask = if zeros == 3 {\n            TWO_POW_24\n        } else if zeros == 2 {\n            TWO_POW_16\n        } else {\n            TWO_POW_8\n        };\n        assert_eq(msg_block[int_byte_ptr] % mask, zero);\n        int_byte_ptr = int_byte_ptr + 1;\n    }\n\n    // Check the rest of the items.\n    for i in 0..max_int_byte_ptr {\n        if i >= int_byte_ptr {\n            assert_eq(msg_block[i], zero);\n        }\n    }\n}\n\n// Verify that up to the byte pointer the two blocks are equal.\n// At the byte pointer the new block can be partially zeroed.\nfn verify_msg_block_equals_last(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n) {\n    // msg_byte_ptr is the position at which they are no longer have to be the same.\n    // First integer which is supposed to be (partially) zero contains that pointer.\n    let mut int_byte_ptr = msg_byte_ptr / INT_SIZE;\n\n    // Check partial zeros.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Reconstruct the partially zero item from the last block.\n        let last_field = last_block[int_byte_ptr];\n        let mut msg_item: u32 = 0;\n        // Reset to where they are still equal.\n        msg_byte_ptr = msg_byte_ptr - modulo;\n        for i in 0..INT_SIZE {\n            msg_item = lshift8(msg_item, 1);\n            if i < modulo {\n                msg_item = msg_item + get_item_byte(last_field, msg_byte_ptr) as u32;\n                msg_byte_ptr = msg_byte_ptr + 1;\n            }\n        }\n        assert_eq(msg_block[int_byte_ptr], msg_item);\n    }\n\n    for i in 0..INT_SIZE_PTR {\n        if i < int_byte_ptr {\n            assert_eq(msg_block[i], last_block[i]);\n        }\n    }\n}\n\n// Set the rightmost `zeros` number of bytes to 0.\n#[inline_always]\nfn set_item_zeros(item: u32, zeros: u8) -> u32 {\n    lshift8(rshift8(item, zeros), zeros)\n}\n\n// Replace one byte in the item with a value, and set everything after it to zero.\nfn set_item_byte_then_zeros(msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR, msg_byte: u8) -> u32 {\n    let zeros = INT_SIZE - msg_byte_ptr % INT_SIZE;\n    let zeroed_item = set_item_zeros(msg_item, zeros as u8);\n    let new_item = byte_into_item(msg_byte, msg_byte_ptr);\n    zeroed_item + new_item\n}\n\n// Get a byte of a message item according to its overall position in the `BLOCK_SIZE` space.\nfn get_item_byte(mut msg_item: u32, msg_byte_ptr: BLOCK_BYTE_PTR) -> u8 {\n    // How many times do we have to shift to the right to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    msg_item = rshift8(msg_item, shifts as u8);\n    // At this point the byte we want is in the rightmost position.\n    msg_item as u8\n}\n\n// Project a byte into a position in a field based on the overall block pointer.\n// For example putting 1 into pointer 5 would be 100, because overall we would\n// have [____, 0100] with indexes [0123,4567].\n#[inline_always]\nfn byte_into_item(msg_byte: u8, msg_byte_ptr: BLOCK_BYTE_PTR) -> u32 {\n    let mut msg_item = msg_byte as u32;\n    // How many times do we have to shift to the left to get to the position we want?\n    let max_shifts = INT_SIZE - 1;\n    let shifts = max_shifts - msg_byte_ptr % INT_SIZE;\n    lshift8(msg_item, shifts as u8)\n}\n\n// Construct a field out of 4 bytes.\n#[inline_always]\nfn make_item(b0: u8, b1: u8, b2: u8, b3: u8) -> u32 {\n    let mut item = b0 as u32;\n    item = lshift8(item, 1) + b1 as u32;\n    item = lshift8(item, 1) + b2 as u32;\n    item = lshift8(item, 1) + b3 as u32;\n    item\n}\n\n// Shift by 8 bits to the left between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise multiplies by 256.\n#[inline_always]\nfn lshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        // Brillig wouldn't shift 0<<4 without overflow.\n        if shifts >= 4 {\n            0\n        } else {\n            item << (8 * shifts)\n        }\n    } else {\n        // We can do a for loop up to INT_SIZE or an if-else.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item * TWO_POW_8\n        } else if shifts == 2 {\n            item * TWO_POW_16\n        } else if shifts == 3 {\n            item * TWO_POW_24\n        } else {\n            // Doesn't make sense, but it's most likely called on 0 anyway.\n            0\n        }\n    }\n}\n\n// Shift by 8 bits to the right between 0 and 4 times.\n// Checks `is_unconstrained()` to just use a bitshift if we're running in an unconstrained context,\n// otherwise divides by 256.\nfn rshift8(item: u32, shifts: u8) -> u32 {\n    if is_unconstrained() {\n        item >> (8 * shifts)\n    } else {\n        // Division wouldn't work on `Field`.\n        if shifts == 0 {\n            item\n        } else if shifts == 1 {\n            item / TWO_POW_8\n        } else if shifts == 2 {\n            item / TWO_POW_16\n        } else if shifts == 3 {\n            item / TWO_POW_24\n        } else {\n            0\n        }\n    }\n}\n\n// Zero out all bytes between the end of the message and where the length is appended,\n// then write the length into the last 8 bytes of the block.\nunconstrained fn attach_len_to_msg_block(\n    mut msg_block: MSG_BLOCK,\n    mut msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) -> MSG_BLOCK {\n    // We assume that `msg_byte_ptr` is less than 57 because if not then it is reset to zero before calling this function.\n    // In any case, fill blocks up with zeros until the last 64 bits (i.e. until msg_byte_ptr = 56).\n    // There can be one item which has to be partially zeroed.\n    let modulo = msg_byte_ptr % INT_SIZE;\n    if modulo != 0 {\n        // Index of the block in which we find the item we need to partially zero.\n        let i = msg_byte_ptr / INT_SIZE;\n        let zeros = INT_SIZE - modulo;\n        msg_block[i] = set_item_zeros(msg_block[i], zeros as u8);\n        msg_byte_ptr = msg_byte_ptr + zeros;\n    }\n\n    // The rest can be zeroed without bit shifting anything.\n    for i in (msg_byte_ptr / INT_SIZE)..INT_SIZE_PTR {\n        msg_block[i] = 0;\n    }\n\n    // Set the last two 4 byte ints as the first/second half of the 8 bytes of the length.\n    let len = 8 * message_size;\n    let len_bytes: [u8; 8] = (len as Field).to_be_bytes();\n    for i in 0..=1 {\n        let shift = i * 4;\n        msg_block[INT_SIZE_PTR + i] = make_item(\n            len_bytes[shift],\n            len_bytes[shift + 1],\n            len_bytes[shift + 2],\n            len_bytes[shift + 3],\n        );\n    }\n    msg_block\n}\n\n// Verify that the message length was correctly written by `attach_len_to_msg_block`,\n// and that everything between the byte pointer and the size pointer was zeroed,\n// and that everything before the byte pointer was untouched.\nfn verify_msg_len(\n    msg_block: MSG_BLOCK,\n    last_block: MSG_BLOCK,\n    msg_byte_ptr: BLOCK_BYTE_PTR,\n    message_size: u32,\n) {\n    // Check zeros up to the size pointer.\n    verify_msg_block_zeros(msg_block, msg_byte_ptr, INT_SIZE_PTR);\n\n    // Check that up to the pointer we match the last block.\n    verify_msg_block_equals_last(msg_block, last_block, msg_byte_ptr);\n\n    // We verify the message length was inserted correctly by reversing the byte decomposition.\n    let mut reconstructed_len: u64 = 0;\n    for i in INT_SIZE_PTR..INT_BLOCK_SIZE {\n        reconstructed_len = reconstructed_len * TWO_POW_32;\n        reconstructed_len = reconstructed_len + msg_block[i] as u64;\n    }\n    let len = 8 * message_size as u64;\n    assert_eq(reconstructed_len, len);\n}\n\n// Perform the final compression, then transform the `STATE` into `HASH`.\nfn hash_final_block(msg_block: MSG_BLOCK, mut state: STATE) -> HASH {\n    let mut out_h: HASH = [0; 32]; // Digest as sequence of bytes\n    // Hash final padded block\n    state = sha256_compression(msg_block, state);\n\n    // Return final hash as byte array\n    for j in 0..8 {\n        let h_bytes: [u8; 4] = (state[j] as Field).to_be_bytes();\n        for k in 0..4 {\n            out_h[4 * j + k] = h_bytes[k];\n        }\n    }\n\n    out_h\n}\n\nmod equivalence_test {\n\n    #[test]\n    fn test_implementations_agree(msg: [u8; 100], message_size: u64) {\n        let message_size = message_size % 100;\n        let unconstrained_sha = unsafe { super::__sha256_var(msg, message_size as u32) };\n        let sha = super::sha256_var(msg, message_size);\n        assert_eq(sha, unconstrained_sha);\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/noir-lang/sha256/v0.1.2/src/sha256.nr"},"394":{"source":"use dep::aztec::protocol_types::{\n    traits::{Deserialize, Packable, Serialize},\n    utils::field::field_from_bytes,\n};\nuse std::meta::derive;\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\n#[derive(Deserialize, Eq, Packable, Serialize)]\npub struct FieldCompressedString {\n    value: Field,\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        self.value.to_be_bytes()\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr"},"397":{"source":"use dep::aztec::{\n    context::{PrivateContext, PublicContext},\n    history::nullifier_inclusion::ProveNullifierInclusion,\n    keys::getters::{get_nsk_app, get_public_keys},\n    macros::notes::custom_note,\n    messages::logs::note,\n    note::note_interface::{NoteHash, NoteType},\n    oracle::random::random,\n    protocol_types::{\n        address::AztecAddress,\n        constants::{\n            GENERATOR_INDEX__NOTE_HASH, GENERATOR_INDEX__NOTE_NULLIFIER,\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT, PRIVATE_LOG_SIZE_IN_FIELDS,\n        },\n        hash::{compute_siloed_nullifier, poseidon2_hash_with_separator},\n        traits::{Deserialize, FromField, Hash, Packable, Serialize, ToField},\n        utils::arrays::array_concat,\n    },\n};\n\n// UintNote supports partial notes, i.e. the ability to create an incomplete note in private, hiding certain values (the\n// owner, storage slot and randomness), and then completing the note in public with the ones missing (the amount).\n// Partial notes are being actively developed and are not currently fully supported via macros, and so we rely on the\n// #[custom_note] macro to implement it manually, resulting in some boilerplate. This is expected to be unnecessary once\n// macro support is expanded.\n\n/// A private note representing a numeric value associated to an account (e.g. a token balance).\n#[custom_note]\n#[derive(Eq, Serialize)]\npub struct UintNote {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintPartialNotePrivateContent, and\n    //   b) have the public field at the end\n    // Correct ordering is checked by the tests in this module.\n\n    /// The owner of the note, i.e. the account whose nullifier secret key is required to compute the nullifier.\n    owner: AztecAddress,\n    /// Random value, protects against note hash preimage attacks.\n    randomness: Field,\n    /// The number stored in the note.\n    value: u128,\n}\n\nimpl NoteHash for UintNote {\n    fn compute_note_hash(self, storage_slot: Field) -> Field {\n        // Partial notes can be implemented by having the note hash be either the result of multiscalar multiplication\n        // (MSM), or two rounds of poseidon. MSM results in more constraints and is only required when multiple variants\n        // of partial notes are supported. Because UintNote has just one variant (where the value is public), we use\n        // poseidon instead.\n\n        // We must compute the same note hash as would be produced by a partial note created and completed with the same\n        // values, so that notes all behave the same way regardless of how they were created. To achieve this, we\n        // perform both steps of the partial note computation.\n\n        // First we create the partial note from a commitment to the private content (including storage slot).\n        let private_content =\n            UintPartialNotePrivateContent { owner: self.owner, randomness: self.randomness };\n        let partial_note = PartialUintNote {\n            commitment: private_content.compute_partial_commitment(storage_slot),\n        };\n\n        // Then compute the completion note hash. In a real partial note this step would be performed in public.\n        partial_note.compute_complete_note_hash(self.value)\n    }\n\n    // The nullifiers are nothing special - this is just the canonical implementation that would be injected by the\n    // #[note] macro.\n\n    fn compute_nullifier(\n        self,\n        context: &mut PrivateContext,\n        note_hash_for_nullify: Field,\n    ) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = context.request_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n\n    unconstrained fn compute_nullifier_unconstrained(self, note_hash_for_nullify: Field) -> Field {\n        let owner_npk_m = get_public_keys(self.owner).npk_m;\n        let owner_npk_m_hash = owner_npk_m.hash();\n        let secret = get_nsk_app(owner_npk_m_hash);\n        poseidon2_hash_with_separator(\n            [note_hash_for_nullify, secret],\n            GENERATOR_INDEX__NOTE_NULLIFIER,\n        )\n    }\n}\n\nimpl UintNote {\n    pub fn new(value: u128, owner: AztecAddress) -> Self {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n        Self { value, owner, randomness }\n    }\n\n    pub fn get_value(self) -> u128 {\n        self.value\n    }\n\n    /// Creates a partial note that will hide the owner and storage slot but not the value, since the note will be later\n    /// completed in public. This is a powerful technique for scenarios in which the value cannot be known in private\n    /// (e.g. because it depends on some public state, such as a DEX).\n    ///\n    /// This function inserts a partial note validity commitment into the nullifier tree to be later on able to verify\n    /// that the partial note and completer are legitimate. See function docs of `compute_validity_commitment` for more\n    /// details.\n    ///\n    /// Each partial note should only be used once, since otherwise multiple notes would be linked together and known to\n    /// belong to the same owner.\n    ///\n    /// As part of the partial note creation process, a log will be sent to `recipient` from `sender` so that they can\n    /// discover the note. `recipient` will typically be the same as `owner`.\n    pub fn partial(\n        owner: AztecAddress,\n        storage_slot: Field,\n        context: &mut PrivateContext,\n        recipient: AztecAddress,\n        sender: AztecAddress,\n        completer: AztecAddress,\n    ) -> PartialUintNote {\n        // Safety: We use the randomness to preserve the privacy of the note recipient by preventing brute-forcing,\n        // so a malicious sender could use non-random values to make the note less private. But they already know\n        // the full note pre-image anyway, and so the recipient already trusts them to not disclose this\n        // information. We can therefore assume that the sender will cooperate in the random value generation.\n        let randomness = unsafe { random() };\n\n        // We create a commitment to the private data, which we then use to construct the log we send to the recipient.\n        let commitment = UintPartialNotePrivateContent { owner, randomness }\n            .compute_partial_commitment(storage_slot);\n\n        // Our partial note log encoding scheme includes a field with the tag of the public completion log, and we use\n        // the commitment as the tag. This is good for multiple reasons:\n        //  - the commitment is uniquely tied to this partial note\n        //  - the commitment is already public information, so we're not revealing anything else\n        //  - we don't need to create any additional information, private or public, for the tag\n        //  - other contracts cannot impersonate us and emit logs with the same tag due to public log siloing\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n\n        let encrypted_log =\n            note::compute_partial_note_log(private_log_content, storage_slot, recipient, sender);\n        // Regardless of the original content size, the log is padded with random bytes up to\n        // `PRIVATE_LOG_SIZE_IN_FIELDS` to prevent leaking information about the actual size.\n        let length = encrypted_log.len();\n        context.emit_private_log(encrypted_log, length);\n\n        let partial_note = PartialUintNote { commitment };\n\n        // Now we compute the validity commitment and push it to the nullifier tree. It can be safely pushed to\n        // the nullifier tree since it uses its own separator, making collisions with actual note nullifiers\n        // practically impossible.\n        let validity_commitment = partial_note.compute_validity_commitment(completer);\n        context.push_nullifier(validity_commitment);\n\n        partial_note\n    }\n}\n\n/// The private content of a partial UintNote, i.e. the fields that will remain private. All other note fields will be\n/// made public.\n#[derive(Packable)]\nstruct UintPartialNotePrivateContent {\n    // The ordering of these fields is important given that it must match that of UintNote.\n    // Correct ordering is checked by the tests in this module.\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl UintPartialNotePrivateContent {\n    fn compute_partial_commitment(self, storage_slot: Field) -> Field {\n        // Here we commit to all private values, including the storage slot.\n        poseidon2_hash_with_separator(\n            array_concat(self.pack(), [storage_slot]),\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\n#[derive(Packable)]\nstruct PrivateUintPartialNotePrivateLogContent {\n    // The ordering of these fields is important given that it must:\n    //   a) match that of UintNote, and\n    //   b) have the public log tag at the beginning\n    // Correct ordering is checked by the tests in this module.\n    public_log_tag: Field,\n    owner: AztecAddress,\n    randomness: Field,\n}\n\nimpl NoteType for PrivateUintPartialNotePrivateLogContent {\n    fn get_id() -> Field {\n        UintNote::get_id()\n    }\n}\n\n/// A partial instance of a UintNote. This value represents a private commitment to the owner, randomness and storage\n/// slot, but the value field has not yet been set. A partial note can be completed in public with the `complete`\n/// function (revealing the value to the public), resulting in a UintNote that can be used like any other one (except\n/// of course that its value is known).\n#[derive(Packable, Serialize, Deserialize, Eq)]\npub struct PartialUintNote {\n    commitment: Field,\n}\n\nglobal NOTE_COMPLETION_LOG_LENGTH: u32 = 2;\n\nimpl PartialUintNote {\n    /// Completes the partial note, creating a new note that can be used like any other UintNote.\n    pub fn complete(self, context: &mut PublicContext, completer: AztecAddress, value: u128) {\n        // A note with a value of zero is valid, but we cannot currently complete a partial note with such a value\n        // because this will result in the completion log having its last field set to 0. Public logs currently do not\n        // track their length, and so trailing zeros are simply trimmed. This results in the completion log missing its\n        // last field (the value), and note discovery failing.\n        // TODO(#11636): remove this\n        assert(value != 0, \"Cannot complete a PartialUintNote with a value of 0\");\n\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        assert(\n            context.nullifier_exists(validity_commitment, context.this_address()),\n            \"Invalid partial note or completer\",\n        );\n\n        // We need to do two things:\n        //  - emit a public log containing the public fields (the value). The contract will later find it by searching\n        //  for the expected tag (which is simply the partial note commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_public_log(self.compute_note_completion_log(value));\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Completes the partial note, creating a new note that can be used like any other UintNote. Same as `complete`\n    /// function but works from private context.\n    pub fn complete_from_private(\n        self,\n        context: &mut PrivateContext,\n        completer: AztecAddress,\n        value: u128,\n    ) {\n        // We verify that the partial note we're completing is valid (i.e. completer is correct, it uses the correct\n        // state variable's storage slot, and it is internally consistent).\n        let validity_commitment = self.compute_validity_commitment(completer);\n        // `prove_nullifier_inclusion` function expects the nullifier to be siloed (hashed with the address of\n        // the contract that emitted the nullifier) as it checks the value directly against the nullifier tree and all\n        // the nullifiers in the tree are siloed by the protocol.\n        let siloed_validity_commitment =\n            compute_siloed_nullifier(context.this_address(), validity_commitment);\n        context.get_block_header().prove_nullifier_inclusion(siloed_validity_commitment);\n\n        // We need to do two things:\n        //  - emit an unencrypted log containing the public fields (the value) via the private log channel. The\n        //  contract will later find it by searching for the expected tag (which is simply the partial note\n        //  commitment).\n        //  - insert the completion note hash (i.e. the hash of the note) into the note hash tree. This is typically\n        //  only done in private to hide the preimage of the hash that is inserted, but completed partial notes are\n        //  inserted in public as the public values are provided and the note hash computed.\n        context.emit_private_log(\n            self.compute_note_completion_log_padded_for_private_log(value),\n            NOTE_COMPLETION_LOG_LENGTH,\n        );\n        context.push_note_hash(self.compute_complete_note_hash(value));\n    }\n\n    /// Computes a validity commitment for this partial note. The commitment cryptographically binds the note's private\n    /// data with the designated completer address. When the note is later completed in public execution, we can load\n    /// this commitment from the nullifier tree and verify that both the partial note (e.g. that the storage slot\n    /// corresponds to the correct owner, and that we're using the correct state variable) and completer are\n    /// legitimate.\n    pub fn compute_validity_commitment(self, completer: AztecAddress) -> Field {\n        poseidon2_hash_with_separator(\n            [self.commitment, completer.to_field()],\n            GENERATOR_INDEX__PARTIAL_NOTE_VALIDITY_COMMITMENT,\n        )\n    }\n\n    fn compute_note_completion_log(self, value: u128) -> [Field; NOTE_COMPLETION_LOG_LENGTH] {\n        // The first field of this log must be the tag that the recipient of the partial note private field logs\n        // expects, which is equal to the partial note commitment.\n        [self.commitment, value.to_field()]\n    }\n\n    fn compute_note_completion_log_padded_for_private_log(\n        self,\n        value: u128,\n    ) -> [Field; PRIVATE_LOG_SIZE_IN_FIELDS] {\n        let note_completion_log = self.compute_note_completion_log(value);\n        let padding = [0; PRIVATE_LOG_SIZE_IN_FIELDS - NOTE_COMPLETION_LOG_LENGTH];\n        array_concat(note_completion_log, padding)\n    }\n\n    fn compute_complete_note_hash(self, value: u128) -> Field {\n        // Here we finalize the note hash by including the (public) value into the partial note commitment. Note that we\n        // use the same generator index as we used for the first round of poseidon - this is not an issue.\n        poseidon2_hash_with_separator(\n            [self.commitment, value.to_field()],\n            GENERATOR_INDEX__NOTE_HASH,\n        )\n    }\n}\n\nimpl ToField for PartialUintNote {\n    fn to_field(self) -> Field {\n        self.commitment\n    }\n}\n\nimpl FromField for PartialUintNote {\n    fn from_field(field: Field) -> Self {\n        Self { commitment: field }\n    }\n}\n\nmod test {\n    use super::{\n        PartialUintNote, PrivateUintPartialNotePrivateLogContent, UintNote,\n        UintPartialNotePrivateContent,\n    };\n    use dep::aztec::{\n        note::note_interface::NoteHash,\n        protocol_types::{\n            address::AztecAddress,\n            traits::{FromField, Packable},\n            utils::arrays::array_concat,\n        },\n        utils::array::subarray,\n    };\n\n    global value: u128 = 17;\n    global randomness: Field = 42;\n    global owner: AztecAddress = AztecAddress::from_field(50);\n    global storage_slot: Field = 13;\n\n    #[test]\n    fn note_hash_matches_completed_partial_note_hash() {\n        // Tests that a UintNote has the same note hash as a PartialUintNote created and then completed with the same\n        // private values. This requires for the same hash function to be used in both flows, with the fields in the\n        // same order.\n\n        let note = UintNote { value, randomness, owner };\n        let note_hash = note.compute_note_hash(storage_slot);\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n\n        let partial_note = PartialUintNote {\n            commitment: partial_note_private_content.compute_partial_commitment(storage_slot),\n        };\n        let completed_partial_note_hash = partial_note.compute_complete_note_hash(value);\n\n        assert_eq(note_hash, completed_partial_note_hash);\n    }\n\n    #[test]\n    fn unpack_from_partial_note_encoding() {\n        // Tests that the packed representation of a regular UintNote can be reconstructed given the partial note\n        // private fields log and the public completion log, ensuring the recipient will be able to compute the\n        // completed note as if it were a regular UintNote.\n\n        let note = UintNote { value, randomness, owner };\n\n        let partial_note_private_content = UintPartialNotePrivateContent { owner, randomness };\n        let commitment = partial_note_private_content.compute_partial_commitment(storage_slot);\n\n        let private_log_content = PrivateUintPartialNotePrivateLogContent {\n            owner,\n            randomness,\n            public_log_tag: commitment,\n        };\n        let partial_note = PartialUintNote { commitment };\n\n        // The first field of the partial note private content is the public completion log tag, so it should match the\n        // first field of the public log.\n        assert_eq(\n            private_log_content.pack()[0],\n            partial_note.compute_note_completion_log(value)[0],\n        );\n\n        // Then we extract all fields except the first of both logs (i.e. the public log tag), and combine them to\n        // produce the note's packed representation. This requires that the members of the intermediate structs are in\n        // the same order as in UintNote.\n        let private_log_without_public_tag: [_; 2] = subarray(private_log_content.pack(), 1);\n        let public_log_without_tag: [_; 1] =\n            subarray(partial_note.compute_note_completion_log(value), 1);\n\n        assert_eq(\n            array_concat(private_log_without_public_tag, public_log_without_tag),\n            note.pack(),\n        );\n    }\n}\n","path":"/Users/harshbajpai/nargo/github.com/AztecProtocol/aztec-packages/v1.2.0/noir-projects/aztec-nr/uint-note/src/uint_note.nr"}}}